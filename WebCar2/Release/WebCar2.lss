
WebCar2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000a6a  00000ade  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a6a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800104  00000a6e  00000ae2  2**0
                  ALLOC
  3 .stab         00004218  00000000  00000000  00000ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00005071  00000000  00000000  00004cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_7>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_16>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>

00000068 <port_to_mode_PGM>:
  68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
  72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
  7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
  86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
  9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
  ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
  be:	00 00 00 00                                         ....

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	ea e6       	ldi	r30, 0x6A	; 106
  d6:	fa e0       	ldi	r31, 0x0A	; 10
  d8:	02 c0       	rjmp	.+4      	; 0xde <.do_copy_data_start>

000000da <.do_copy_data_loop>:
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0

000000de <.do_copy_data_start>:
  de:	a4 30       	cpi	r26, 0x04	; 4
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <.do_copy_data_loop>

000000e4 <__do_clear_bss>:
  e4:	11 e0       	ldi	r17, 0x01	; 1
  e6:	a4 e0       	ldi	r26, 0x04	; 4
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	ac 31       	cpi	r26, 0x1C	; 28
  f0:	b1 07       	cpc	r27, r17
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <main>
  f8:	0c 94 33 05 	jmp	0xa66	; 0xa66 <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000100 <__vector_7>:
	timer_shutdown();
	counter_shutdown();
}


ISR(TIMER_ISR_VECTOR)
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	ef 92       	push	r14
 10c:	ff 92       	push	r15
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	2f 93       	push	r18
 114:	3f 93       	push	r19
 116:	4f 93       	push	r20
 118:	5f 93       	push	r21
 11a:	6f 93       	push	r22
 11c:	7f 93       	push	r23
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	af 93       	push	r26
 124:	bf 93       	push	r27
	SREG = status;
	return count;
}

void FreqCountClass::end(void)
{
 126:	20 91 84 00 	lds	r18, 0x0084
 12a:	30 91 85 00 	lds	r19, 0x0085
	uint16_t count_lsw;
	uint32_t count;
	uint16_t index, length;

	count_lsw = counter_read();
	if (counter_overflow()) {
 12e:	b0 9b       	sbis	0x16, 0	; 22
 130:	0b c0       	rjmp	.+22     	; 0x148 <__vector_7+0x48>

ISR(TIMER_ISR_VECTOR)
{
	uint16_t count_lsw;
	uint32_t count;
	uint16_t index, length;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	86 bb       	out	0x16, r24	; 22

	count_lsw = counter_read();
	if (counter_overflow()) {
		counter_overflow_reset();
		count_msw++;
 136:	80 91 04 01 	lds	r24, 0x0104
 13a:	90 91 05 01 	lds	r25, 0x0105
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	90 93 05 01 	sts	0x0105, r25
 144:	80 93 04 01 	sts	0x0104, r24
	}
	index = gate_index + 1;
 148:	60 91 06 01 	lds	r22, 0x0106
 14c:	70 91 07 01 	lds	r23, 0x0107
 150:	6f 5f       	subi	r22, 0xFF	; 255
 152:	7f 4f       	sbci	r23, 0xFF	; 255
	length = gate_length;
	if (index >= length) {
 154:	80 91 08 01 	lds	r24, 0x0108
 158:	90 91 09 01 	lds	r25, 0x0109
 15c:	68 17       	cp	r22, r24
 15e:	79 07       	cpc	r23, r25
 160:	a8 f1       	brcs	.+106    	; 0x1cc <__vector_7+0xcc>
		gate_index = 0;
 162:	10 92 07 01 	sts	0x0107, r1
 166:	10 92 06 01 	sts	0x0106, r1
		count = ((uint32_t)count_msw << 16) + count_lsw;
 16a:	80 91 04 01 	lds	r24, 0x0104
 16e:	90 91 05 01 	lds	r25, 0x0105
 172:	a0 e0       	ldi	r26, 0x00	; 0
 174:	b0 e0       	ldi	r27, 0x00	; 0
 176:	dc 01       	movw	r26, r24
 178:	99 27       	eor	r25, r25
 17a:	88 27       	eor	r24, r24
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	82 0f       	add	r24, r18
 182:	93 1f       	adc	r25, r19
 184:	a4 1f       	adc	r26, r20
 186:	b5 1f       	adc	r27, r21
		count_output = count - count_prev;
 188:	20 91 0a 01 	lds	r18, 0x010A
 18c:	30 91 0b 01 	lds	r19, 0x010B
 190:	40 91 0c 01 	lds	r20, 0x010C
 194:	50 91 0d 01 	lds	r21, 0x010D
 198:	7c 01       	movw	r14, r24
 19a:	8d 01       	movw	r16, r26
 19c:	e2 1a       	sub	r14, r18
 19e:	f3 0a       	sbc	r15, r19
 1a0:	04 0b       	sbc	r16, r20
 1a2:	15 0b       	sbc	r17, r21
 1a4:	e0 92 0e 01 	sts	0x010E, r14
 1a8:	f0 92 0f 01 	sts	0x010F, r15
 1ac:	00 93 10 01 	sts	0x0110, r16
 1b0:	10 93 11 01 	sts	0x0111, r17
		count_prev = count;
 1b4:	80 93 0a 01 	sts	0x010A, r24
 1b8:	90 93 0b 01 	sts	0x010B, r25
 1bc:	a0 93 0c 01 	sts	0x010C, r26
 1c0:	b0 93 0d 01 	sts	0x010D, r27
		count_ready = 1;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	80 93 12 01 	sts	0x0112, r24
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <__vector_7+0xd4>
		restore_other_interrupts();
	} else {
		if (index == length - 1) disable_other_interrupts();
		gate_index = index;
 1cc:	70 93 07 01 	sts	0x0107, r23
 1d0:	60 93 06 01 	sts	0x0106, r22
	}
}
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	1f 91       	pop	r17
 1ea:	0f 91       	pop	r16
 1ec:	ff 90       	pop	r15
 1ee:	ef 90       	pop	r14
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <_Z4stopv>:
void middle() {
	DIS_RIGHT;
	DIS_LEFT;
}
void stop() {
	DIS_FWD;
 1fa:	8f e0       	ldi	r24, 0x0F	; 15
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	0e 94 30 03 	call	0x660	; 0x660 <digitalWrite>
	DIS_BWD;
 202:	8e e0       	ldi	r24, 0x0E	; 14
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	0e 94 30 03 	call	0x660	; 0x660 <digitalWrite>
}
 20a:	08 95       	ret

0000020c <_Z6middlev>:
void enableBwd() {
	DIS_FWD;
	EN_BWD;
}
void middle() {
	DIS_RIGHT;
 20c:	81 e1       	ldi	r24, 0x11	; 17
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	0e 94 30 03 	call	0x660	; 0x660 <digitalWrite>
	DIS_LEFT;
 214:	80 e1       	ldi	r24, 0x10	; 16
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	0e 94 30 03 	call	0x660	; 0x660 <digitalWrite>
}
 21c:	08 95       	ret

0000021e <_Z9enableBwdv>:
void enableFwd() {
	DIS_BWD;
	EN_FWD;
}
void enableBwd() {
	DIS_FWD;
 21e:	8f e0       	ldi	r24, 0x0F	; 15
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	0e 94 30 03 	call	0x660	; 0x660 <digitalWrite>
	EN_BWD;
 226:	8e e0       	ldi	r24, 0x0E	; 14
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	0e 94 30 03 	call	0x660	; 0x660 <digitalWrite>
}
 22e:	08 95       	ret

00000230 <_Z9enableFwdv>:
void enableLeft() {
	DIS_RIGHT;
	EN_LEFT;
}
void enableFwd() {
	DIS_BWD;
 230:	8e e0       	ldi	r24, 0x0E	; 14
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	0e 94 30 03 	call	0x660	; 0x660 <digitalWrite>
	EN_FWD;
 238:	8f e0       	ldi	r24, 0x0F	; 15
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	0e 94 30 03 	call	0x660	; 0x660 <digitalWrite>
}
 240:	08 95       	ret

00000242 <_Z6moveFBbi>:
	//delay(50);
	//PWM_RL(val);
	setPWM( true, val );
}

void moveFB( bool forward, int val ) {
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	16 2f       	mov	r17, r22
 248:	07 2f       	mov	r16, r23
	if ( val > FB_MAX )
		val = FB_MAX;
	else if ( val < FB_MIN )
		val = FB_MIN;

	if (forward)
 24a:	88 23       	and	r24, r24
 24c:	19 f0       	breq	.+6      	; 0x254 <_Z6moveFBbi+0x12>
		enableFwd();
 24e:	0e 94 18 01 	call	0x230	; 0x230 <_Z9enableFwdv>
 252:	02 c0       	rjmp	.+4      	; 0x258 <_Z6moveFBbi+0x16>
	else
		enableBwd();
 254:	0e 94 0f 01 	call	0x21e	; 0x21e <_Z9enableBwdv>
 258:	81 2f       	mov	r24, r17
 25a:	90 2f       	mov	r25, r16
 25c:	9c 01       	movw	r18, r24
 25e:	37 ff       	sbrs	r19, 7
 260:	02 c0       	rjmp	.+4      	; 0x266 <_Z6moveFBbi+0x24>
 262:	20 e0       	ldi	r18, 0x00	; 0
 264:	30 e0       	ldi	r19, 0x00	; 0
	// 0 ... 1
	// 0 ... 148
	if (r2l)
		valRL = 148*val;
	else
		valFB = 148*val;
 266:	2b 30       	cpi	r18, 0x0B	; 11
 268:	31 05       	cpc	r19, r1
 26a:	14 f0       	brlt	.+4      	; 0x270 <_Z6moveFBbi+0x2e>
 26c:	2a e0       	ldi	r18, 0x0A	; 10
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	b9 01       	movw	r22, r18
 272:	88 27       	eor	r24, r24
 274:	77 fd       	sbrc	r23, 7
 276:	80 95       	com	r24
 278:	98 2f       	mov	r25, r24
 27a:	0e 94 20 04 	call	0x840	; 0x840 <__floatsisf>
 27e:	20 e0       	ldi	r18, 0x00	; 0
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	44 e1       	ldi	r20, 0x14	; 20
 284:	53 e4       	ldi	r21, 0x43	; 67
 286:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__mulsf3>
 28a:	0e 94 ed 03 	call	0x7da	; 0x7da <__fixsfsi>
 28e:	70 93 03 01 	sts	0x0103, r23
 292:	60 93 02 01 	sts	0x0102, r22
		enableBwd();

	//delay(50);
	//PWM_FB(val);
	setPWM( false, val );
}
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	08 95       	ret

0000029c <_Z4movef>:
		steerRL(false, RL_BOUNDARY(-1*val));
	else
		steerRL(true, RL_BOUNDARY(val));
}

void move( float val ) {
 29c:	ef 92       	push	r14
 29e:	ff 92       	push	r15
 2a0:	0f 93       	push	r16
 2a2:	1f 93       	push	r17
 2a4:	7b 01       	movw	r14, r22
 2a6:	8c 01       	movw	r16, r24
	if ( val==0 )
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__cmpsf2>
 2b4:	88 23       	and	r24, r24
 2b6:	19 f4       	brne	.+6      	; 0x2be <_Z4movef+0x22>
		stop();
 2b8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_Z4stopv>
 2bc:	34 c0       	rjmp	.+104    	; 0x326 <_Z4movef+0x8a>
	else if ( val<0 )
 2be:	c8 01       	movw	r24, r16
 2c0:	b7 01       	movw	r22, r14
 2c2:	20 e0       	ldi	r18, 0x00	; 0
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	50 e0       	ldi	r21, 0x00	; 0
 2ca:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__cmpsf2>
 2ce:	88 23       	and	r24, r24
 2d0:	a4 f4       	brge	.+40     	; 0x2fa <_Z4movef+0x5e>
		moveFB(false, FB_BOUNDARY(-1*val));
 2d2:	c8 01       	movw	r24, r16
 2d4:	b7 01       	movw	r22, r14
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	40 e2       	ldi	r20, 0x20	; 32
 2dc:	51 ec       	ldi	r21, 0xC1	; 193
 2de:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__mulsf3>
 2e2:	20 e0       	ldi	r18, 0x00	; 0
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	50 e0       	ldi	r21, 0x00	; 0
 2ea:	0e 94 85 03 	call	0x70a	; 0x70a <__addsf3>
 2ee:	0e 94 ed 03 	call	0x7da	; 0x7da <__fixsfsi>
 2f2:	9b 01       	movw	r18, r22
 2f4:	ac 01       	movw	r20, r24
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	13 c0       	rjmp	.+38     	; 0x320 <_Z4movef+0x84>
	else
		moveFB(true, FB_BOUNDARY(val));
 2fa:	c8 01       	movw	r24, r16
 2fc:	b7 01       	movw	r22, r14
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	40 e2       	ldi	r20, 0x20	; 32
 304:	51 e4       	ldi	r21, 0x41	; 65
 306:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__mulsf3>
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	40 e0       	ldi	r20, 0x00	; 0
 310:	50 e0       	ldi	r21, 0x00	; 0
 312:	0e 94 85 03 	call	0x70a	; 0x70a <__addsf3>
 316:	0e 94 ed 03 	call	0x7da	; 0x7da <__fixsfsi>
 31a:	9b 01       	movw	r18, r22
 31c:	ac 01       	movw	r20, r24
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	b9 01       	movw	r22, r18
 322:	0e 94 21 01 	call	0x242	; 0x242 <_Z6moveFBbi>
}
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	ff 90       	pop	r15
 32c:	ef 90       	pop	r14
 32e:	08 95       	ret

00000330 <_Z10enableLeftv>:
void enableRight() {
	DIS_LEFT;
	EN_RIGHT;
}
void enableLeft() {
	DIS_RIGHT;
 330:	81 e1       	ldi	r24, 0x11	; 17
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	0e 94 30 03 	call	0x660	; 0x660 <digitalWrite>
	EN_LEFT;
 338:	80 e1       	ldi	r24, 0x10	; 16
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	0e 94 30 03 	call	0x660	; 0x660 <digitalWrite>
}
 340:	08 95       	ret

00000342 <_Z11enableRightv>:
	//PWM_FB(val);
	setPWM( false, val );
}

void enableRight() {
	DIS_LEFT;
 342:	80 e1       	ldi	r24, 0x10	; 16
 344:	61 e0       	ldi	r22, 0x01	; 1
 346:	0e 94 30 03 	call	0x660	; 0x660 <digitalWrite>
	EN_RIGHT;
 34a:	81 e1       	ldi	r24, 0x11	; 17
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	0e 94 30 03 	call	0x660	; 0x660 <digitalWrite>
}
 352:	08 95       	ret

00000354 <_Z7steerRLbi>:
		moveFB(false, FB_BOUNDARY(-1*val));
	else
		moveFB(true, FB_BOUNDARY(val));
}

void steerRL( bool right, int val ) {
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	16 2f       	mov	r17, r22
 35a:	07 2f       	mov	r16, r23
	if ( val > RL_MAX )
		val = RL_MAX;
	else if ( val < RL_MIN )
		val = RL_MIN;

	if (right)
 35c:	88 23       	and	r24, r24
 35e:	19 f0       	breq	.+6      	; 0x366 <_Z7steerRLbi+0x12>
		enableRight();
 360:	0e 94 a1 01 	call	0x342	; 0x342 <_Z11enableRightv>
 364:	02 c0       	rjmp	.+4      	; 0x36a <_Z7steerRLbi+0x16>
	else
		enableLeft();
 366:	0e 94 98 01 	call	0x330	; 0x330 <_Z10enableLeftv>
 36a:	81 2f       	mov	r24, r17
 36c:	90 2f       	mov	r25, r16
 36e:	9c 01       	movw	r18, r24
 370:	37 ff       	sbrs	r19, 7
 372:	02 c0       	rjmp	.+4      	; 0x378 <_Z7steerRLbi+0x24>
 374:	20 e0       	ldi	r18, 0x00	; 0
 376:	30 e0       	ldi	r19, 0x00	; 0

void setPWM( bool r2l, float val ) {
	// 0 ... 1
	// 0 ... 148
	if (r2l)
		valRL = 148*val;
 378:	25 36       	cpi	r18, 0x65	; 101
 37a:	31 05       	cpc	r19, r1
 37c:	14 f0       	brlt	.+4      	; 0x382 <_Z7steerRLbi+0x2e>
 37e:	24 e6       	ldi	r18, 0x64	; 100
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	b9 01       	movw	r22, r18
 384:	88 27       	eor	r24, r24
 386:	77 fd       	sbrc	r23, 7
 388:	80 95       	com	r24
 38a:	98 2f       	mov	r25, r24
 38c:	0e 94 20 04 	call	0x840	; 0x840 <__floatsisf>
 390:	20 e0       	ldi	r18, 0x00	; 0
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	44 e1       	ldi	r20, 0x14	; 20
 396:	53 e4       	ldi	r21, 0x43	; 67
 398:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__mulsf3>
 39c:	0e 94 ed 03 	call	0x7da	; 0x7da <__fixsfsi>
 3a0:	70 93 01 01 	sts	0x0101, r23
 3a4:	60 93 00 01 	sts	0x0100, r22
		enableLeft();

	//delay(50);
	//PWM_RL(val);
	setPWM( true, val );
}
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	08 95       	ret

000003ae <_Z5steerf>:
  	*/

}


void steer( float val ) {
 3ae:	ef 92       	push	r14
 3b0:	ff 92       	push	r15
 3b2:	0f 93       	push	r16
 3b4:	1f 93       	push	r17
 3b6:	7b 01       	movw	r14, r22
 3b8:	8c 01       	movw	r16, r24
	if ( val==0 )
 3ba:	20 e0       	ldi	r18, 0x00	; 0
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	40 e0       	ldi	r20, 0x00	; 0
 3c0:	50 e0       	ldi	r21, 0x00	; 0
 3c2:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__cmpsf2>
 3c6:	88 23       	and	r24, r24
 3c8:	19 f4       	brne	.+6      	; 0x3d0 <_Z5steerf+0x22>
		middle();
 3ca:	0e 94 06 01 	call	0x20c	; 0x20c <_Z6middlev>
 3ce:	34 c0       	rjmp	.+104    	; 0x438 <_Z5steerf+0x8a>

	else if ( val<0 )
 3d0:	c8 01       	movw	r24, r16
 3d2:	b7 01       	movw	r22, r14
 3d4:	20 e0       	ldi	r18, 0x00	; 0
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	40 e0       	ldi	r20, 0x00	; 0
 3da:	50 e0       	ldi	r21, 0x00	; 0
 3dc:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__cmpsf2>
 3e0:	88 23       	and	r24, r24
 3e2:	a4 f4       	brge	.+40     	; 0x40c <_Z5steerf+0x5e>
		steerRL(false, RL_BOUNDARY(-1*val));
 3e4:	c8 01       	movw	r24, r16
 3e6:	b7 01       	movw	r22, r14
 3e8:	20 e0       	ldi	r18, 0x00	; 0
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	48 ec       	ldi	r20, 0xC8	; 200
 3ee:	52 ec       	ldi	r21, 0xC2	; 194
 3f0:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__mulsf3>
 3f4:	20 e0       	ldi	r18, 0x00	; 0
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	40 e0       	ldi	r20, 0x00	; 0
 3fa:	50 e0       	ldi	r21, 0x00	; 0
 3fc:	0e 94 85 03 	call	0x70a	; 0x70a <__addsf3>
 400:	0e 94 ed 03 	call	0x7da	; 0x7da <__fixsfsi>
 404:	9b 01       	movw	r18, r22
 406:	ac 01       	movw	r20, r24
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	13 c0       	rjmp	.+38     	; 0x432 <_Z5steerf+0x84>
	else
		steerRL(true, RL_BOUNDARY(val));
 40c:	c8 01       	movw	r24, r16
 40e:	b7 01       	movw	r22, r14
 410:	20 e0       	ldi	r18, 0x00	; 0
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	48 ec       	ldi	r20, 0xC8	; 200
 416:	52 e4       	ldi	r21, 0x42	; 66
 418:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__mulsf3>
 41c:	20 e0       	ldi	r18, 0x00	; 0
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	0e 94 85 03 	call	0x70a	; 0x70a <__addsf3>
 428:	0e 94 ed 03 	call	0x7da	; 0x7da <__fixsfsi>
 42c:	9b 01       	movw	r18, r22
 42e:	ac 01       	movw	r20, r24
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	b9 01       	movw	r22, r18
 434:	0e 94 aa 01 	call	0x354	; 0x354 <_Z7steerRLbi>
}
 438:	1f 91       	pop	r17
 43a:	0f 91       	pop	r16
 43c:	ff 90       	pop	r15
 43e:	ef 90       	pop	r14
 440:	08 95       	ret

00000442 <loop>:

	}
*/
	//steer(1);
	//move(1);
	digitalWrite(PIN_PWM_RL,HIGH);
 442:	82 e0       	ldi	r24, 0x02	; 2
 444:	61 e0       	ldi	r22, 0x01	; 1
 446:	0e 94 30 03 	call	0x660	; 0x660 <digitalWrite>
	digitalWrite(PIN_PWM_FB,HIGH);
 44a:	83 e0       	ldi	r24, 0x03	; 3
 44c:	61 e0       	ldi	r22, 0x01	; 1
 44e:	0e 94 30 03 	call	0x660	; 0x660 <digitalWrite>

	 f -> b takes 3x, --> 0.0+3x0.05 = 0.15
		--> means, that between -0.15 and 0.15 it stops
  	*/

}
 452:	08 95       	ret

00000454 <setup>:


void setup()
{
	/* set Pins to OUTPUT */
	pinMode(PIN_EN_RIGHT, OUTPUT);
 454:	81 e1       	ldi	r24, 0x11	; 17
 456:	61 e0       	ldi	r22, 0x01	; 1
 458:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <pinMode>
	pinMode(PIN_EN_LEFT, OUTPUT);
 45c:	80 e1       	ldi	r24, 0x10	; 16
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <pinMode>
	pinMode(PIN_EN_FWD, OUTPUT);
 464:	8f e0       	ldi	r24, 0x0F	; 15
 466:	61 e0       	ldi	r22, 0x01	; 1
 468:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <pinMode>
	pinMode(PIN_EN_BWD, OUTPUT);
 46c:	8e e0       	ldi	r24, 0x0E	; 14
 46e:	61 e0       	ldi	r22, 0x01	; 1
 470:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <pinMode>

	pinMode(PIN_PWM_RL, OUTPUT);
 474:	82 e0       	ldi	r24, 0x02	; 2
 476:	61 e0       	ldi	r22, 0x01	; 1
 478:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <pinMode>
	pinMode(PIN_PWM_FB, OUTPUT);
 47c:	83 e0       	ldi	r24, 0x03	; 3
 47e:	61 e0       	ldi	r22, 0x01	; 1
 480:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <pinMode>


	/* disable all Pins */
	steer( 0 );
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_Z5steerf>
	move( 0 );
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z4movef>
//	uint8_t status = SREG;
//	cli();
//	startPWM();
//	SREG = status;

	enableRight();
 49c:	0e 94 a1 01 	call	0x342	; 0x342 <_Z11enableRightv>
	enableFwd();
 4a0:	0e 94 18 01 	call	0x230	; 0x230 <_Z9enableFwdv>
	//FreqCount.begin(countGate);
}
 4a4:	08 95       	ret

000004a6 <main>:
#include <Arduino.h>

int main(void)
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
{
	init();
 4aa:	0e 94 b6 02 	call	0x56c	; 0x56c <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 4ae:	0e 94 2a 02 	call	0x454	; 0x454 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 4b2:	c0 e0       	ldi	r28, 0x00	; 0
 4b4:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 4b6:	0e 94 21 02 	call	0x442	; 0x442 <loop>
		if (serialEventRun) serialEventRun();
 4ba:	20 97       	sbiw	r28, 0x00	; 0
 4bc:	e1 f3       	breq	.-8      	; 0x4b6 <main+0x10>
 4be:	0e 94 00 00 	call	0	; 0x0 <__heap_end>
 4c2:	f9 cf       	rjmp	.-14     	; 0x4b6 <main+0x10>

000004c4 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
 4ce:	2f 93       	push	r18
 4d0:	3f 93       	push	r19
 4d2:	4f 93       	push	r20
 4d4:	5f 93       	push	r21
 4d6:	6f 93       	push	r22
 4d8:	7f 93       	push	r23
 4da:	8f 93       	push	r24
 4dc:	9f 93       	push	r25
 4de:	af 93       	push	r26
 4e0:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 4e2:	20 91 17 01 	lds	r18, 0x0117
 4e6:	30 91 18 01 	lds	r19, 0x0118
 4ea:	40 91 19 01 	lds	r20, 0x0119
 4ee:	50 91 1a 01 	lds	r21, 0x011A
	unsigned char f = timer0_fract;
 4f2:	70 91 1b 01 	lds	r23, 0x011B

	m += MILLIS_INC;
 4f6:	da 01       	movw	r26, r20
 4f8:	c9 01       	movw	r24, r18
 4fa:	02 96       	adiw	r24, 0x02	; 2
 4fc:	a1 1d       	adc	r26, r1
 4fe:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
 500:	67 2f       	mov	r22, r23
 502:	6a 5f       	subi	r22, 0xFA	; 250
	if (f >= FRACT_MAX) {
 504:	6d 37       	cpi	r22, 0x7D	; 125
 506:	30 f0       	brcs	.+12     	; 0x514 <__vector_16+0x50>
		f -= FRACT_MAX;
 508:	6d 57       	subi	r22, 0x7D	; 125
		m += 1;
 50a:	da 01       	movw	r26, r20
 50c:	c9 01       	movw	r24, r18
 50e:	03 96       	adiw	r24, 0x03	; 3
 510:	a1 1d       	adc	r26, r1
 512:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 514:	60 93 1b 01 	sts	0x011B, r22
	timer0_millis = m;
 518:	80 93 17 01 	sts	0x0117, r24
 51c:	90 93 18 01 	sts	0x0118, r25
 520:	a0 93 19 01 	sts	0x0119, r26
 524:	b0 93 1a 01 	sts	0x011A, r27
	timer0_overflow_count++;
 528:	80 91 13 01 	lds	r24, 0x0113
 52c:	90 91 14 01 	lds	r25, 0x0114
 530:	a0 91 15 01 	lds	r26, 0x0115
 534:	b0 91 16 01 	lds	r27, 0x0116
 538:	01 96       	adiw	r24, 0x01	; 1
 53a:	a1 1d       	adc	r26, r1
 53c:	b1 1d       	adc	r27, r1
 53e:	80 93 13 01 	sts	0x0113, r24
 542:	90 93 14 01 	sts	0x0114, r25
 546:	a0 93 15 01 	sts	0x0115, r26
 54a:	b0 93 16 01 	sts	0x0116, r27
}
 54e:	bf 91       	pop	r27
 550:	af 91       	pop	r26
 552:	9f 91       	pop	r25
 554:	8f 91       	pop	r24
 556:	7f 91       	pop	r23
 558:	6f 91       	pop	r22
 55a:	5f 91       	pop	r21
 55c:	4f 91       	pop	r20
 55e:	3f 91       	pop	r19
 560:	2f 91       	pop	r18
 562:	0f 90       	pop	r0
 564:	0f be       	out	0x3f, r0	; 63
 566:	0f 90       	pop	r0
 568:	1f 90       	pop	r1
 56a:	18 95       	reti

0000056c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 56c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 56e:	84 b5       	in	r24, 0x24	; 36
 570:	82 60       	ori	r24, 0x02	; 2
 572:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 574:	84 b5       	in	r24, 0x24	; 36
 576:	81 60       	ori	r24, 0x01	; 1
 578:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 57a:	85 b5       	in	r24, 0x25	; 37
 57c:	82 60       	ori	r24, 0x02	; 2
 57e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 580:	85 b5       	in	r24, 0x25	; 37
 582:	81 60       	ori	r24, 0x01	; 1
 584:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 586:	ee e6       	ldi	r30, 0x6E	; 110
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	80 81       	ld	r24, Z
 58c:	81 60       	ori	r24, 0x01	; 1
 58e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 590:	e1 e8       	ldi	r30, 0x81	; 129
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 596:	80 81       	ld	r24, Z
 598:	82 60       	ori	r24, 0x02	; 2
 59a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 59c:	80 81       	ld	r24, Z
 59e:	81 60       	ori	r24, 0x01	; 1
 5a0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 5a2:	e0 e8       	ldi	r30, 0x80	; 128
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	80 81       	ld	r24, Z
 5a8:	81 60       	ori	r24, 0x01	; 1
 5aa:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 5ac:	e1 eb       	ldi	r30, 0xB1	; 177
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 81       	ld	r24, Z
 5b2:	84 60       	ori	r24, 0x04	; 4
 5b4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 5b6:	e0 eb       	ldi	r30, 0xB0	; 176
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	80 81       	ld	r24, Z
 5bc:	81 60       	ori	r24, 0x01	; 1
 5be:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 5c0:	ea e7       	ldi	r30, 0x7A	; 122
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	80 81       	ld	r24, Z
 5c6:	84 60       	ori	r24, 0x04	; 4
 5c8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 5ca:	80 81       	ld	r24, Z
 5cc:	82 60       	ori	r24, 0x02	; 2
 5ce:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 5d0:	80 81       	ld	r24, Z
 5d2:	81 60       	ori	r24, 0x01	; 1
 5d4:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 5d6:	80 81       	ld	r24, Z
 5d8:	80 68       	ori	r24, 0x80	; 128
 5da:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 5dc:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 5e0:	08 95       	ret

000005e2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 5e2:	cf 93       	push	r28
 5e4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 5e6:	48 2f       	mov	r20, r24
 5e8:	50 e0       	ldi	r21, 0x00	; 0
 5ea:	ca 01       	movw	r24, r20
 5ec:	86 56       	subi	r24, 0x66	; 102
 5ee:	9f 4f       	sbci	r25, 0xFF	; 255
 5f0:	fc 01       	movw	r30, r24
 5f2:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
 5f4:	4a 57       	subi	r20, 0x7A	; 122
 5f6:	5f 4f       	sbci	r21, 0xFF	; 255
 5f8:	fa 01       	movw	r30, r20
 5fa:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 5fc:	88 23       	and	r24, r24
 5fe:	69 f1       	breq	.+90     	; 0x65a <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	fc 01       	movw	r30, r24
 608:	e8 59       	subi	r30, 0x98	; 152
 60a:	ff 4f       	sbci	r31, 0xFF	; 255
 60c:	a5 91       	lpm	r26, Z+
 60e:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
 610:	fc 01       	movw	r30, r24
 612:	ee 58       	subi	r30, 0x8E	; 142
 614:	ff 4f       	sbci	r31, 0xFF	; 255
 616:	c5 91       	lpm	r28, Z+
 618:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
 61a:	66 23       	and	r22, r22
 61c:	51 f4       	brne	.+20     	; 0x632 <pinMode+0x50>
		uint8_t oldSREG = SREG;
 61e:	2f b7       	in	r18, 0x3f	; 63
                cli();
 620:	f8 94       	cli
		*reg &= ~bit;
 622:	8c 91       	ld	r24, X
 624:	93 2f       	mov	r25, r19
 626:	90 95       	com	r25
 628:	89 23       	and	r24, r25
 62a:	8c 93       	st	X, r24
		*out &= ~bit;
 62c:	88 81       	ld	r24, Y
 62e:	89 23       	and	r24, r25
 630:	0b c0       	rjmp	.+22     	; 0x648 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 632:	62 30       	cpi	r22, 0x02	; 2
 634:	61 f4       	brne	.+24     	; 0x64e <pinMode+0x6c>
		uint8_t oldSREG = SREG;
 636:	2f b7       	in	r18, 0x3f	; 63
                cli();
 638:	f8 94       	cli
		*reg &= ~bit;
 63a:	8c 91       	ld	r24, X
 63c:	93 2f       	mov	r25, r19
 63e:	90 95       	com	r25
 640:	89 23       	and	r24, r25
 642:	8c 93       	st	X, r24
		*out |= bit;
 644:	88 81       	ld	r24, Y
 646:	83 2b       	or	r24, r19
 648:	88 83       	st	Y, r24
		SREG = oldSREG;
 64a:	2f bf       	out	0x3f, r18	; 63
 64c:	06 c0       	rjmp	.+12     	; 0x65a <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
 64e:	9f b7       	in	r25, 0x3f	; 63
                cli();
 650:	f8 94       	cli
		*reg |= bit;
 652:	8c 91       	ld	r24, X
 654:	83 2b       	or	r24, r19
 656:	8c 93       	st	X, r24
		SREG = oldSREG;
 658:	9f bf       	out	0x3f, r25	; 63
	}
}
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	08 95       	ret

00000660 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
 660:	48 2f       	mov	r20, r24
 662:	50 e0       	ldi	r21, 0x00	; 0
 664:	ca 01       	movw	r24, r20
 666:	82 55       	subi	r24, 0x52	; 82
 668:	9f 4f       	sbci	r25, 0xFF	; 255
 66a:	fc 01       	movw	r30, r24
 66c:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
 66e:	ca 01       	movw	r24, r20
 670:	86 56       	subi	r24, 0x66	; 102
 672:	9f 4f       	sbci	r25, 0xFF	; 255
 674:	fc 01       	movw	r30, r24
 676:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
 678:	4a 57       	subi	r20, 0x7A	; 122
 67a:	5f 4f       	sbci	r21, 0xFF	; 255
 67c:	fa 01       	movw	r30, r20
 67e:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 680:	33 23       	and	r19, r19
 682:	09 f4       	brne	.+2      	; 0x686 <digitalWrite+0x26>
 684:	40 c0       	rjmp	.+128    	; 0x706 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 686:	22 23       	and	r18, r18
 688:	51 f1       	breq	.+84     	; 0x6de <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 68a:	23 30       	cpi	r18, 0x03	; 3
 68c:	71 f0       	breq	.+28     	; 0x6aa <digitalWrite+0x4a>
 68e:	24 30       	cpi	r18, 0x04	; 4
 690:	28 f4       	brcc	.+10     	; 0x69c <digitalWrite+0x3c>
 692:	21 30       	cpi	r18, 0x01	; 1
 694:	a1 f0       	breq	.+40     	; 0x6be <digitalWrite+0x5e>
 696:	22 30       	cpi	r18, 0x02	; 2
 698:	11 f5       	brne	.+68     	; 0x6de <digitalWrite+0x7e>
 69a:	14 c0       	rjmp	.+40     	; 0x6c4 <digitalWrite+0x64>
 69c:	26 30       	cpi	r18, 0x06	; 6
 69e:	b1 f0       	breq	.+44     	; 0x6cc <digitalWrite+0x6c>
 6a0:	27 30       	cpi	r18, 0x07	; 7
 6a2:	c1 f0       	breq	.+48     	; 0x6d4 <digitalWrite+0x74>
 6a4:	24 30       	cpi	r18, 0x04	; 4
 6a6:	d9 f4       	brne	.+54     	; 0x6de <digitalWrite+0x7e>
 6a8:	04 c0       	rjmp	.+8      	; 0x6b2 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 6aa:	80 91 80 00 	lds	r24, 0x0080
 6ae:	8f 77       	andi	r24, 0x7F	; 127
 6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 6b2:	80 91 80 00 	lds	r24, 0x0080
 6b6:	8f 7d       	andi	r24, 0xDF	; 223
 6b8:	80 93 80 00 	sts	0x0080, r24
 6bc:	10 c0       	rjmp	.+32     	; 0x6de <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 6be:	84 b5       	in	r24, 0x24	; 36
 6c0:	8f 77       	andi	r24, 0x7F	; 127
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 6c4:	84 b5       	in	r24, 0x24	; 36
 6c6:	8f 7d       	andi	r24, 0xDF	; 223
 6c8:	84 bd       	out	0x24, r24	; 36
 6ca:	09 c0       	rjmp	.+18     	; 0x6de <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 6cc:	80 91 b0 00 	lds	r24, 0x00B0
 6d0:	8f 77       	andi	r24, 0x7F	; 127
 6d2:	03 c0       	rjmp	.+6      	; 0x6da <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 6d4:	80 91 b0 00 	lds	r24, 0x00B0
 6d8:	8f 7d       	andi	r24, 0xDF	; 223
 6da:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 6de:	e3 2f       	mov	r30, r19
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	ee 0f       	add	r30, r30
 6e4:	ff 1f       	adc	r31, r31
 6e6:	ee 58       	subi	r30, 0x8E	; 142
 6e8:	ff 4f       	sbci	r31, 0xFF	; 255
 6ea:	a5 91       	lpm	r26, Z+
 6ec:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
 6ee:	2f b7       	in	r18, 0x3f	; 63
	cli();
 6f0:	f8 94       	cli

	if (val == LOW) {
 6f2:	66 23       	and	r22, r22
 6f4:	21 f4       	brne	.+8      	; 0x6fe <digitalWrite+0x9e>
		*out &= ~bit;
 6f6:	8c 91       	ld	r24, X
 6f8:	90 95       	com	r25
 6fa:	89 23       	and	r24, r25
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <digitalWrite+0xa2>
	} else {
		*out |= bit;
 6fe:	8c 91       	ld	r24, X
 700:	89 2b       	or	r24, r25
 702:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
 704:	2f bf       	out	0x3f, r18	; 63
 706:	08 95       	ret

00000708 <__subsf3>:
 708:	50 58       	subi	r21, 0x80	; 128

0000070a <__addsf3>:
 70a:	bb 27       	eor	r27, r27
 70c:	aa 27       	eor	r26, r26
 70e:	0e d0       	rcall	.+28     	; 0x72c <__addsf3x>
 710:	0d c1       	rjmp	.+538    	; 0x92c <__fp_round>
 712:	fe d0       	rcall	.+508    	; 0x910 <__fp_pscA>
 714:	30 f0       	brcs	.+12     	; 0x722 <__addsf3+0x18>
 716:	03 d1       	rcall	.+518    	; 0x91e <__fp_pscB>
 718:	20 f0       	brcs	.+8      	; 0x722 <__addsf3+0x18>
 71a:	31 f4       	brne	.+12     	; 0x728 <__addsf3+0x1e>
 71c:	9f 3f       	cpi	r25, 0xFF	; 255
 71e:	11 f4       	brne	.+4      	; 0x724 <__addsf3+0x1a>
 720:	1e f4       	brtc	.+6      	; 0x728 <__addsf3+0x1e>
 722:	f3 c0       	rjmp	.+486    	; 0x90a <__fp_nan>
 724:	0e f4       	brtc	.+2      	; 0x728 <__addsf3+0x1e>
 726:	e0 95       	com	r30
 728:	e7 fb       	bst	r30, 7
 72a:	e9 c0       	rjmp	.+466    	; 0x8fe <__fp_inf>

0000072c <__addsf3x>:
 72c:	e9 2f       	mov	r30, r25
 72e:	0f d1       	rcall	.+542    	; 0x94e <__fp_split3>
 730:	80 f3       	brcs	.-32     	; 0x712 <__addsf3+0x8>
 732:	ba 17       	cp	r27, r26
 734:	62 07       	cpc	r22, r18
 736:	73 07       	cpc	r23, r19
 738:	84 07       	cpc	r24, r20
 73a:	95 07       	cpc	r25, r21
 73c:	18 f0       	brcs	.+6      	; 0x744 <__addsf3x+0x18>
 73e:	71 f4       	brne	.+28     	; 0x75c <__addsf3x+0x30>
 740:	9e f5       	brtc	.+102    	; 0x7a8 <__addsf3x+0x7c>
 742:	27 c1       	rjmp	.+590    	; 0x992 <__fp_zero>
 744:	0e f4       	brtc	.+2      	; 0x748 <__addsf3x+0x1c>
 746:	e0 95       	com	r30
 748:	0b 2e       	mov	r0, r27
 74a:	ba 2f       	mov	r27, r26
 74c:	a0 2d       	mov	r26, r0
 74e:	0b 01       	movw	r0, r22
 750:	b9 01       	movw	r22, r18
 752:	90 01       	movw	r18, r0
 754:	0c 01       	movw	r0, r24
 756:	ca 01       	movw	r24, r20
 758:	a0 01       	movw	r20, r0
 75a:	11 24       	eor	r1, r1
 75c:	ff 27       	eor	r31, r31
 75e:	59 1b       	sub	r21, r25
 760:	99 f0       	breq	.+38     	; 0x788 <__addsf3x+0x5c>
 762:	59 3f       	cpi	r21, 0xF9	; 249
 764:	50 f4       	brcc	.+20     	; 0x77a <__addsf3x+0x4e>
 766:	50 3e       	cpi	r21, 0xE0	; 224
 768:	68 f1       	brcs	.+90     	; 0x7c4 <__addsf3x+0x98>
 76a:	1a 16       	cp	r1, r26
 76c:	f0 40       	sbci	r31, 0x00	; 0
 76e:	a2 2f       	mov	r26, r18
 770:	23 2f       	mov	r18, r19
 772:	34 2f       	mov	r19, r20
 774:	44 27       	eor	r20, r20
 776:	58 5f       	subi	r21, 0xF8	; 248
 778:	f3 cf       	rjmp	.-26     	; 0x760 <__addsf3x+0x34>
 77a:	46 95       	lsr	r20
 77c:	37 95       	ror	r19
 77e:	27 95       	ror	r18
 780:	a7 95       	ror	r26
 782:	f0 40       	sbci	r31, 0x00	; 0
 784:	53 95       	inc	r21
 786:	c9 f7       	brne	.-14     	; 0x77a <__addsf3x+0x4e>
 788:	7e f4       	brtc	.+30     	; 0x7a8 <__addsf3x+0x7c>
 78a:	1f 16       	cp	r1, r31
 78c:	ba 0b       	sbc	r27, r26
 78e:	62 0b       	sbc	r22, r18
 790:	73 0b       	sbc	r23, r19
 792:	84 0b       	sbc	r24, r20
 794:	ba f0       	brmi	.+46     	; 0x7c4 <__addsf3x+0x98>
 796:	91 50       	subi	r25, 0x01	; 1
 798:	a1 f0       	breq	.+40     	; 0x7c2 <__addsf3x+0x96>
 79a:	ff 0f       	add	r31, r31
 79c:	bb 1f       	adc	r27, r27
 79e:	66 1f       	adc	r22, r22
 7a0:	77 1f       	adc	r23, r23
 7a2:	88 1f       	adc	r24, r24
 7a4:	c2 f7       	brpl	.-16     	; 0x796 <__addsf3x+0x6a>
 7a6:	0e c0       	rjmp	.+28     	; 0x7c4 <__addsf3x+0x98>
 7a8:	ba 0f       	add	r27, r26
 7aa:	62 1f       	adc	r22, r18
 7ac:	73 1f       	adc	r23, r19
 7ae:	84 1f       	adc	r24, r20
 7b0:	48 f4       	brcc	.+18     	; 0x7c4 <__addsf3x+0x98>
 7b2:	87 95       	ror	r24
 7b4:	77 95       	ror	r23
 7b6:	67 95       	ror	r22
 7b8:	b7 95       	ror	r27
 7ba:	f7 95       	ror	r31
 7bc:	9e 3f       	cpi	r25, 0xFE	; 254
 7be:	08 f0       	brcs	.+2      	; 0x7c2 <__addsf3x+0x96>
 7c0:	b3 cf       	rjmp	.-154    	; 0x728 <__addsf3+0x1e>
 7c2:	93 95       	inc	r25
 7c4:	88 0f       	add	r24, r24
 7c6:	08 f0       	brcs	.+2      	; 0x7ca <__addsf3x+0x9e>
 7c8:	99 27       	eor	r25, r25
 7ca:	ee 0f       	add	r30, r30
 7cc:	97 95       	ror	r25
 7ce:	87 95       	ror	r24
 7d0:	08 95       	ret

000007d2 <__cmpsf2>:
 7d2:	71 d0       	rcall	.+226    	; 0x8b6 <__fp_cmp>
 7d4:	08 f4       	brcc	.+2      	; 0x7d8 <__cmpsf2+0x6>
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	08 95       	ret

000007da <__fixsfsi>:
 7da:	04 d0       	rcall	.+8      	; 0x7e4 <__fixunssfsi>
 7dc:	68 94       	set
 7de:	b1 11       	cpse	r27, r1
 7e0:	d9 c0       	rjmp	.+434    	; 0x994 <__fp_szero>
 7e2:	08 95       	ret

000007e4 <__fixunssfsi>:
 7e4:	bc d0       	rcall	.+376    	; 0x95e <__fp_splitA>
 7e6:	88 f0       	brcs	.+34     	; 0x80a <__fixunssfsi+0x26>
 7e8:	9f 57       	subi	r25, 0x7F	; 127
 7ea:	90 f0       	brcs	.+36     	; 0x810 <__fixunssfsi+0x2c>
 7ec:	b9 2f       	mov	r27, r25
 7ee:	99 27       	eor	r25, r25
 7f0:	b7 51       	subi	r27, 0x17	; 23
 7f2:	a0 f0       	brcs	.+40     	; 0x81c <__fixunssfsi+0x38>
 7f4:	d1 f0       	breq	.+52     	; 0x82a <__fixunssfsi+0x46>
 7f6:	66 0f       	add	r22, r22
 7f8:	77 1f       	adc	r23, r23
 7fa:	88 1f       	adc	r24, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	1a f0       	brmi	.+6      	; 0x806 <__fixunssfsi+0x22>
 800:	ba 95       	dec	r27
 802:	c9 f7       	brne	.-14     	; 0x7f6 <__fixunssfsi+0x12>
 804:	12 c0       	rjmp	.+36     	; 0x82a <__fixunssfsi+0x46>
 806:	b1 30       	cpi	r27, 0x01	; 1
 808:	81 f0       	breq	.+32     	; 0x82a <__fixunssfsi+0x46>
 80a:	c3 d0       	rcall	.+390    	; 0x992 <__fp_zero>
 80c:	b1 e0       	ldi	r27, 0x01	; 1
 80e:	08 95       	ret
 810:	c0 c0       	rjmp	.+384    	; 0x992 <__fp_zero>
 812:	67 2f       	mov	r22, r23
 814:	78 2f       	mov	r23, r24
 816:	88 27       	eor	r24, r24
 818:	b8 5f       	subi	r27, 0xF8	; 248
 81a:	39 f0       	breq	.+14     	; 0x82a <__fixunssfsi+0x46>
 81c:	b9 3f       	cpi	r27, 0xF9	; 249
 81e:	cc f3       	brlt	.-14     	; 0x812 <__fixunssfsi+0x2e>
 820:	86 95       	lsr	r24
 822:	77 95       	ror	r23
 824:	67 95       	ror	r22
 826:	b3 95       	inc	r27
 828:	d9 f7       	brne	.-10     	; 0x820 <__fixunssfsi+0x3c>
 82a:	3e f4       	brtc	.+14     	; 0x83a <__fixunssfsi+0x56>
 82c:	90 95       	com	r25
 82e:	80 95       	com	r24
 830:	70 95       	com	r23
 832:	61 95       	neg	r22
 834:	7f 4f       	sbci	r23, 0xFF	; 255
 836:	8f 4f       	sbci	r24, 0xFF	; 255
 838:	9f 4f       	sbci	r25, 0xFF	; 255
 83a:	08 95       	ret

0000083c <__floatunsisf>:
 83c:	e8 94       	clt
 83e:	09 c0       	rjmp	.+18     	; 0x852 <__floatsisf+0x12>

00000840 <__floatsisf>:
 840:	97 fb       	bst	r25, 7
 842:	3e f4       	brtc	.+14     	; 0x852 <__floatsisf+0x12>
 844:	90 95       	com	r25
 846:	80 95       	com	r24
 848:	70 95       	com	r23
 84a:	61 95       	neg	r22
 84c:	7f 4f       	sbci	r23, 0xFF	; 255
 84e:	8f 4f       	sbci	r24, 0xFF	; 255
 850:	9f 4f       	sbci	r25, 0xFF	; 255
 852:	99 23       	and	r25, r25
 854:	a9 f0       	breq	.+42     	; 0x880 <__floatsisf+0x40>
 856:	f9 2f       	mov	r31, r25
 858:	96 e9       	ldi	r25, 0x96	; 150
 85a:	bb 27       	eor	r27, r27
 85c:	93 95       	inc	r25
 85e:	f6 95       	lsr	r31
 860:	87 95       	ror	r24
 862:	77 95       	ror	r23
 864:	67 95       	ror	r22
 866:	b7 95       	ror	r27
 868:	f1 11       	cpse	r31, r1
 86a:	f8 cf       	rjmp	.-16     	; 0x85c <__floatsisf+0x1c>
 86c:	fa f4       	brpl	.+62     	; 0x8ac <__floatsisf+0x6c>
 86e:	bb 0f       	add	r27, r27
 870:	11 f4       	brne	.+4      	; 0x876 <__floatsisf+0x36>
 872:	60 ff       	sbrs	r22, 0
 874:	1b c0       	rjmp	.+54     	; 0x8ac <__floatsisf+0x6c>
 876:	6f 5f       	subi	r22, 0xFF	; 255
 878:	7f 4f       	sbci	r23, 0xFF	; 255
 87a:	8f 4f       	sbci	r24, 0xFF	; 255
 87c:	9f 4f       	sbci	r25, 0xFF	; 255
 87e:	16 c0       	rjmp	.+44     	; 0x8ac <__floatsisf+0x6c>
 880:	88 23       	and	r24, r24
 882:	11 f0       	breq	.+4      	; 0x888 <__floatsisf+0x48>
 884:	96 e9       	ldi	r25, 0x96	; 150
 886:	11 c0       	rjmp	.+34     	; 0x8aa <__floatsisf+0x6a>
 888:	77 23       	and	r23, r23
 88a:	21 f0       	breq	.+8      	; 0x894 <__floatsisf+0x54>
 88c:	9e e8       	ldi	r25, 0x8E	; 142
 88e:	87 2f       	mov	r24, r23
 890:	76 2f       	mov	r23, r22
 892:	05 c0       	rjmp	.+10     	; 0x89e <__floatsisf+0x5e>
 894:	66 23       	and	r22, r22
 896:	71 f0       	breq	.+28     	; 0x8b4 <__floatsisf+0x74>
 898:	96 e8       	ldi	r25, 0x86	; 134
 89a:	86 2f       	mov	r24, r22
 89c:	70 e0       	ldi	r23, 0x00	; 0
 89e:	60 e0       	ldi	r22, 0x00	; 0
 8a0:	2a f0       	brmi	.+10     	; 0x8ac <__floatsisf+0x6c>
 8a2:	9a 95       	dec	r25
 8a4:	66 0f       	add	r22, r22
 8a6:	77 1f       	adc	r23, r23
 8a8:	88 1f       	adc	r24, r24
 8aa:	da f7       	brpl	.-10     	; 0x8a2 <__floatsisf+0x62>
 8ac:	88 0f       	add	r24, r24
 8ae:	96 95       	lsr	r25
 8b0:	87 95       	ror	r24
 8b2:	97 f9       	bld	r25, 7
 8b4:	08 95       	ret

000008b6 <__fp_cmp>:
 8b6:	99 0f       	add	r25, r25
 8b8:	00 08       	sbc	r0, r0
 8ba:	55 0f       	add	r21, r21
 8bc:	aa 0b       	sbc	r26, r26
 8be:	e0 e8       	ldi	r30, 0x80	; 128
 8c0:	fe ef       	ldi	r31, 0xFE	; 254
 8c2:	16 16       	cp	r1, r22
 8c4:	17 06       	cpc	r1, r23
 8c6:	e8 07       	cpc	r30, r24
 8c8:	f9 07       	cpc	r31, r25
 8ca:	c0 f0       	brcs	.+48     	; 0x8fc <__fp_cmp+0x46>
 8cc:	12 16       	cp	r1, r18
 8ce:	13 06       	cpc	r1, r19
 8d0:	e4 07       	cpc	r30, r20
 8d2:	f5 07       	cpc	r31, r21
 8d4:	98 f0       	brcs	.+38     	; 0x8fc <__fp_cmp+0x46>
 8d6:	62 1b       	sub	r22, r18
 8d8:	73 0b       	sbc	r23, r19
 8da:	84 0b       	sbc	r24, r20
 8dc:	95 0b       	sbc	r25, r21
 8de:	39 f4       	brne	.+14     	; 0x8ee <__fp_cmp+0x38>
 8e0:	0a 26       	eor	r0, r26
 8e2:	61 f0       	breq	.+24     	; 0x8fc <__fp_cmp+0x46>
 8e4:	23 2b       	or	r18, r19
 8e6:	24 2b       	or	r18, r20
 8e8:	25 2b       	or	r18, r21
 8ea:	21 f4       	brne	.+8      	; 0x8f4 <__fp_cmp+0x3e>
 8ec:	08 95       	ret
 8ee:	0a 26       	eor	r0, r26
 8f0:	09 f4       	brne	.+2      	; 0x8f4 <__fp_cmp+0x3e>
 8f2:	a1 40       	sbci	r26, 0x01	; 1
 8f4:	a6 95       	lsr	r26
 8f6:	8f ef       	ldi	r24, 0xFF	; 255
 8f8:	81 1d       	adc	r24, r1
 8fa:	81 1d       	adc	r24, r1
 8fc:	08 95       	ret

000008fe <__fp_inf>:
 8fe:	97 f9       	bld	r25, 7
 900:	9f 67       	ori	r25, 0x7F	; 127
 902:	80 e8       	ldi	r24, 0x80	; 128
 904:	70 e0       	ldi	r23, 0x00	; 0
 906:	60 e0       	ldi	r22, 0x00	; 0
 908:	08 95       	ret

0000090a <__fp_nan>:
 90a:	9f ef       	ldi	r25, 0xFF	; 255
 90c:	80 ec       	ldi	r24, 0xC0	; 192
 90e:	08 95       	ret

00000910 <__fp_pscA>:
 910:	00 24       	eor	r0, r0
 912:	0a 94       	dec	r0
 914:	16 16       	cp	r1, r22
 916:	17 06       	cpc	r1, r23
 918:	18 06       	cpc	r1, r24
 91a:	09 06       	cpc	r0, r25
 91c:	08 95       	ret

0000091e <__fp_pscB>:
 91e:	00 24       	eor	r0, r0
 920:	0a 94       	dec	r0
 922:	12 16       	cp	r1, r18
 924:	13 06       	cpc	r1, r19
 926:	14 06       	cpc	r1, r20
 928:	05 06       	cpc	r0, r21
 92a:	08 95       	ret

0000092c <__fp_round>:
 92c:	09 2e       	mov	r0, r25
 92e:	03 94       	inc	r0
 930:	00 0c       	add	r0, r0
 932:	11 f4       	brne	.+4      	; 0x938 <__fp_round+0xc>
 934:	88 23       	and	r24, r24
 936:	52 f0       	brmi	.+20     	; 0x94c <__fp_round+0x20>
 938:	bb 0f       	add	r27, r27
 93a:	40 f4       	brcc	.+16     	; 0x94c <__fp_round+0x20>
 93c:	bf 2b       	or	r27, r31
 93e:	11 f4       	brne	.+4      	; 0x944 <__fp_round+0x18>
 940:	60 ff       	sbrs	r22, 0
 942:	04 c0       	rjmp	.+8      	; 0x94c <__fp_round+0x20>
 944:	6f 5f       	subi	r22, 0xFF	; 255
 946:	7f 4f       	sbci	r23, 0xFF	; 255
 948:	8f 4f       	sbci	r24, 0xFF	; 255
 94a:	9f 4f       	sbci	r25, 0xFF	; 255
 94c:	08 95       	ret

0000094e <__fp_split3>:
 94e:	57 fd       	sbrc	r21, 7
 950:	90 58       	subi	r25, 0x80	; 128
 952:	44 0f       	add	r20, r20
 954:	55 1f       	adc	r21, r21
 956:	59 f0       	breq	.+22     	; 0x96e <__fp_splitA+0x10>
 958:	5f 3f       	cpi	r21, 0xFF	; 255
 95a:	71 f0       	breq	.+28     	; 0x978 <__fp_splitA+0x1a>
 95c:	47 95       	ror	r20

0000095e <__fp_splitA>:
 95e:	88 0f       	add	r24, r24
 960:	97 fb       	bst	r25, 7
 962:	99 1f       	adc	r25, r25
 964:	61 f0       	breq	.+24     	; 0x97e <__fp_splitA+0x20>
 966:	9f 3f       	cpi	r25, 0xFF	; 255
 968:	79 f0       	breq	.+30     	; 0x988 <__fp_splitA+0x2a>
 96a:	87 95       	ror	r24
 96c:	08 95       	ret
 96e:	12 16       	cp	r1, r18
 970:	13 06       	cpc	r1, r19
 972:	14 06       	cpc	r1, r20
 974:	55 1f       	adc	r21, r21
 976:	f2 cf       	rjmp	.-28     	; 0x95c <__fp_split3+0xe>
 978:	46 95       	lsr	r20
 97a:	f1 df       	rcall	.-30     	; 0x95e <__fp_splitA>
 97c:	08 c0       	rjmp	.+16     	; 0x98e <__fp_splitA+0x30>
 97e:	16 16       	cp	r1, r22
 980:	17 06       	cpc	r1, r23
 982:	18 06       	cpc	r1, r24
 984:	99 1f       	adc	r25, r25
 986:	f1 cf       	rjmp	.-30     	; 0x96a <__fp_splitA+0xc>
 988:	86 95       	lsr	r24
 98a:	71 05       	cpc	r23, r1
 98c:	61 05       	cpc	r22, r1
 98e:	08 94       	sec
 990:	08 95       	ret

00000992 <__fp_zero>:
 992:	e8 94       	clt

00000994 <__fp_szero>:
 994:	bb 27       	eor	r27, r27
 996:	66 27       	eor	r22, r22
 998:	77 27       	eor	r23, r23
 99a:	cb 01       	movw	r24, r22
 99c:	97 f9       	bld	r25, 7
 99e:	08 95       	ret

000009a0 <__mulsf3>:
 9a0:	0b d0       	rcall	.+22     	; 0x9b8 <__mulsf3x>
 9a2:	c4 cf       	rjmp	.-120    	; 0x92c <__fp_round>
 9a4:	b5 df       	rcall	.-150    	; 0x910 <__fp_pscA>
 9a6:	28 f0       	brcs	.+10     	; 0x9b2 <__mulsf3+0x12>
 9a8:	ba df       	rcall	.-140    	; 0x91e <__fp_pscB>
 9aa:	18 f0       	brcs	.+6      	; 0x9b2 <__mulsf3+0x12>
 9ac:	95 23       	and	r25, r21
 9ae:	09 f0       	breq	.+2      	; 0x9b2 <__mulsf3+0x12>
 9b0:	a6 cf       	rjmp	.-180    	; 0x8fe <__fp_inf>
 9b2:	ab cf       	rjmp	.-170    	; 0x90a <__fp_nan>
 9b4:	11 24       	eor	r1, r1
 9b6:	ee cf       	rjmp	.-36     	; 0x994 <__fp_szero>

000009b8 <__mulsf3x>:
 9b8:	ca df       	rcall	.-108    	; 0x94e <__fp_split3>
 9ba:	a0 f3       	brcs	.-24     	; 0x9a4 <__mulsf3+0x4>

000009bc <__mulsf3_pse>:
 9bc:	95 9f       	mul	r25, r21
 9be:	d1 f3       	breq	.-12     	; 0x9b4 <__mulsf3+0x14>
 9c0:	95 0f       	add	r25, r21
 9c2:	50 e0       	ldi	r21, 0x00	; 0
 9c4:	55 1f       	adc	r21, r21
 9c6:	62 9f       	mul	r22, r18
 9c8:	f0 01       	movw	r30, r0
 9ca:	72 9f       	mul	r23, r18
 9cc:	bb 27       	eor	r27, r27
 9ce:	f0 0d       	add	r31, r0
 9d0:	b1 1d       	adc	r27, r1
 9d2:	63 9f       	mul	r22, r19
 9d4:	aa 27       	eor	r26, r26
 9d6:	f0 0d       	add	r31, r0
 9d8:	b1 1d       	adc	r27, r1
 9da:	aa 1f       	adc	r26, r26
 9dc:	64 9f       	mul	r22, r20
 9de:	66 27       	eor	r22, r22
 9e0:	b0 0d       	add	r27, r0
 9e2:	a1 1d       	adc	r26, r1
 9e4:	66 1f       	adc	r22, r22
 9e6:	82 9f       	mul	r24, r18
 9e8:	22 27       	eor	r18, r18
 9ea:	b0 0d       	add	r27, r0
 9ec:	a1 1d       	adc	r26, r1
 9ee:	62 1f       	adc	r22, r18
 9f0:	73 9f       	mul	r23, r19
 9f2:	b0 0d       	add	r27, r0
 9f4:	a1 1d       	adc	r26, r1
 9f6:	62 1f       	adc	r22, r18
 9f8:	83 9f       	mul	r24, r19
 9fa:	a0 0d       	add	r26, r0
 9fc:	61 1d       	adc	r22, r1
 9fe:	22 1f       	adc	r18, r18
 a00:	74 9f       	mul	r23, r20
 a02:	33 27       	eor	r19, r19
 a04:	a0 0d       	add	r26, r0
 a06:	61 1d       	adc	r22, r1
 a08:	23 1f       	adc	r18, r19
 a0a:	84 9f       	mul	r24, r20
 a0c:	60 0d       	add	r22, r0
 a0e:	21 1d       	adc	r18, r1
 a10:	82 2f       	mov	r24, r18
 a12:	76 2f       	mov	r23, r22
 a14:	6a 2f       	mov	r22, r26
 a16:	11 24       	eor	r1, r1
 a18:	9f 57       	subi	r25, 0x7F	; 127
 a1a:	50 40       	sbci	r21, 0x00	; 0
 a1c:	8a f0       	brmi	.+34     	; 0xa40 <__mulsf3_pse+0x84>
 a1e:	e1 f0       	breq	.+56     	; 0xa58 <__mulsf3_pse+0x9c>
 a20:	88 23       	and	r24, r24
 a22:	4a f0       	brmi	.+18     	; 0xa36 <__mulsf3_pse+0x7a>
 a24:	ee 0f       	add	r30, r30
 a26:	ff 1f       	adc	r31, r31
 a28:	bb 1f       	adc	r27, r27
 a2a:	66 1f       	adc	r22, r22
 a2c:	77 1f       	adc	r23, r23
 a2e:	88 1f       	adc	r24, r24
 a30:	91 50       	subi	r25, 0x01	; 1
 a32:	50 40       	sbci	r21, 0x00	; 0
 a34:	a9 f7       	brne	.-22     	; 0xa20 <__mulsf3_pse+0x64>
 a36:	9e 3f       	cpi	r25, 0xFE	; 254
 a38:	51 05       	cpc	r21, r1
 a3a:	70 f0       	brcs	.+28     	; 0xa58 <__mulsf3_pse+0x9c>
 a3c:	60 cf       	rjmp	.-320    	; 0x8fe <__fp_inf>
 a3e:	aa cf       	rjmp	.-172    	; 0x994 <__fp_szero>
 a40:	5f 3f       	cpi	r21, 0xFF	; 255
 a42:	ec f3       	brlt	.-6      	; 0xa3e <__mulsf3_pse+0x82>
 a44:	98 3e       	cpi	r25, 0xE8	; 232
 a46:	dc f3       	brlt	.-10     	; 0xa3e <__mulsf3_pse+0x82>
 a48:	86 95       	lsr	r24
 a4a:	77 95       	ror	r23
 a4c:	67 95       	ror	r22
 a4e:	b7 95       	ror	r27
 a50:	f7 95       	ror	r31
 a52:	e7 95       	ror	r30
 a54:	9f 5f       	subi	r25, 0xFF	; 255
 a56:	c1 f7       	brne	.-16     	; 0xa48 <__mulsf3_pse+0x8c>
 a58:	fe 2b       	or	r31, r30
 a5a:	88 0f       	add	r24, r24
 a5c:	91 1d       	adc	r25, r1
 a5e:	96 95       	lsr	r25
 a60:	87 95       	ror	r24
 a62:	97 f9       	bld	r25, 7
 a64:	08 95       	ret

00000a66 <_exit>:
 a66:	f8 94       	cli

00000a68 <__stop_program>:
 a68:	ff cf       	rjmp	.-2      	; 0xa68 <__stop_program>
