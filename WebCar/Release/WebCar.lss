
WebCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  000017c6  0000183a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c8  0080018a  00001850  000018c4  2**0
                  ALLOC
  3 .stab         00007aa0  00000000  00000000  000018c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000dc83  00000000  00000000  00009364  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_7>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 c0 04 	jmp	0x980	; 0x980 <__vector_18>
      4c:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__vector_19>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	71 06       	cpc	r7, r17

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	11 e0       	ldi	r17, 0x01	; 1
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	e6 ec       	ldi	r30, 0xC6	; 198
      d8:	f7 e1       	ldi	r31, 0x17	; 23
      da:	02 c0       	rjmp	.+4      	; 0xe0 <.do_copy_data_start>

000000dc <.do_copy_data_loop>:
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0

000000e0 <.do_copy_data_start>:
      e0:	aa 38       	cpi	r26, 0x8A	; 138
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <.do_copy_data_loop>

000000e6 <__do_clear_bss>:
      e6:	12 e0       	ldi	r17, 0x02	; 2
      e8:	aa e8       	ldi	r26, 0x8A	; 138
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a2 35       	cpi	r26, 0x52	; 82
      f2:	b1 07       	cpc	r27, r17
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c4 ec       	ldi	r28, 0xC4	; 196
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <.do_global_ctors_start>

000000fe <.do_global_ctors_loop>:
      fe:	22 97       	sbiw	r28, 0x02	; 2
     100:	fe 01       	movw	r30, r28
     102:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__tablejump__>

00000106 <.do_global_ctors_start>:
     106:	c2 3c       	cpi	r28, 0xC2	; 194
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <.do_global_ctors_loop>
     10c:	0e 94 1f 09 	call	0x123e	; 0x123e <main>
     110:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000118 <_ZN14FreqCountClass5beginEj>:
static volatile uint8_t count_ready;
static uint16_t gate_length;
static uint16_t gate_index;


void FreqCountClass::begin(uint16_t msec)
     118:	9c 01       	movw	r18, r24
{
	if (msec < 10) return;
     11a:	8a 30       	cpi	r24, 0x0A	; 10
     11c:	91 05       	cpc	r25, r1
     11e:	08 f4       	brcc	.+2      	; 0x122 <_ZN14FreqCountClass5beginEj+0xa>
     120:	75 c0       	rjmp	.+234    	; 0x20c <L_104_loop+0xc>
	gate_index = 0;
     122:	10 92 8d 01 	sts	0x018D, r1
     126:	10 92 8c 01 	sts	0x018C, r1
	count_msw = 0;
     12a:	10 92 8b 01 	sts	0x018B, r1
     12e:	10 92 8a 01 	sts	0x018A, r1
	count_prev = 0;
     132:	10 92 90 01 	sts	0x0190, r1
     136:	10 92 91 01 	sts	0x0191, r1
     13a:	10 92 92 01 	sts	0x0192, r1
     13e:	10 92 93 01 	sts	0x0193, r1
	count_ready = 0;
     142:	10 92 98 01 	sts	0x0198, r1
	gate_length = timer_init(msec);
	uint8_t status = SREG;
	cli();
	timer_start();
	timer_isr_latency_delay();
	counter_start();
     146:	80 91 80 00 	lds	r24, 0x0080
     14a:	80 93 9b 01 	sts	0x019B, r24
	SREG = status;
     14e:	80 91 81 00 	lds	r24, 0x0081
     152:	80 93 9c 01 	sts	0x019C, r24
}
     156:	10 92 81 00 	sts	0x0081, r1

     15a:	10 92 80 00 	sts	0x0080, r1
uint8_t FreqCountClass::available(void)
     15e:	10 92 85 00 	sts	0x0085, r1
     162:	10 92 84 00 	sts	0x0084, r1
{
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	86 bb       	out	0x16, r24	; 22
	return count_ready;
     16a:	10 92 6f 00 	sts	0x006F, r1
     16e:	80 91 b0 00 	lds	r24, 0x00B0
     172:	80 93 99 01 	sts	0x0199, r24
     176:	80 91 b1 00 	lds	r24, 0x00B1
     17a:	80 93 9a 01 	sts	0x019A, r24
     17e:	10 92 b1 00 	sts	0x00B1, r1
     182:	82 e0       	ldi	r24, 0x02	; 2
     184:	80 93 b0 00 	sts	0x00B0, r24
     188:	c9 01       	movw	r24, r18
     18a:	87 70       	andi	r24, 0x07	; 7
     18c:	90 70       	andi	r25, 0x00	; 0
     18e:	89 2b       	or	r24, r25
     190:	39 f4       	brne	.+14     	; 0x1a0 <_ZN14FreqCountClass5beginEj+0x88>
     192:	43 e0       	ldi	r20, 0x03	; 3
     194:	36 95       	lsr	r19
     196:	27 95       	ror	r18
     198:	4a 95       	dec	r20
     19a:	e1 f7       	brne	.-8      	; 0x194 <_ZN14FreqCountClass5beginEj+0x7c>
     19c:	89 ef       	ldi	r24, 0xF9	; 249
     19e:	0a c0       	rjmp	.+20     	; 0x1b4 <_ZN14FreqCountClass5beginEj+0x9c>
     1a0:	c9 01       	movw	r24, r18
     1a2:	83 70       	andi	r24, 0x03	; 3
     1a4:	90 70       	andi	r25, 0x00	; 0
     1a6:	89 2b       	or	r24, r25
     1a8:	49 f4       	brne	.+18     	; 0x1bc <_ZN14FreqCountClass5beginEj+0xa4>
     1aa:	36 95       	lsr	r19
     1ac:	27 95       	ror	r18
     1ae:	36 95       	lsr	r19
     1b0:	27 95       	ror	r18
     1b2:	8c e7       	ldi	r24, 0x7C	; 124
     1b4:	80 93 b3 00 	sts	0x00B3, r24
     1b8:	86 e0       	ldi	r24, 0x06	; 6
     1ba:	0d c0       	rjmp	.+26     	; 0x1d6 <_ZN14FreqCountClass5beginEj+0xbe>
     1bc:	20 fd       	sbrc	r18, 0
     1be:	07 c0       	rjmp	.+14     	; 0x1ce <_ZN14FreqCountClass5beginEj+0xb6>
     1c0:	36 95       	lsr	r19
     1c2:	27 95       	ror	r18
     1c4:	8c e7       	ldi	r24, 0x7C	; 124
     1c6:	80 93 b3 00 	sts	0x00B3, r24
     1ca:	85 e0       	ldi	r24, 0x05	; 5
     1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <_ZN14FreqCountClass5beginEj+0xbe>
     1ce:	8c e7       	ldi	r24, 0x7C	; 124
     1d0:	80 93 b3 00 	sts	0x00B3, r24
     1d4:	84 e0       	ldi	r24, 0x04	; 4
     1d6:	80 93 9d 01 	sts	0x019D, r24
     1da:	82 e0       	ldi	r24, 0x02	; 2
     1dc:	87 bb       	out	0x17, r24	; 23
     1de:	10 92 b2 00 	sts	0x00B2, r1
	gate_index = 0;
	count_msw = 0;
	count_prev = 0;
	count_ready = 0;
	counter_init();
	gate_length = timer_init(msec);
     1e2:	30 93 8f 01 	sts	0x018F, r19
     1e6:	20 93 8e 01 	sts	0x018E, r18
	uint8_t status = SREG;
     1ea:	2f b7       	in	r18, 0x3f	; 63
	cli();
     1ec:	f8 94       	cli
     1ee:	92 e0       	ldi	r25, 0x02	; 2
     1f0:	93 bd       	out	0x23, r25	; 35
     1f2:	80 91 9d 01 	lds	r24, 0x019D
     1f6:	80 93 b1 00 	sts	0x00B1, r24
     1fa:	90 93 70 00 	sts	0x0070, r25
     1fe:	8b e0       	ldi	r24, 0x0B	; 11

00000200 <L_104_loop>:
     200:	81 50       	subi	r24, 0x01	; 1
     202:	f1 f7       	brne	.-4      	; 0x200 <L_104_loop>
	return count_ready;
}

uint32_t FreqCountClass::read(void)
{
	uint32_t count;
     204:	87 e0       	ldi	r24, 0x07	; 7
     206:	80 93 81 00 	sts	0x0081, r24
	uint8_t status = SREG;
	cli();
	timer_start();
	timer_isr_latency_delay();
	counter_start();
	SREG = status;
     20a:	2f bf       	out	0x3f, r18	; 63
     20c:	08 95       	ret

0000020e <_ZN14FreqCountClass9availableEv>:
}

uint8_t FreqCountClass::available(void)
{
	return count_ready;
     20e:	80 91 98 01 	lds	r24, 0x0198
}
     212:	08 95       	ret

00000214 <_ZN14FreqCountClass4readEv>:
uint32_t FreqCountClass::read(void)
{
	uint32_t count;
	uint8_t status;

	status = SREG;
     214:	8f b7       	in	r24, 0x3f	; 63
	cli();
     216:	f8 94       	cli
	count = count_output;
     218:	20 91 94 01 	lds	r18, 0x0194
     21c:	30 91 95 01 	lds	r19, 0x0195
     220:	40 91 96 01 	lds	r20, 0x0196
     224:	50 91 97 01 	lds	r21, 0x0197
	count_ready = 0;
     228:	10 92 98 01 	sts	0x0198, r1
	SREG = status;
     22c:	8f bf       	out	0x3f, r24	; 63
	return count;
}
     22e:	b9 01       	movw	r22, r18
     230:	ca 01       	movw	r24, r20
     232:	08 95       	ret

00000234 <__vector_7>:
	timer_shutdown();
	counter_shutdown();
}


ISR(TIMER_ISR_VECTOR)
     234:	1f 92       	push	r1
     236:	0f 92       	push	r0
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	0f 92       	push	r0
     23c:	11 24       	eor	r1, r1
     23e:	ef 92       	push	r14
     240:	ff 92       	push	r15
     242:	0f 93       	push	r16
     244:	1f 93       	push	r17
     246:	2f 93       	push	r18
     248:	3f 93       	push	r19
     24a:	4f 93       	push	r20
     24c:	5f 93       	push	r21
     24e:	6f 93       	push	r22
     250:	7f 93       	push	r23
     252:	8f 93       	push	r24
     254:	9f 93       	push	r25
     256:	af 93       	push	r26
     258:	bf 93       	push	r27
	SREG = status;
	return count;
}

void FreqCountClass::end(void)
{
     25a:	20 91 84 00 	lds	r18, 0x0084
     25e:	30 91 85 00 	lds	r19, 0x0085
	uint16_t count_lsw;
	uint32_t count;
	uint16_t index, length;

	count_lsw = counter_read();
	if (counter_overflow()) {
     262:	b0 9b       	sbis	0x16, 0	; 22
     264:	0b c0       	rjmp	.+22     	; 0x27c <__vector_7+0x48>

ISR(TIMER_ISR_VECTOR)
{
	uint16_t count_lsw;
	uint32_t count;
	uint16_t index, length;
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	86 bb       	out	0x16, r24	; 22

	count_lsw = counter_read();
	if (counter_overflow()) {
		counter_overflow_reset();
		count_msw++;
     26a:	80 91 8a 01 	lds	r24, 0x018A
     26e:	90 91 8b 01 	lds	r25, 0x018B
     272:	01 96       	adiw	r24, 0x01	; 1
     274:	90 93 8b 01 	sts	0x018B, r25
     278:	80 93 8a 01 	sts	0x018A, r24
	}
	index = gate_index + 1;
     27c:	60 91 8c 01 	lds	r22, 0x018C
     280:	70 91 8d 01 	lds	r23, 0x018D
     284:	6f 5f       	subi	r22, 0xFF	; 255
     286:	7f 4f       	sbci	r23, 0xFF	; 255
	length = gate_length;
	if (index >= length) {
     288:	80 91 8e 01 	lds	r24, 0x018E
     28c:	90 91 8f 01 	lds	r25, 0x018F
     290:	68 17       	cp	r22, r24
     292:	79 07       	cpc	r23, r25
     294:	a8 f1       	brcs	.+106    	; 0x300 <__vector_7+0xcc>
		gate_index = 0;
     296:	10 92 8d 01 	sts	0x018D, r1
     29a:	10 92 8c 01 	sts	0x018C, r1
		count = ((uint32_t)count_msw << 16) + count_lsw;
     29e:	80 91 8a 01 	lds	r24, 0x018A
     2a2:	90 91 8b 01 	lds	r25, 0x018B
     2a6:	a0 e0       	ldi	r26, 0x00	; 0
     2a8:	b0 e0       	ldi	r27, 0x00	; 0
     2aa:	dc 01       	movw	r26, r24
     2ac:	99 27       	eor	r25, r25
     2ae:	88 27       	eor	r24, r24
     2b0:	40 e0       	ldi	r20, 0x00	; 0
     2b2:	50 e0       	ldi	r21, 0x00	; 0
     2b4:	82 0f       	add	r24, r18
     2b6:	93 1f       	adc	r25, r19
     2b8:	a4 1f       	adc	r26, r20
     2ba:	b5 1f       	adc	r27, r21
		count_output = count - count_prev;
     2bc:	20 91 90 01 	lds	r18, 0x0190
     2c0:	30 91 91 01 	lds	r19, 0x0191
     2c4:	40 91 92 01 	lds	r20, 0x0192
     2c8:	50 91 93 01 	lds	r21, 0x0193
     2cc:	7c 01       	movw	r14, r24
     2ce:	8d 01       	movw	r16, r26
     2d0:	e2 1a       	sub	r14, r18
     2d2:	f3 0a       	sbc	r15, r19
     2d4:	04 0b       	sbc	r16, r20
     2d6:	15 0b       	sbc	r17, r21
     2d8:	e0 92 94 01 	sts	0x0194, r14
     2dc:	f0 92 95 01 	sts	0x0195, r15
     2e0:	00 93 96 01 	sts	0x0196, r16
     2e4:	10 93 97 01 	sts	0x0197, r17
		count_prev = count;
     2e8:	80 93 90 01 	sts	0x0190, r24
     2ec:	90 93 91 01 	sts	0x0191, r25
     2f0:	a0 93 92 01 	sts	0x0192, r26
     2f4:	b0 93 93 01 	sts	0x0193, r27
		count_ready = 1;
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	80 93 98 01 	sts	0x0198, r24
     2fe:	04 c0       	rjmp	.+8      	; 0x308 <__vector_7+0xd4>
		restore_other_interrupts();
	} else {
		if (index == length - 1) disable_other_interrupts();
		gate_index = index;
     300:	70 93 8d 01 	sts	0x018D, r23
     304:	60 93 8c 01 	sts	0x018C, r22
	}
}
     308:	bf 91       	pop	r27
     30a:	af 91       	pop	r26
     30c:	9f 91       	pop	r25
     30e:	8f 91       	pop	r24
     310:	7f 91       	pop	r23
     312:	6f 91       	pop	r22
     314:	5f 91       	pop	r21
     316:	4f 91       	pop	r20
     318:	3f 91       	pop	r19
     31a:	2f 91       	pop	r18
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	ff 90       	pop	r15
     322:	ef 90       	pop	r14
     324:	0f 90       	pop	r0
     326:	0f be       	out	0x3f, r0	; 63
     328:	0f 90       	pop	r0
     32a:	1f 90       	pop	r1
     32c:	18 95       	reti

0000032e <_Z6setPWMbf>:
void stopPWM() {
	TCCR0B = 0;
	TIMSK0 = 0;
}

void setPWM( bool r2l, float val ) {
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	7a 01       	movw	r14, r20
     338:	8b 01       	movw	r16, r22

	if (r2l) {
     33a:	88 23       	and	r24, r24
     33c:	29 f1       	breq	.+74     	; 0x388 <_Z6setPWMbf+0x5a>
		if ( val >= RL_MAX ) {
     33e:	cb 01       	movw	r24, r22
     340:	ba 01       	movw	r22, r20
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	4f e7       	ldi	r20, 0x7F	; 127
     348:	53 e4       	ldi	r21, 0x43	; 67
     34a:	0e 94 08 0b 	call	0x1610	; 0x1610 <__gesf2>
     34e:	88 23       	and	r24, r24
     350:	2c f0       	brlt	.+10     	; 0x35c <_Z6setPWMbf+0x2e>
			RL_OFF = false;
     352:	10 92 78 01 	sts	0x0178, r1
			OCR0A = RL_MAX;
     356:	8f ef       	ldi	r24, 0xFF	; 255
     358:	87 bd       	out	0x27, r24	; 39
     35a:	3e c0       	rjmp	.+124    	; 0x3d8 <_Z6setPWMbf+0xaa>
		} else if ( val <= RL_MIN ) {
     35c:	c8 01       	movw	r24, r16
     35e:	b7 01       	movw	r22, r14
     360:	20 e0       	ldi	r18, 0x00	; 0
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	48 ec       	ldi	r20, 0xC8	; 200
     366:	52 e4       	ldi	r21, 0x42	; 66
     368:	0e 94 b9 09 	call	0x1372	; 0x1372 <__cmpsf2>
     36c:	18 16       	cp	r1, r24
     36e:	24 f0       	brlt	.+8      	; 0x378 <_Z6setPWMbf+0x4a>
			RL_OFF = true;
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	80 93 78 01 	sts	0x0178, r24
     376:	24 c0       	rjmp	.+72     	; 0x3c0 <_Z6setPWMbf+0x92>
			digitalWrite( PIN_PWM_RL, LOW );
		} else {
			RL_OFF = false;
     378:	10 92 78 01 	sts	0x0178, r1
			OCR0A = val;
     37c:	c8 01       	movw	r24, r16
     37e:	b7 01       	movw	r22, r14
     380:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__fixunssfsi>
     384:	67 bd       	out	0x27, r22	; 39
     386:	28 c0       	rjmp	.+80     	; 0x3d8 <_Z6setPWMbf+0xaa>
		}
	}
	else {
		if ( val >= FB_MAX ) {
     388:	cb 01       	movw	r24, r22
     38a:	ba 01       	movw	r22, r20
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	4c e8       	ldi	r20, 0x8C	; 140
     392:	52 e4       	ldi	r21, 0x42	; 66
     394:	0e 94 08 0b 	call	0x1610	; 0x1610 <__gesf2>
     398:	88 23       	and	r24, r24
     39a:	2c f0       	brlt	.+10     	; 0x3a6 <_Z6setPWMbf+0x78>
			FB_OFF = false;
     39c:	10 92 79 01 	sts	0x0179, r1
			OCR0B = FB_MAX;
     3a0:	86 e4       	ldi	r24, 0x46	; 70
     3a2:	88 bd       	out	0x28, r24	; 40
     3a4:	19 c0       	rjmp	.+50     	; 0x3d8 <_Z6setPWMbf+0xaa>
		} else if ( val <= FB_MIN ) {
     3a6:	c8 01       	movw	r24, r16
     3a8:	b7 01       	movw	r22, r14
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	48 ec       	ldi	r20, 0xC8	; 200
     3b0:	51 e4       	ldi	r21, 0x41	; 65
     3b2:	0e 94 b9 09 	call	0x1372	; 0x1372 <__cmpsf2>
     3b6:	18 16       	cp	r1, r24
     3b8:	44 f0       	brlt	.+16     	; 0x3ca <_Z6setPWMbf+0x9c>
			FB_OFF = true;
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	80 93 79 01 	sts	0x0179, r24
			digitalWrite( PIN_PWM_RL, LOW );
     3c0:	87 e0       	ldi	r24, 0x07	; 7
     3c2:	60 e0       	ldi	r22, 0x00	; 0
     3c4:	0e 94 32 09 	call	0x1264	; 0x1264 <digitalWrite>
     3c8:	07 c0       	rjmp	.+14     	; 0x3d8 <_Z6setPWMbf+0xaa>
		} else {
			FB_OFF = false;
     3ca:	10 92 79 01 	sts	0x0179, r1
			OCR0B = val;
     3ce:	c8 01       	movw	r24, r16
     3d0:	b7 01       	movw	r22, r14
     3d2:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__fixunssfsi>
     3d6:	68 bd       	out	0x28, r22	; 40
		}
	}
	TCNT0 = 0;
     3d8:	16 bc       	out	0x26, r1	; 38
}
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	ff 90       	pop	r15
     3e0:	ef 90       	pop	r14
     3e2:	08 95       	ret

000003e4 <_Z4stopv>:
	DIS_RIGHT;
	DIS_LEFT;
	setPWM( true, 0 );
}
void stop() {
	DIS_FWD;
     3e4:	8f e0       	ldi	r24, 0x0F	; 15
     3e6:	61 e0       	ldi	r22, 0x01	; 1
     3e8:	0e 94 32 09 	call	0x1264	; 0x1264 <digitalWrite>
	DIS_BWD;
     3ec:	8e e0       	ldi	r24, 0x0E	; 14
     3ee:	61 e0       	ldi	r22, 0x01	; 1
     3f0:	0e 94 32 09 	call	0x1264	; 0x1264 <digitalWrite>
	setPWM( false, 0 );
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	40 e0       	ldi	r20, 0x00	; 0
     3f8:	50 e0       	ldi	r21, 0x00	; 0
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	0e 94 97 01 	call	0x32e	; 0x32e <_Z6setPWMbf>
}
     402:	08 95       	ret

00000404 <_Z6middlev>:
void enableBwd() {
	DIS_FWD;
	EN_BWD;
}
void middle() {
	DIS_RIGHT;
     404:	81 e1       	ldi	r24, 0x11	; 17
     406:	61 e0       	ldi	r22, 0x01	; 1
     408:	0e 94 32 09 	call	0x1264	; 0x1264 <digitalWrite>
	DIS_LEFT;
     40c:	80 e1       	ldi	r24, 0x10	; 16
     40e:	61 e0       	ldi	r22, 0x01	; 1
     410:	0e 94 32 09 	call	0x1264	; 0x1264 <digitalWrite>
	setPWM( true, 0 );
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	40 e0       	ldi	r20, 0x00	; 0
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	0e 94 97 01 	call	0x32e	; 0x32e <_Z6setPWMbf>
}
     422:	08 95       	ret

00000424 <_Z9enableBwdv>:
void enableFwd() {
	DIS_BWD;
	EN_FWD;
}
void enableBwd() {
	DIS_FWD;
     424:	8f e0       	ldi	r24, 0x0F	; 15
     426:	61 e0       	ldi	r22, 0x01	; 1
     428:	0e 94 32 09 	call	0x1264	; 0x1264 <digitalWrite>
	EN_BWD;
     42c:	8e e0       	ldi	r24, 0x0E	; 14
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	0e 94 32 09 	call	0x1264	; 0x1264 <digitalWrite>
}
     434:	08 95       	ret

00000436 <_Z9enableFwdv>:
void enableLeft() {
	DIS_RIGHT;
	EN_LEFT;
}
void enableFwd() {
	DIS_BWD;
     436:	8e e0       	ldi	r24, 0x0E	; 14
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	0e 94 32 09 	call	0x1264	; 0x1264 <digitalWrite>
	EN_FWD;
     43e:	8f e0       	ldi	r24, 0x0F	; 15
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	0e 94 32 09 	call	0x1264	; 0x1264 <digitalWrite>
}
     446:	08 95       	ret

00000448 <_Z10enableLeftv>:
void enableRight() {
	DIS_LEFT;
	EN_RIGHT;
}
void enableLeft() {
	DIS_RIGHT;
     448:	81 e1       	ldi	r24, 0x11	; 17
     44a:	61 e0       	ldi	r22, 0x01	; 1
     44c:	0e 94 32 09 	call	0x1264	; 0x1264 <digitalWrite>
	EN_LEFT;
     450:	80 e1       	ldi	r24, 0x10	; 16
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	0e 94 32 09 	call	0x1264	; 0x1264 <digitalWrite>
}
     458:	08 95       	ret

0000045a <_Z11enableRightv>:
	setPWM( false, val );
#endif
}

void enableRight() {
	DIS_LEFT;
     45a:	80 e1       	ldi	r24, 0x10	; 16
     45c:	61 e0       	ldi	r22, 0x01	; 1
     45e:	0e 94 32 09 	call	0x1264	; 0x1264 <digitalWrite>
	EN_RIGHT;
     462:	81 e1       	ldi	r24, 0x11	; 17
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	0e 94 32 09 	call	0x1264	; 0x1264 <digitalWrite>
}
     46a:	08 95       	ret

0000046c <_Z6moveFBbi>:
#ifndef DEBUG
	setPWM( true, val );
#endif
}

void moveFB( bool forward, int val ) {
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	eb 01       	movw	r28, r22
	if ( val > FB_MAX )
     472:	67 34       	cpi	r22, 0x47	; 71
     474:	71 05       	cpc	r23, r1
     476:	34 f4       	brge	.+12     	; 0x484 <_Z6moveFBbi+0x18>
		val = FB_MAX;
	else if ( val < (FB_MIN/2) ){
     478:	6c 30       	cpi	r22, 0x0C	; 12
     47a:	71 05       	cpc	r23, r1
     47c:	2c f4       	brge	.+10     	; 0x488 <_Z6moveFBbi+0x1c>
		val = 0;
		stop();
     47e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_Z4stopv>
     482:	16 c0       	rjmp	.+44     	; 0x4b0 <_Z6moveFBbi+0x44>
		return;
     484:	c6 e4       	ldi	r28, 0x46	; 70
     486:	d0 e0       	ldi	r29, 0x00	; 0
	}

	if (forward)
     488:	88 23       	and	r24, r24
     48a:	19 f0       	breq	.+6      	; 0x492 <_Z6moveFBbi+0x26>
		enableFwd();
     48c:	0e 94 1b 02 	call	0x436	; 0x436 <_Z9enableFwdv>
     490:	02 c0       	rjmp	.+4      	; 0x496 <_Z6moveFBbi+0x2a>
	else
		enableBwd();
     492:	0e 94 12 02 	call	0x424	; 0x424 <_Z9enableBwdv>

#ifdef DEBUG
	Serial.print("f2b Val: ");
     496:	80 e3       	ldi	r24, 0x30	; 48
     498:	92 e0       	ldi	r25, 0x02	; 2
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	71 e0       	ldi	r23, 0x01	; 1
     49e:	0e 94 12 08 	call	0x1024	; 0x1024 <_ZN5Print5printEPKc>
	Serial.println(val);
     4a2:	80 e3       	ldi	r24, 0x30	; 48
     4a4:	92 e0       	ldi	r25, 0x02	; 2
     4a6:	be 01       	movw	r22, r28
     4a8:	4a e0       	ldi	r20, 0x0A	; 10
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <_ZN5Print7printlnEii>
#endif
#ifndef DEBUG
	setPWM( false, val );
#endif
}
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	08 95       	ret

000004b6 <_Z7steerRLbi>:
#endif
		moveFB(true, FB_BOUNDARY(val));
	}
}

void steerRL( bool right, int val ) {
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	eb 01       	movw	r28, r22

	if ( val > RL_MAX )
     4bc:	6f 3f       	cpi	r22, 0xFF	; 255
     4be:	71 05       	cpc	r23, r1
     4c0:	09 f0       	breq	.+2      	; 0x4c4 <_Z7steerRLbi+0xe>
     4c2:	34 f4       	brge	.+12     	; 0x4d0 <_Z7steerRLbi+0x1a>
		val = RL_MAX;
	else if ( val < RL_MIN ) {
     4c4:	64 36       	cpi	r22, 0x64	; 100
     4c6:	71 05       	cpc	r23, r1
     4c8:	2c f4       	brge	.+10     	; 0x4d4 <_Z7steerRLbi+0x1e>
		val = 0;
		middle();
     4ca:	0e 94 02 02 	call	0x404	; 0x404 <_Z6middlev>
     4ce:	16 c0       	rjmp	.+44     	; 0x4fc <_Z7steerRLbi+0x46>
		return;
     4d0:	cf ef       	ldi	r28, 0xFF	; 255
     4d2:	d0 e0       	ldi	r29, 0x00	; 0
	}

	if (right)
     4d4:	88 23       	and	r24, r24
     4d6:	19 f0       	breq	.+6      	; 0x4de <_Z7steerRLbi+0x28>
		enableRight();
     4d8:	0e 94 2d 02 	call	0x45a	; 0x45a <_Z11enableRightv>
     4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <_Z7steerRLbi+0x2c>
	else
		enableLeft();
     4de:	0e 94 24 02 	call	0x448	; 0x448 <_Z10enableLeftv>

#ifdef DEBUG
	Serial.print("r2l Val: ");
     4e2:	80 e3       	ldi	r24, 0x30	; 48
     4e4:	92 e0       	ldi	r25, 0x02	; 2
     4e6:	6a e0       	ldi	r22, 0x0A	; 10
     4e8:	71 e0       	ldi	r23, 0x01	; 1
     4ea:	0e 94 12 08 	call	0x1024	; 0x1024 <_ZN5Print5printEPKc>
	Serial.println(val);
     4ee:	80 e3       	ldi	r24, 0x30	; 48
     4f0:	92 e0       	ldi	r25, 0x02	; 2
     4f2:	be 01       	movw	r22, r28
     4f4:	4a e0       	ldi	r20, 0x0A	; 10
     4f6:	50 e0       	ldi	r21, 0x00	; 0
     4f8:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <_ZN5Print7printlnEii>
#endif

#ifndef DEBUG
	setPWM( true, val );
#endif
}
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	08 95       	ret

00000502 <_Z4movef>:
#endif
		steerRL(true, RL_BOUNDARY(val));
	}
}

void move( float val ) {
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	7b 01       	movw	r14, r22
     50c:	8c 01       	movw	r16, r24
#ifdef DEBUG
	Serial.print("moveVal: ");
     50e:	80 e3       	ldi	r24, 0x30	; 48
     510:	92 e0       	ldi	r25, 0x02	; 2
     512:	64 e1       	ldi	r22, 0x14	; 20
     514:	71 e0       	ldi	r23, 0x01	; 1
     516:	0e 94 12 08 	call	0x1024	; 0x1024 <_ZN5Print5printEPKc>
	Serial.println(val);
     51a:	80 e3       	ldi	r24, 0x30	; 48
     51c:	92 e0       	ldi	r25, 0x02	; 2
     51e:	b8 01       	movw	r22, r16
     520:	a7 01       	movw	r20, r14
     522:	22 e0       	ldi	r18, 0x02	; 2
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_ZN5Print7printlnEdi>
#endif
	if ( val==0 ) {
     52a:	c8 01       	movw	r24, r16
     52c:	b7 01       	movw	r22, r14
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	0e 94 b9 09 	call	0x1372	; 0x1372 <__cmpsf2>
     53a:	88 23       	and	r24, r24
     53c:	21 f4       	brne	.+8      	; 0x546 <_Z4movef+0x44>
		moveFB(true,0);
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	60 e0       	ldi	r22, 0x00	; 0
     542:	70 e0       	ldi	r23, 0x00	; 0
     544:	56 c0       	rjmp	.+172    	; 0x5f2 <_Z4movef+0xf0>
	} else if ( val<0 ) {
     546:	c8 01       	movw	r24, r16
     548:	b7 01       	movw	r22, r14
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	50 e0       	ldi	r21, 0x00	; 0
     552:	0e 94 b9 09 	call	0x1372	; 0x1372 <__cmpsf2>
     556:	88 23       	and	r24, r24
     558:	34 f5       	brge	.+76     	; 0x5a6 <_Z4movef+0xa4>
#ifdef DEBUG
	Serial.print("move: ");
     55a:	80 e3       	ldi	r24, 0x30	; 48
     55c:	92 e0       	ldi	r25, 0x02	; 2
     55e:	6e e1       	ldi	r22, 0x1E	; 30
     560:	71 e0       	ldi	r23, 0x01	; 1
     562:	0e 94 12 08 	call	0x1024	; 0x1024 <_ZN5Print5printEPKc>
	Serial.println(FB_BOUNDARY(-1*val));
     566:	c8 01       	movw	r24, r16
     568:	b7 01       	movw	r22, r14
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	44 e3       	ldi	r20, 0x34	; 52
     570:	52 ec       	ldi	r21, 0xC2	; 194
     572:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__mulsf3>
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	48 ec       	ldi	r20, 0xC8	; 200
     57c:	51 e4       	ldi	r21, 0x41	; 65
     57e:	0e 94 55 09 	call	0x12aa	; 0x12aa <__addsf3>
     582:	7b 01       	movw	r14, r22
     584:	8c 01       	movw	r16, r24
     586:	80 e3       	ldi	r24, 0x30	; 48
     588:	92 e0       	ldi	r25, 0x02	; 2
     58a:	b8 01       	movw	r22, r16
     58c:	a7 01       	movw	r20, r14
     58e:	22 e0       	ldi	r18, 0x02	; 2
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_ZN5Print7printlnEdi>
#endif
		moveFB(false, FB_BOUNDARY(-1*val));
     596:	c8 01       	movw	r24, r16
     598:	b7 01       	movw	r22, r14
     59a:	0e 94 25 0a 	call	0x144a	; 0x144a <__fixsfsi>
     59e:	9b 01       	movw	r18, r22
     5a0:	ac 01       	movw	r20, r24
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	25 c0       	rjmp	.+74     	; 0x5f0 <_Z4movef+0xee>
	} else {
#ifdef DEBUG
	Serial.print("move: ");
     5a6:	80 e3       	ldi	r24, 0x30	; 48
     5a8:	92 e0       	ldi	r25, 0x02	; 2
     5aa:	6e e1       	ldi	r22, 0x1E	; 30
     5ac:	71 e0       	ldi	r23, 0x01	; 1
     5ae:	0e 94 12 08 	call	0x1024	; 0x1024 <_ZN5Print5printEPKc>
	Serial.println(FB_BOUNDARY(val));
     5b2:	c8 01       	movw	r24, r16
     5b4:	b7 01       	movw	r22, r14
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	44 e3       	ldi	r20, 0x34	; 52
     5bc:	52 e4       	ldi	r21, 0x42	; 66
     5be:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__mulsf3>
     5c2:	20 e0       	ldi	r18, 0x00	; 0
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	48 ec       	ldi	r20, 0xC8	; 200
     5c8:	51 e4       	ldi	r21, 0x41	; 65
     5ca:	0e 94 55 09 	call	0x12aa	; 0x12aa <__addsf3>
     5ce:	7b 01       	movw	r14, r22
     5d0:	8c 01       	movw	r16, r24
     5d2:	80 e3       	ldi	r24, 0x30	; 48
     5d4:	92 e0       	ldi	r25, 0x02	; 2
     5d6:	b8 01       	movw	r22, r16
     5d8:	a7 01       	movw	r20, r14
     5da:	22 e0       	ldi	r18, 0x02	; 2
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_ZN5Print7printlnEdi>
#endif
		moveFB(true, FB_BOUNDARY(val));
     5e2:	c8 01       	movw	r24, r16
     5e4:	b7 01       	movw	r22, r14
     5e6:	0e 94 25 0a 	call	0x144a	; 0x144a <__fixsfsi>
     5ea:	9b 01       	movw	r18, r22
     5ec:	ac 01       	movw	r20, r24
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	b9 01       	movw	r22, r18
     5f2:	0e 94 36 02 	call	0x46c	; 0x46c <_Z6moveFBbi>
	}
}
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	08 95       	ret

00000600 <_Z5steerf>:
  	*/

}


void steer( float val ) {
     600:	ef 92       	push	r14
     602:	ff 92       	push	r15
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	7b 01       	movw	r14, r22
     60a:	8c 01       	movw	r16, r24
#ifdef DEBUG
	Serial.print("steerVal: ");
     60c:	80 e3       	ldi	r24, 0x30	; 48
     60e:	92 e0       	ldi	r25, 0x02	; 2
     610:	65 e2       	ldi	r22, 0x25	; 37
     612:	71 e0       	ldi	r23, 0x01	; 1
     614:	0e 94 12 08 	call	0x1024	; 0x1024 <_ZN5Print5printEPKc>
	Serial.println(val);
     618:	80 e3       	ldi	r24, 0x30	; 48
     61a:	92 e0       	ldi	r25, 0x02	; 2
     61c:	b8 01       	movw	r22, r16
     61e:	a7 01       	movw	r20, r14
     620:	22 e0       	ldi	r18, 0x02	; 2
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_ZN5Print7printlnEdi>
#endif
	if ( val==0 ){
     628:	c8 01       	movw	r24, r16
     62a:	b7 01       	movw	r22, r14
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	40 e0       	ldi	r20, 0x00	; 0
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	0e 94 b9 09 	call	0x1372	; 0x1372 <__cmpsf2>
     638:	88 23       	and	r24, r24
     63a:	21 f4       	brne	.+8      	; 0x644 <_Z5steerf+0x44>
		steerRL(true,0);
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	56 c0       	rjmp	.+172    	; 0x6f0 <_Z5steerf+0xf0>
	}else if ( val<0 ) {
     644:	c8 01       	movw	r24, r16
     646:	b7 01       	movw	r22, r14
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	40 e0       	ldi	r20, 0x00	; 0
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	0e 94 b9 09 	call	0x1372	; 0x1372 <__cmpsf2>
     654:	88 23       	and	r24, r24
     656:	34 f5       	brge	.+76     	; 0x6a4 <_Z5steerf+0xa4>
#ifdef DEBUG
	Serial.print("steer: ");
     658:	80 e3       	ldi	r24, 0x30	; 48
     65a:	92 e0       	ldi	r25, 0x02	; 2
     65c:	60 e3       	ldi	r22, 0x30	; 48
     65e:	71 e0       	ldi	r23, 0x01	; 1
     660:	0e 94 12 08 	call	0x1024	; 0x1024 <_ZN5Print5printEPKc>
	Serial.println(RL_BOUNDARY(-1*val));
     664:	c8 01       	movw	r24, r16
     666:	b7 01       	movw	r22, r14
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	4b e1       	ldi	r20, 0x1B	; 27
     66e:	53 ec       	ldi	r21, 0xC3	; 195
     670:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__mulsf3>
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	48 ec       	ldi	r20, 0xC8	; 200
     67a:	52 e4       	ldi	r21, 0x42	; 66
     67c:	0e 94 55 09 	call	0x12aa	; 0x12aa <__addsf3>
     680:	7b 01       	movw	r14, r22
     682:	8c 01       	movw	r16, r24
     684:	80 e3       	ldi	r24, 0x30	; 48
     686:	92 e0       	ldi	r25, 0x02	; 2
     688:	b8 01       	movw	r22, r16
     68a:	a7 01       	movw	r20, r14
     68c:	22 e0       	ldi	r18, 0x02	; 2
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_ZN5Print7printlnEdi>
#endif
		steerRL(false, RL_BOUNDARY(-1*val));
     694:	c8 01       	movw	r24, r16
     696:	b7 01       	movw	r22, r14
     698:	0e 94 25 0a 	call	0x144a	; 0x144a <__fixsfsi>
     69c:	9b 01       	movw	r18, r22
     69e:	ac 01       	movw	r20, r24
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	25 c0       	rjmp	.+74     	; 0x6ee <_Z5steerf+0xee>
	} else {
#ifdef DEBUG
	Serial.print("steer: ");
     6a4:	80 e3       	ldi	r24, 0x30	; 48
     6a6:	92 e0       	ldi	r25, 0x02	; 2
     6a8:	60 e3       	ldi	r22, 0x30	; 48
     6aa:	71 e0       	ldi	r23, 0x01	; 1
     6ac:	0e 94 12 08 	call	0x1024	; 0x1024 <_ZN5Print5printEPKc>
	Serial.println(RL_BOUNDARY(val));
     6b0:	c8 01       	movw	r24, r16
     6b2:	b7 01       	movw	r22, r14
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	4b e1       	ldi	r20, 0x1B	; 27
     6ba:	53 e4       	ldi	r21, 0x43	; 67
     6bc:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__mulsf3>
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	48 ec       	ldi	r20, 0xC8	; 200
     6c6:	52 e4       	ldi	r21, 0x42	; 66
     6c8:	0e 94 55 09 	call	0x12aa	; 0x12aa <__addsf3>
     6cc:	7b 01       	movw	r14, r22
     6ce:	8c 01       	movw	r16, r24
     6d0:	80 e3       	ldi	r24, 0x30	; 48
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	b8 01       	movw	r22, r16
     6d6:	a7 01       	movw	r20, r14
     6d8:	22 e0       	ldi	r18, 0x02	; 2
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_ZN5Print7printlnEdi>
#endif
		steerRL(true, RL_BOUNDARY(val));
     6e0:	c8 01       	movw	r24, r16
     6e2:	b7 01       	movw	r22, r14
     6e4:	0e 94 25 0a 	call	0x144a	; 0x144a <__fixsfsi>
     6e8:	9b 01       	movw	r18, r22
     6ea:	ac 01       	movw	r20, r24
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	b9 01       	movw	r22, r18
     6f0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_Z7steerRLbi>
	}
}
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	08 95       	ret

000006fe <loop>:


void loop()
{

	if ( FreqCount.available()) {
     6fe:	0e 94 07 01 	call	0x20e	; 0x20e <_ZN14FreqCountClass9availableEv>
     702:	88 23       	and	r24, r24
     704:	09 f4       	brne	.+2      	; 0x708 <loop+0xa>
     706:	23 c1       	rjmp	.+582    	; 0x94e <__stack+0x4f>
		risingEdges = FreqCount.read();
     708:	0e 94 0a 01 	call	0x214	; 0x214 <_ZN14FreqCountClass4readEv>
     70c:	60 93 9e 01 	sts	0x019E, r22
     710:	70 93 9f 01 	sts	0x019F, r23
     714:	80 93 a0 01 	sts	0x01A0, r24
     718:	90 93 a1 01 	sts	0x01A1, r25

		frequency = (double) (risingEdges / ( (double) countGate/1000));
     71c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__floatunsisf>
     720:	2a e0       	ldi	r18, 0x0A	; 10
     722:	37 ed       	ldi	r19, 0xD7	; 215
     724:	43 ea       	ldi	r20, 0xA3	; 163
     726:	5c e3       	ldi	r21, 0x3C	; 60
     728:	0e 94 bd 09 	call	0x137a	; 0x137a <__divsf3>
     72c:	0e 94 25 0a 	call	0x144a	; 0x144a <__fixsfsi>
     730:	70 93 a3 01 	sts	0x01A3, r23
     734:	60 93 a2 01 	sts	0x01A2, r22

		if (frequency == 0) {
     738:	67 2b       	or	r22, r23
     73a:	69 f4       	brne	.+26     	; 0x756 <loop+0x58>
			steer(0);
     73c:	60 e0       	ldi	r22, 0x00	; 0
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 00 03 	call	0x600	; 0x600 <_Z5steerf>
			move(0);
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 81 02 	call	0x502	; 0x502 <_Z4movef>
     754:	08 95       	ret
			return;
		}

#ifdef DEBUG
		Serial.print("Freq: ");
     756:	80 e3       	ldi	r24, 0x30	; 48
     758:	92 e0       	ldi	r25, 0x02	; 2
     75a:	68 e3       	ldi	r22, 0x38	; 56
     75c:	71 e0       	ldi	r23, 0x01	; 1
     75e:	0e 94 12 08 	call	0x1024	; 0x1024 <_ZN5Print5printEPKc>
		Serial.println(frequency);
     762:	60 91 a2 01 	lds	r22, 0x01A2
     766:	70 91 a3 01 	lds	r23, 0x01A3
     76a:	80 e3       	ldi	r24, 0x30	; 48
     76c:	92 e0       	ldi	r25, 0x02	; 2
     76e:	4a e0       	ldi	r20, 0x0A	; 10
     770:	50 e0       	ldi	r21, 0x00	; 0
     772:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <_ZN5Print7printlnEii>
		//Serial.println(risingEdges);
		//Serial.println(countGate);
#endif
		// frequency = xxyyy Hz
		rightleft = frequency / 1000; // get first 2 digits xx
     776:	20 91 a2 01 	lds	r18, 0x01A2
     77a:	30 91 a3 01 	lds	r19, 0x01A3
     77e:	c9 01       	movw	r24, r18
     780:	68 ee       	ldi	r22, 0xE8	; 232
     782:	73 e0       	ldi	r23, 0x03	; 3
     784:	0e 94 92 0b 	call	0x1724	; 0x1724 <__divmodhi4>
     788:	70 93 a7 01 	sts	0x01A7, r23
     78c:	60 93 a6 01 	sts	0x01A6, r22
		fwdbwd    = frequency % 1000; // get last 3 digits  yyy
     790:	c9 01       	movw	r24, r18
     792:	68 ee       	ldi	r22, 0xE8	; 232
     794:	73 e0       	ldi	r23, 0x03	; 3
     796:	0e 94 92 0b 	call	0x1724	; 0x1724 <__divmodhi4>
     79a:	90 93 a5 01 	sts	0x01A5, r25
     79e:	80 93 a4 01 	sts	0x01A4, r24

#ifdef DEBUG
		Serial.print("r2l: ");
     7a2:	80 e3       	ldi	r24, 0x30	; 48
     7a4:	92 e0       	ldi	r25, 0x02	; 2
     7a6:	6f e3       	ldi	r22, 0x3F	; 63
     7a8:	71 e0       	ldi	r23, 0x01	; 1
     7aa:	0e 94 12 08 	call	0x1024	; 0x1024 <_ZN5Print5printEPKc>
		Serial.print(rightleft);
     7ae:	60 91 a6 01 	lds	r22, 0x01A6
     7b2:	70 91 a7 01 	lds	r23, 0x01A7
     7b6:	80 e3       	ldi	r24, 0x30	; 48
     7b8:	92 e0       	ldi	r25, 0x02	; 2
     7ba:	4a e0       	ldi	r20, 0x0A	; 10
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <_ZN5Print5printEii>
		Serial.print(" f2b: ");
     7c2:	80 e3       	ldi	r24, 0x30	; 48
     7c4:	92 e0       	ldi	r25, 0x02	; 2
     7c6:	65 e4       	ldi	r22, 0x45	; 69
     7c8:	71 e0       	ldi	r23, 0x01	; 1
     7ca:	0e 94 12 08 	call	0x1024	; 0x1024 <_ZN5Print5printEPKc>
		Serial.println(fwdbwd);
     7ce:	60 91 a4 01 	lds	r22, 0x01A4
     7d2:	70 91 a5 01 	lds	r23, 0x01A5
     7d6:	80 e3       	ldi	r24, 0x30	; 48
     7d8:	92 e0       	ldi	r25, 0x02	; 2
     7da:	4a e0       	ldi	r20, 0x0A	; 10
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <_ZN5Print7printlnEii>
#endif

		// keep everything in boundaries
		if ( rightleft > R_FREQVAL || rightleft < L_FREQVAL )
     7e2:	80 91 a6 01 	lds	r24, 0x01A6
     7e6:	90 91 a7 01 	lds	r25, 0x01A7
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	44 97       	sbiw	r24, 0x14	; 20
     7ee:	30 f0       	brcs	.+12     	; 0x7fc <loop+0xfe>
			rightleft = 10;
     7f0:	8a e0       	ldi	r24, 0x0A	; 10
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	90 93 a7 01 	sts	0x01A7, r25
     7f8:	80 93 a6 01 	sts	0x01A6, r24

		if ( fwdbwd > FWD_FREQVAL+50 || fwdbwd < BWD_FREQVAL-50 )
     7fc:	80 91 a4 01 	lds	r24, 0x01A4
     800:	90 91 a5 01 	lds	r25, 0x01A5
     804:	c2 97       	sbiw	r24, 0x32	; 50
     806:	85 58       	subi	r24, 0x85	; 133
     808:	93 40       	sbci	r25, 0x03	; 3
     80a:	30 f0       	brcs	.+12     	; 0x818 <loop+0x11a>
			fwdbwd = 500;
     80c:	84 ef       	ldi	r24, 0xF4	; 244
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	90 93 a5 01 	sts	0x01A5, r25
     814:	80 93 a4 01 	sts	0x01A4, r24

		if ( fwdbwd > FWD_FREQVAL )
     818:	80 91 a4 01 	lds	r24, 0x01A4
     81c:	90 91 a5 01 	lds	r25, 0x01A5
     820:	23 e0       	ldi	r18, 0x03	; 3
     822:	85 38       	cpi	r24, 0x85	; 133
     824:	92 07       	cpc	r25, r18
     826:	1c f0       	brlt	.+6      	; 0x82e <loop+0x130>
			fwdbwd = FWD_FREQVAL;
     828:	84 e8       	ldi	r24, 0x84	; 132
     82a:	93 e0       	ldi	r25, 0x03	; 3
     82c:	05 c0       	rjmp	.+10     	; 0x838 <loop+0x13a>
		else if ( fwdbwd < BWD_FREQVAL )
     82e:	84 36       	cpi	r24, 0x64	; 100
     830:	91 05       	cpc	r25, r1
     832:	34 f4       	brge	.+12     	; 0x840 <loop+0x142>
			fwdbwd = BWD_FREQVAL;
     834:	84 e6       	ldi	r24, 0x64	; 100
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	90 93 a5 01 	sts	0x01A5, r25
     83c:	80 93 a4 01 	sts	0x01A4, r24

		if ( stopVal+50 > fwdbwd && fwdbwd > stopVal-50 )
     840:	20 91 76 01 	lds	r18, 0x0176
     844:	30 91 77 01 	lds	r19, 0x0177
     848:	40 91 a4 01 	lds	r20, 0x01A4
     84c:	50 91 a5 01 	lds	r21, 0x01A5
     850:	c9 01       	movw	r24, r18
     852:	c1 96       	adiw	r24, 0x31	; 49
     854:	84 17       	cp	r24, r20
     856:	95 07       	cpc	r25, r21
     858:	4c f0       	brlt	.+18     	; 0x86c <loop+0x16e>
     85a:	c9 01       	movw	r24, r18
     85c:	c1 97       	sbiw	r24, 0x31	; 49
     85e:	48 17       	cp	r20, r24
     860:	59 07       	cpc	r21, r25
     862:	24 f0       	brlt	.+8      	; 0x86c <loop+0x16e>
			fwdbwd = stopVal;
     864:	30 93 a5 01 	sts	0x01A5, r19
     868:	20 93 a4 01 	sts	0x01A4, r18


#ifdef DEBUG
		Serial.print("After: r2l: ");
     86c:	80 e3       	ldi	r24, 0x30	; 48
     86e:	92 e0       	ldi	r25, 0x02	; 2
     870:	6c e4       	ldi	r22, 0x4C	; 76
     872:	71 e0       	ldi	r23, 0x01	; 1
     874:	0e 94 12 08 	call	0x1024	; 0x1024 <_ZN5Print5printEPKc>
		Serial.print(rightleft);
     878:	60 91 a6 01 	lds	r22, 0x01A6
     87c:	70 91 a7 01 	lds	r23, 0x01A7
     880:	80 e3       	ldi	r24, 0x30	; 48
     882:	92 e0       	ldi	r25, 0x02	; 2
     884:	4a e0       	ldi	r20, 0x0A	; 10
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <_ZN5Print5printEii>
		Serial.print(" f2b: ");
     88c:	80 e3       	ldi	r24, 0x30	; 48
     88e:	92 e0       	ldi	r25, 0x02	; 2
     890:	65 e4       	ldi	r22, 0x45	; 69
     892:	71 e0       	ldi	r23, 0x01	; 1
     894:	0e 94 12 08 	call	0x1024	; 0x1024 <_ZN5Print5printEPKc>
		Serial.println(fwdbwd);
     898:	60 91 a4 01 	lds	r22, 0x01A4
     89c:	70 91 a5 01 	lds	r23, 0x01A5
     8a0:	80 e3       	ldi	r24, 0x30	; 48
     8a2:	92 e0       	ldi	r25, 0x02	; 2
     8a4:	4a e0       	ldi	r20, 0x0A	; 10
     8a6:	50 e0       	ldi	r21, 0x00	; 0
     8a8:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <_ZN5Print7printlnEii>
#endif

		if (fwdbwd == 10)
     8ac:	20 91 a4 01 	lds	r18, 0x01A4
     8b0:	30 91 a5 01 	lds	r19, 0x01A5
     8b4:	2a 30       	cpi	r18, 0x0A	; 10
     8b6:	31 05       	cpc	r19, r1
     8b8:	29 f4       	brne	.+10     	; 0x8c4 <loop+0x1c6>
			move(0);
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	19 c0       	rjmp	.+50     	; 0x8f6 <loop+0x1f8>
		else
			move(-1+ (double)( (fwdbwd-BWD_FREQVAL)/(fb_divisor) ));
     8c4:	24 56       	subi	r18, 0x64	; 100
     8c6:	30 40       	sbci	r19, 0x00	; 0
     8c8:	b9 01       	movw	r22, r18
     8ca:	88 27       	eor	r24, r24
     8cc:	77 fd       	sbrc	r23, 7
     8ce:	80 95       	com	r24
     8d0:	98 2f       	mov	r25, r24
     8d2:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__floatsisf>
     8d6:	20 91 6e 01 	lds	r18, 0x016E
     8da:	30 91 6f 01 	lds	r19, 0x016F
     8de:	40 91 70 01 	lds	r20, 0x0170
     8e2:	50 91 71 01 	lds	r21, 0x0171
     8e6:	0e 94 bd 09 	call	0x137a	; 0x137a <__divsf3>
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	40 e8       	ldi	r20, 0x80	; 128
     8f0:	5f e3       	ldi	r21, 0x3F	; 63
     8f2:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__subsf3>
     8f6:	0e 94 81 02 	call	0x502	; 0x502 <_Z4movef>

		if (rightleft == 500)
     8fa:	20 91 a6 01 	lds	r18, 0x01A6
     8fe:	30 91 a7 01 	lds	r19, 0x01A7
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	24 3f       	cpi	r18, 0xF4	; 244
     906:	38 07       	cpc	r19, r24
     908:	39 f4       	brne	.+14     	; 0x918 <__stack+0x19>
			steer(0);
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 00 03 	call	0x600	; 0x600 <_Z5steerf>
     916:	08 95       	ret
		else
			steer(-1+ (double)( (rightleft-L_FREQVAL)/(rl_divisor) ));
     918:	21 50       	subi	r18, 0x01	; 1
     91a:	30 40       	sbci	r19, 0x00	; 0
     91c:	b9 01       	movw	r22, r18
     91e:	88 27       	eor	r24, r24
     920:	77 fd       	sbrc	r23, 7
     922:	80 95       	com	r24
     924:	98 2f       	mov	r25, r24
     926:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__floatsisf>
     92a:	20 91 72 01 	lds	r18, 0x0172
     92e:	30 91 73 01 	lds	r19, 0x0173
     932:	40 91 74 01 	lds	r20, 0x0174
     936:	50 91 75 01 	lds	r21, 0x0175
     93a:	0e 94 bd 09 	call	0x137a	; 0x137a <__divsf3>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e8       	ldi	r20, 0x80	; 128
     944:	5f e3       	ldi	r21, 0x3F	; 63
     946:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__subsf3>
     94a:	0e 94 00 03 	call	0x600	; 0x600 <_Z5steerf>
     94e:	08 95       	ret

00000950 <setup>:
bool RL_OFF = true;
bool FB_OFF = true;



void setup()
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
	SREG = status;

#endif

#ifdef DEBUG
	Serial.begin(115200);
     954:	00 e3       	ldi	r16, 0x30	; 48
     956:	12 e0       	ldi	r17, 0x02	; 2
     958:	c8 01       	movw	r24, r16
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	52 ec       	ldi	r21, 0xC2	; 194
     95e:	61 e0       	ldi	r22, 0x01	; 1
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	0e 94 49 05 	call	0xa92	; 0xa92 <_ZN14HardwareSerial5beginEm>
	Serial.println("Hallo!");
     966:	c8 01       	movw	r24, r16
     968:	69 e5       	ldi	r22, 0x59	; 89
     96a:	71 e0       	ldi	r23, 0x01	; 1
     96c:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZN5Print7printlnEPKc>
#endif


	FreqCount.begin(countGate);
     970:	84 e1       	ldi	r24, 0x14	; 20
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN14FreqCountClass5beginEj>
}
     978:	1f 91       	pop	r17
     97a:	0f 91       	pop	r16
     97c:	08 95       	ret

0000097e <_Z11serialEventv>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     97e:	08 95       	ret

00000980 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
     980:	1f 92       	push	r1
     982:	0f 92       	push	r0
     984:	0f b6       	in	r0, 0x3f	; 63
     986:	0f 92       	push	r0
     988:	11 24       	eor	r1, r1
     98a:	2f 93       	push	r18
     98c:	3f 93       	push	r19
     98e:	4f 93       	push	r20
     990:	8f 93       	push	r24
     992:	9f 93       	push	r25
     994:	ef 93       	push	r30
     996:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
     998:	80 91 c0 00 	lds	r24, 0x00C0
     99c:	82 fd       	sbrc	r24, 2
     99e:	1d c0       	rjmp	.+58     	; 0x9da <__vector_18+0x5a>
      unsigned char c = UDR0;
     9a0:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     9a4:	20 91 e8 01 	lds	r18, 0x01E8
     9a8:	30 91 e9 01 	lds	r19, 0x01E9

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     9ac:	2f 5f       	subi	r18, 0xFF	; 255
     9ae:	3f 4f       	sbci	r19, 0xFF	; 255
     9b0:	2f 73       	andi	r18, 0x3F	; 63
     9b2:	30 70       	andi	r19, 0x00	; 0
     9b4:	80 91 ea 01 	lds	r24, 0x01EA
     9b8:	90 91 eb 01 	lds	r25, 0x01EB
     9bc:	28 17       	cp	r18, r24
     9be:	39 07       	cpc	r19, r25
     9c0:	71 f0       	breq	.+28     	; 0x9de <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
     9c2:	e0 91 e8 01 	lds	r30, 0x01E8
     9c6:	f0 91 e9 01 	lds	r31, 0x01E9
     9ca:	e8 55       	subi	r30, 0x58	; 88
     9cc:	fe 4f       	sbci	r31, 0xFE	; 254
     9ce:	40 83       	st	Z, r20
    buffer->head = i;
     9d0:	30 93 e9 01 	sts	0x01E9, r19
     9d4:	20 93 e8 01 	sts	0x01E8, r18
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
     9da:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
     9de:	ff 91       	pop	r31
     9e0:	ef 91       	pop	r30
     9e2:	9f 91       	pop	r25
     9e4:	8f 91       	pop	r24
     9e6:	4f 91       	pop	r20
     9e8:	3f 91       	pop	r19
     9ea:	2f 91       	pop	r18
     9ec:	0f 90       	pop	r0
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	0f 90       	pop	r0
     9f2:	1f 90       	pop	r1
     9f4:	18 95       	reti

000009f6 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     9f6:	e0 91 3c 02 	lds	r30, 0x023C
     9fa:	f0 91 3d 02 	lds	r31, 0x023D
     9fe:	e0 5c       	subi	r30, 0xC0	; 192
     a00:	ff 4f       	sbci	r31, 0xFF	; 255
     a02:	81 91       	ld	r24, Z+
     a04:	91 91       	ld	r25, Z+
     a06:	20 81       	ld	r18, Z
     a08:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     a0a:	82 1b       	sub	r24, r18
     a0c:	93 0b       	sbc	r25, r19
     a0e:	8f 73       	andi	r24, 0x3F	; 63
     a10:	90 70       	andi	r25, 0x00	; 0
     a12:	89 2b       	or	r24, r25
     a14:	11 f0       	breq	.+4      	; 0xa1a <_Z14serialEventRunv+0x24>
     a16:	0e 94 bf 04 	call	0x97e	; 0x97e <_Z11serialEventv>
     a1a:	08 95       	ret

00000a1c <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
     a1c:	1f 92       	push	r1
     a1e:	0f 92       	push	r0
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	0f 92       	push	r0
     a24:	11 24       	eor	r1, r1
     a26:	2f 93       	push	r18
     a28:	3f 93       	push	r19
     a2a:	8f 93       	push	r24
     a2c:	9f 93       	push	r25
     a2e:	ef 93       	push	r30
     a30:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
     a32:	20 91 2c 02 	lds	r18, 0x022C
     a36:	30 91 2d 02 	lds	r19, 0x022D
     a3a:	80 91 2e 02 	lds	r24, 0x022E
     a3e:	90 91 2f 02 	lds	r25, 0x022F
     a42:	28 17       	cp	r18, r24
     a44:	39 07       	cpc	r19, r25
     a46:	31 f4       	brne	.+12     	; 0xa54 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     a48:	80 91 c1 00 	lds	r24, 0x00C1
     a4c:	8f 7d       	andi	r24, 0xDF	; 223
     a4e:	80 93 c1 00 	sts	0x00C1, r24
     a52:	14 c0       	rjmp	.+40     	; 0xa7c <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     a54:	e0 91 2e 02 	lds	r30, 0x022E
     a58:	f0 91 2f 02 	lds	r31, 0x022F
     a5c:	e4 51       	subi	r30, 0x14	; 20
     a5e:	fe 4f       	sbci	r31, 0xFE	; 254
     a60:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     a62:	80 91 2e 02 	lds	r24, 0x022E
     a66:	90 91 2f 02 	lds	r25, 0x022F
     a6a:	01 96       	adiw	r24, 0x01	; 1
     a6c:	8f 73       	andi	r24, 0x3F	; 63
     a6e:	90 70       	andi	r25, 0x00	; 0
     a70:	90 93 2f 02 	sts	0x022F, r25
     a74:	80 93 2e 02 	sts	0x022E, r24
	
  #if defined(UDR0)
    UDR0 = c;
     a78:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     a7c:	ff 91       	pop	r31
     a7e:	ef 91       	pop	r30
     a80:	9f 91       	pop	r25
     a82:	8f 91       	pop	r24
     a84:	3f 91       	pop	r19
     a86:	2f 91       	pop	r18
     a88:	0f 90       	pop	r0
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	0f 90       	pop	r0
     a8e:	1f 90       	pop	r1
     a90:	18 95       	reti

00000a92 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     a92:	af 92       	push	r10
     a94:	bf 92       	push	r11
     a96:	df 92       	push	r13
     a98:	ef 92       	push	r14
     a9a:	ff 92       	push	r15
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	ec 01       	movw	r28, r24
     aa6:	7a 01       	movw	r14, r20
     aa8:	8b 01       	movw	r16, r22
     aaa:	dd 24       	eor	r13, r13
     aac:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     aae:	91 e0       	ldi	r25, 0x01	; 1
     ab0:	a9 2e       	mov	r10, r25
     ab2:	b1 2c       	mov	r11, r1
     ab4:	ec 89       	ldd	r30, Y+20	; 0x14
     ab6:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
     ab8:	dd 20       	and	r13, r13
     aba:	69 f0       	breq	.+26     	; 0xad6 <_ZN14HardwareSerial5beginEm+0x44>
    *_ucsra = 1 << _u2x;
     abc:	c5 01       	movw	r24, r10
     abe:	08 a0       	ldd	r0, Y+32	; 0x20
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <_ZN14HardwareSerial5beginEm+0x34>
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	0a 94       	dec	r0
     ac8:	e2 f7       	brpl	.-8      	; 0xac2 <_ZN14HardwareSerial5beginEm+0x30>
     aca:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     acc:	60 e8       	ldi	r22, 0x80	; 128
     ace:	74 e8       	ldi	r23, 0x84	; 132
     ad0:	8e e1       	ldi	r24, 0x1E	; 30
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	05 c0       	rjmp	.+10     	; 0xae0 <_ZN14HardwareSerial5beginEm+0x4e>
  } else {
    *_ucsra = 0;
     ad6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     ad8:	60 e4       	ldi	r22, 0x40	; 64
     ada:	72 e4       	ldi	r23, 0x42	; 66
     adc:	8f e0       	ldi	r24, 0x0F	; 15
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	a8 01       	movw	r20, r16
     ae2:	97 01       	movw	r18, r14
     ae4:	0e 94 a5 0b 	call	0x174a	; 0x174a <__udivmodsi4>
     ae8:	21 50       	subi	r18, 0x01	; 1
     aea:	30 40       	sbci	r19, 0x00	; 0
     aec:	40 40       	sbci	r20, 0x00	; 0
     aee:	50 40       	sbci	r21, 0x00	; 0
     af0:	56 95       	lsr	r21
     af2:	47 95       	ror	r20
     af4:	37 95       	ror	r19
     af6:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     af8:	80 e1       	ldi	r24, 0x10	; 16
     afa:	20 30       	cpi	r18, 0x00	; 0
     afc:	38 07       	cpc	r19, r24
     afe:	20 f0       	brcs	.+8      	; 0xb08 <_ZN14HardwareSerial5beginEm+0x76>
     b00:	dd 20       	and	r13, r13
     b02:	11 f0       	breq	.+4      	; 0xb08 <_ZN14HardwareSerial5beginEm+0x76>
     b04:	dd 24       	eor	r13, r13
     b06:	d6 cf       	rjmp	.-84     	; 0xab4 <_ZN14HardwareSerial5beginEm+0x22>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     b08:	e8 89       	ldd	r30, Y+16	; 0x10
     b0a:	f9 89       	ldd	r31, Y+17	; 0x11
     b0c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     b0e:	ea 89       	ldd	r30, Y+18	; 0x12
     b10:	fb 89       	ldd	r31, Y+19	; 0x13
     b12:	20 83       	st	Z, r18

  transmitting = false;
     b14:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
     b16:	ee 89       	ldd	r30, Y+22	; 0x16
     b18:	ff 89       	ldd	r31, Y+23	; 0x17
     b1a:	40 81       	ld	r20, Z
     b1c:	21 e0       	ldi	r18, 0x01	; 1
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	c9 01       	movw	r24, r18
     b22:	0c 8c       	ldd	r0, Y+28	; 0x1c
     b24:	02 c0       	rjmp	.+4      	; 0xb2a <_ZN14HardwareSerial5beginEm+0x98>
     b26:	88 0f       	add	r24, r24
     b28:	99 1f       	adc	r25, r25
     b2a:	0a 94       	dec	r0
     b2c:	e2 f7       	brpl	.-8      	; 0xb26 <_ZN14HardwareSerial5beginEm+0x94>
     b2e:	48 2b       	or	r20, r24
     b30:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     b32:	ee 89       	ldd	r30, Y+22	; 0x16
     b34:	ff 89       	ldd	r31, Y+23	; 0x17
     b36:	40 81       	ld	r20, Z
     b38:	c9 01       	movw	r24, r18
     b3a:	0d 8c       	ldd	r0, Y+29	; 0x1d
     b3c:	02 c0       	rjmp	.+4      	; 0xb42 <_ZN14HardwareSerial5beginEm+0xb0>
     b3e:	88 0f       	add	r24, r24
     b40:	99 1f       	adc	r25, r25
     b42:	0a 94       	dec	r0
     b44:	e2 f7       	brpl	.-8      	; 0xb3e <_ZN14HardwareSerial5beginEm+0xac>
     b46:	48 2b       	or	r20, r24
     b48:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     b4a:	ee 89       	ldd	r30, Y+22	; 0x16
     b4c:	ff 89       	ldd	r31, Y+23	; 0x17
     b4e:	40 81       	ld	r20, Z
     b50:	c9 01       	movw	r24, r18
     b52:	0e 8c       	ldd	r0, Y+30	; 0x1e
     b54:	02 c0       	rjmp	.+4      	; 0xb5a <_ZN14HardwareSerial5beginEm+0xc8>
     b56:	88 0f       	add	r24, r24
     b58:	99 1f       	adc	r25, r25
     b5a:	0a 94       	dec	r0
     b5c:	e2 f7       	brpl	.-8      	; 0xb56 <_ZN14HardwareSerial5beginEm+0xc4>
     b5e:	48 2b       	or	r20, r24
     b60:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     b62:	ee 89       	ldd	r30, Y+22	; 0x16
     b64:	ff 89       	ldd	r31, Y+23	; 0x17
     b66:	80 81       	ld	r24, Z
     b68:	0f 8c       	ldd	r0, Y+31	; 0x1f
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <_ZN14HardwareSerial5beginEm+0xde>
     b6c:	22 0f       	add	r18, r18
     b6e:	33 1f       	adc	r19, r19
     b70:	0a 94       	dec	r0
     b72:	e2 f7       	brpl	.-8      	; 0xb6c <_ZN14HardwareSerial5beginEm+0xda>
     b74:	20 95       	com	r18
     b76:	28 23       	and	r18, r24
     b78:	20 83       	st	Z, r18
}
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	1f 91       	pop	r17
     b80:	0f 91       	pop	r16
     b82:	ff 90       	pop	r15
     b84:	ef 90       	pop	r14
     b86:	df 90       	pop	r13
     b88:	bf 90       	pop	r11
     b8a:	af 90       	pop	r10
     b8c:	08 95       	ret

00000b8e <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     b8e:	dc 01       	movw	r26, r24
     b90:	1c 96       	adiw	r26, 0x0c	; 12
     b92:	ed 91       	ld	r30, X+
     b94:	fc 91       	ld	r31, X
     b96:	1d 97       	sbiw	r26, 0x0d	; 13
     b98:	e0 5c       	subi	r30, 0xC0	; 192
     b9a:	ff 4f       	sbci	r31, 0xFF	; 255
     b9c:	21 91       	ld	r18, Z+
     b9e:	31 91       	ld	r19, Z+
     ba0:	80 81       	ld	r24, Z
     ba2:	91 81       	ldd	r25, Z+1	; 0x01
     ba4:	28 1b       	sub	r18, r24
     ba6:	39 0b       	sbc	r19, r25
     ba8:	2f 73       	andi	r18, 0x3F	; 63
     baa:	30 70       	andi	r19, 0x00	; 0
}
     bac:	c9 01       	movw	r24, r18
     bae:	08 95       	ret

00000bb0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     bb0:	dc 01       	movw	r26, r24
     bb2:	1c 96       	adiw	r26, 0x0c	; 12
     bb4:	ed 91       	ld	r30, X+
     bb6:	fc 91       	ld	r31, X
     bb8:	1d 97       	sbiw	r26, 0x0d	; 13
     bba:	e0 5c       	subi	r30, 0xC0	; 192
     bbc:	ff 4f       	sbci	r31, 0xFF	; 255
     bbe:	20 81       	ld	r18, Z
     bc0:	31 81       	ldd	r19, Z+1	; 0x01
     bc2:	e0 54       	subi	r30, 0x40	; 64
     bc4:	f0 40       	sbci	r31, 0x00	; 0
     bc6:	df 01       	movw	r26, r30
     bc8:	ae 5b       	subi	r26, 0xBE	; 190
     bca:	bf 4f       	sbci	r27, 0xFF	; 255
     bcc:	8d 91       	ld	r24, X+
     bce:	9c 91       	ld	r25, X
     bd0:	11 97       	sbiw	r26, 0x01	; 1
     bd2:	28 17       	cp	r18, r24
     bd4:	39 07       	cpc	r19, r25
     bd6:	19 f4       	brne	.+6      	; 0xbde <_ZN14HardwareSerial4peekEv+0x2e>
     bd8:	2f ef       	ldi	r18, 0xFF	; 255
     bda:	3f ef       	ldi	r19, 0xFF	; 255
     bdc:	07 c0       	rjmp	.+14     	; 0xbec <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     bde:	8d 91       	ld	r24, X+
     be0:	9c 91       	ld	r25, X
     be2:	e8 0f       	add	r30, r24
     be4:	f9 1f       	adc	r31, r25
     be6:	80 81       	ld	r24, Z
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     bec:	c9 01       	movw	r24, r18
     bee:	08 95       	ret

00000bf0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     bf0:	dc 01       	movw	r26, r24
     bf2:	1c 96       	adiw	r26, 0x0c	; 12
     bf4:	ed 91       	ld	r30, X+
     bf6:	fc 91       	ld	r31, X
     bf8:	1d 97       	sbiw	r26, 0x0d	; 13
     bfa:	e0 5c       	subi	r30, 0xC0	; 192
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	20 81       	ld	r18, Z
     c00:	31 81       	ldd	r19, Z+1	; 0x01
     c02:	e0 54       	subi	r30, 0x40	; 64
     c04:	f0 40       	sbci	r31, 0x00	; 0
     c06:	df 01       	movw	r26, r30
     c08:	ae 5b       	subi	r26, 0xBE	; 190
     c0a:	bf 4f       	sbci	r27, 0xFF	; 255
     c0c:	8d 91       	ld	r24, X+
     c0e:	9c 91       	ld	r25, X
     c10:	11 97       	sbiw	r26, 0x01	; 1
     c12:	28 17       	cp	r18, r24
     c14:	39 07       	cpc	r19, r25
     c16:	19 f4       	brne	.+6      	; 0xc1e <_ZN14HardwareSerial4readEv+0x2e>
     c18:	2f ef       	ldi	r18, 0xFF	; 255
     c1a:	3f ef       	ldi	r19, 0xFF	; 255
     c1c:	10 c0       	rjmp	.+32     	; 0xc3e <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     c1e:	8d 91       	ld	r24, X+
     c20:	9c 91       	ld	r25, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	e8 0f       	add	r30, r24
     c26:	f9 1f       	adc	r31, r25
     c28:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     c2a:	8d 91       	ld	r24, X+
     c2c:	9c 91       	ld	r25, X
     c2e:	11 97       	sbiw	r26, 0x01	; 1
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	8f 73       	andi	r24, 0x3F	; 63
     c34:	90 70       	andi	r25, 0x00	; 0
     c36:	11 96       	adiw	r26, 0x01	; 1
     c38:	9c 93       	st	X, r25
     c3a:	8e 93       	st	-X, r24
    return c;
     c3c:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     c3e:	c9 01       	movw	r24, r18
     c40:	08 95       	ret

00000c42 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
     c42:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
     c44:	91 96       	adiw	r26, 0x21	; 33
     c46:	8c 91       	ld	r24, X
     c48:	91 97       	sbiw	r26, 0x21	; 33
     c4a:	88 23       	and	r24, r24
     c4c:	39 f0       	breq	.+14     	; 0xc5c <_ZN14HardwareSerial5flushEv+0x1a>
     c4e:	54 96       	adiw	r26, 0x14	; 20
     c50:	ed 91       	ld	r30, X+
     c52:	fc 91       	ld	r31, X
     c54:	55 97       	sbiw	r26, 0x15	; 21
     c56:	80 81       	ld	r24, Z
     c58:	86 ff       	sbrs	r24, 6
     c5a:	f9 cf       	rjmp	.-14     	; 0xc4e <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
     c5c:	91 96       	adiw	r26, 0x21	; 33
     c5e:	1c 92       	st	X, r1
}
     c60:	08 95       	ret

00000c62 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     c68:	ee 85       	ldd	r30, Y+14	; 0x0e
     c6a:	ff 85       	ldd	r31, Y+15	; 0x0f
     c6c:	e0 5c       	subi	r30, 0xC0	; 192
     c6e:	ff 4f       	sbci	r31, 0xFF	; 255
     c70:	20 81       	ld	r18, Z
     c72:	31 81       	ldd	r19, Z+1	; 0x01
     c74:	e0 54       	subi	r30, 0x40	; 64
     c76:	f0 40       	sbci	r31, 0x00	; 0
     c78:	2f 5f       	subi	r18, 0xFF	; 255
     c7a:	3f 4f       	sbci	r19, 0xFF	; 255
     c7c:	2f 73       	andi	r18, 0x3F	; 63
     c7e:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     c80:	df 01       	movw	r26, r30
     c82:	ae 5b       	subi	r26, 0xBE	; 190
     c84:	bf 4f       	sbci	r27, 0xFF	; 255
     c86:	8d 91       	ld	r24, X+
     c88:	9c 91       	ld	r25, X
     c8a:	11 97       	sbiw	r26, 0x01	; 1
     c8c:	28 17       	cp	r18, r24
     c8e:	39 07       	cpc	r19, r25
     c90:	d1 f3       	breq	.-12     	; 0xc86 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     c92:	e0 5c       	subi	r30, 0xC0	; 192
     c94:	ff 4f       	sbci	r31, 0xFF	; 255
     c96:	80 81       	ld	r24, Z
     c98:	91 81       	ldd	r25, Z+1	; 0x01
     c9a:	e0 54       	subi	r30, 0x40	; 64
     c9c:	f0 40       	sbci	r31, 0x00	; 0
     c9e:	e8 0f       	add	r30, r24
     ca0:	f9 1f       	adc	r31, r25
     ca2:	60 83       	st	Z, r22
  _tx_buffer->head = i;
     ca4:	ee 85       	ldd	r30, Y+14	; 0x0e
     ca6:	ff 85       	ldd	r31, Y+15	; 0x0f
     ca8:	e0 5c       	subi	r30, 0xC0	; 192
     caa:	ff 4f       	sbci	r31, 0xFF	; 255
     cac:	31 83       	std	Z+1, r19	; 0x01
     cae:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
     cb0:	ee 89       	ldd	r30, Y+22	; 0x16
     cb2:	ff 89       	ldd	r31, Y+23	; 0x17
     cb4:	20 81       	ld	r18, Z
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0f 8c       	ldd	r0, Y+31	; 0x1f
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <_ZN14HardwareSerial5writeEh+0x60>
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	0a 94       	dec	r0
     cc4:	e2 f7       	brpl	.-8      	; 0xcbe <_ZN14HardwareSerial5writeEh+0x5c>
     cc6:	28 2b       	or	r18, r24
     cc8:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
     cce:	ec 89       	ldd	r30, Y+20	; 0x14
     cd0:	fd 89       	ldd	r31, Y+21	; 0x15
     cd2:	80 81       	ld	r24, Z
     cd4:	80 64       	ori	r24, 0x40	; 64
     cd6:	80 83       	st	Z, r24
  
  return 1;
}
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     ce2:	10 92 33 02 	sts	0x0233, r1
     ce6:	10 92 32 02 	sts	0x0232, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     cea:	88 ee       	ldi	r24, 0xE8	; 232
     cec:	93 e0       	ldi	r25, 0x03	; 3
     cee:	a0 e0       	ldi	r26, 0x00	; 0
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	80 93 34 02 	sts	0x0234, r24
     cf6:	90 93 35 02 	sts	0x0235, r25
     cfa:	a0 93 36 02 	sts	0x0236, r26
     cfe:	b0 93 37 02 	sts	0x0237, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     d02:	8e e7       	ldi	r24, 0x7E	; 126
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	90 93 31 02 	sts	0x0231, r25
     d0a:	80 93 30 02 	sts	0x0230, r24
{
  _rx_buffer = rx_buffer;
     d0e:	88 ea       	ldi	r24, 0xA8	; 168
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	90 93 3d 02 	sts	0x023D, r25
     d16:	80 93 3c 02 	sts	0x023C, r24
  _tx_buffer = tx_buffer;
     d1a:	8c ee       	ldi	r24, 0xEC	; 236
     d1c:	91 e0       	ldi	r25, 0x01	; 1
     d1e:	90 93 3f 02 	sts	0x023F, r25
     d22:	80 93 3e 02 	sts	0x023E, r24
  _ubrrh = ubrrh;
     d26:	85 ec       	ldi	r24, 0xC5	; 197
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	90 93 41 02 	sts	0x0241, r25
     d2e:	80 93 40 02 	sts	0x0240, r24
  _ubrrl = ubrrl;
     d32:	84 ec       	ldi	r24, 0xC4	; 196
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	90 93 43 02 	sts	0x0243, r25
     d3a:	80 93 42 02 	sts	0x0242, r24
  _ucsra = ucsra;
     d3e:	80 ec       	ldi	r24, 0xC0	; 192
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	90 93 45 02 	sts	0x0245, r25
     d46:	80 93 44 02 	sts	0x0244, r24
  _ucsrb = ucsrb;
     d4a:	81 ec       	ldi	r24, 0xC1	; 193
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	90 93 47 02 	sts	0x0247, r25
     d52:	80 93 46 02 	sts	0x0246, r24
  _ucsrc = ucsrc;
     d56:	82 ec       	ldi	r24, 0xC2	; 194
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	90 93 49 02 	sts	0x0249, r25
     d5e:	80 93 48 02 	sts	0x0248, r24
  _udr = udr;
     d62:	86 ec       	ldi	r24, 0xC6	; 198
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	90 93 4b 02 	sts	0x024B, r25
     d6a:	80 93 4a 02 	sts	0x024A, r24
  _rxen = rxen;
     d6e:	84 e0       	ldi	r24, 0x04	; 4
     d70:	80 93 4c 02 	sts	0x024C, r24
  _txen = txen;
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	80 93 4d 02 	sts	0x024D, r24
  _rxcie = rxcie;
     d7a:	87 e0       	ldi	r24, 0x07	; 7
     d7c:	80 93 4e 02 	sts	0x024E, r24
  _udrie = udrie;
     d80:	85 e0       	ldi	r24, 0x05	; 5
     d82:	80 93 4f 02 	sts	0x024F, r24
  _u2x = u2x;
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	80 93 50 02 	sts	0x0250, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
     d8c:	08 95       	ret

00000d8e <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
     d8e:	cf 92       	push	r12
     d90:	df 92       	push	r13
     d92:	ef 92       	push	r14
     d94:	ff 92       	push	r15
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	7c 01       	movw	r14, r24
     da0:	6b 01       	movw	r12, r22
     da2:	8a 01       	movw	r16, r20
     da4:	c0 e0       	ldi	r28, 0x00	; 0
     da6:	d0 e0       	ldi	r29, 0x00	; 0
     da8:	0f c0       	rjmp	.+30     	; 0xdc8 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
     daa:	d6 01       	movw	r26, r12
     dac:	6d 91       	ld	r22, X+
     dae:	6d 01       	movw	r12, r26
     db0:	d7 01       	movw	r26, r14
     db2:	ed 91       	ld	r30, X+
     db4:	fc 91       	ld	r31, X
     db6:	01 90       	ld	r0, Z+
     db8:	f0 81       	ld	r31, Z
     dba:	e0 2d       	mov	r30, r0
     dbc:	c7 01       	movw	r24, r14
     dbe:	09 95       	icall
     dc0:	c8 0f       	add	r28, r24
     dc2:	d9 1f       	adc	r29, r25
     dc4:	01 50       	subi	r16, 0x01	; 1
     dc6:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     dc8:	01 15       	cp	r16, r1
     dca:	11 05       	cpc	r17, r1
     dcc:	71 f7       	brne	.-36     	; 0xdaa <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
     dce:	ce 01       	movw	r24, r28
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	ff 90       	pop	r15
     dda:	ef 90       	pop	r14
     ddc:	df 90       	pop	r13
     dde:	cf 90       	pop	r12
     de0:	08 95       	ret

00000de2 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
     de2:	ef 92       	push	r14
     de4:	ff 92       	push	r15
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     dec:	dc 01       	movw	r26, r24
     dee:	ed 91       	ld	r30, X+
     df0:	fc 91       	ld	r31, X
     df2:	01 90       	ld	r0, Z+
     df4:	f0 81       	ld	r31, Z
     df6:	e0 2d       	mov	r30, r0
     df8:	6d e0       	ldi	r22, 0x0D	; 13
     dfa:	09 95       	icall
     dfc:	7c 01       	movw	r14, r24
     dfe:	d8 01       	movw	r26, r16
     e00:	ed 91       	ld	r30, X+
     e02:	fc 91       	ld	r31, X
     e04:	01 90       	ld	r0, Z+
     e06:	f0 81       	ld	r31, Z
     e08:	e0 2d       	mov	r30, r0
     e0a:	c8 01       	movw	r24, r16
     e0c:	6a e0       	ldi	r22, 0x0A	; 10
     e0e:	09 95       	icall
     e10:	9c 01       	movw	r18, r24
     e12:	2e 0d       	add	r18, r14
     e14:	3f 1d       	adc	r19, r15
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
     e16:	c9 01       	movw	r24, r18
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	ff 90       	pop	r15
     e1e:	ef 90       	pop	r14
     e20:	08 95       	ret

00000e22 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
     e28:	61 15       	cp	r22, r1
     e2a:	71 05       	cpc	r23, r1
     e2c:	19 f4       	brne	.+6      	; 0xe34 <_ZN5Print5writeEPKc+0x12>
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	0f c0       	rjmp	.+30     	; 0xe52 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
     e34:	db 01       	movw	r26, r22
     e36:	0d 90       	ld	r0, X+
     e38:	00 20       	and	r0, r0
     e3a:	e9 f7       	brne	.-6      	; 0xe36 <_ZN5Print5writeEPKc+0x14>
     e3c:	11 97       	sbiw	r26, 0x01	; 1
     e3e:	a6 1b       	sub	r26, r22
     e40:	b7 0b       	sbc	r27, r23
     e42:	e8 81       	ld	r30, Y
     e44:	f9 81       	ldd	r31, Y+1	; 0x01
     e46:	02 80       	ldd	r0, Z+2	; 0x02
     e48:	f3 81       	ldd	r31, Z+3	; 0x03
     e4a:	e0 2d       	mov	r30, r0
     e4c:	ad 01       	movw	r20, r26
     e4e:	09 95       	icall
     e50:	9c 01       	movw	r18, r24
    }
     e52:	c9 01       	movw	r24, r18
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	08 95       	ret

00000e5a <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     e5a:	4f 92       	push	r4
     e5c:	5f 92       	push	r5
     e5e:	7f 92       	push	r7
     e60:	8f 92       	push	r8
     e62:	9f 92       	push	r9
     e64:	af 92       	push	r10
     e66:	bf 92       	push	r11
     e68:	cf 92       	push	r12
     e6a:	df 92       	push	r13
     e6c:	ef 92       	push	r14
     e6e:	ff 92       	push	r15
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	a1 97       	sbiw	r28, 0x21	; 33
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	2c 01       	movw	r4, r24
     e8a:	74 2e       	mov	r7, r20
     e8c:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     e8e:	22 30       	cpi	r18, 0x02	; 2
     e90:	08 f4       	brcc	.+2      	; 0xe94 <_ZN5Print11printNumberEmh+0x3a>
     e92:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     e94:	19 a2       	std	Y+33, r1	; 0x21
     e96:	31 e2       	ldi	r19, 0x21	; 33
     e98:	c3 2e       	mov	r12, r19
     e9a:	d1 2c       	mov	r13, r1
     e9c:	cc 0e       	add	r12, r28
     e9e:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
     ea0:	82 2e       	mov	r8, r18
     ea2:	99 24       	eor	r9, r9
     ea4:	aa 24       	eor	r10, r10
     ea6:	bb 24       	eor	r11, r11
     ea8:	67 2d       	mov	r22, r7
     eaa:	75 2f       	mov	r23, r21
     eac:	a5 01       	movw	r20, r10
     eae:	94 01       	movw	r18, r8
     eb0:	0e 94 a5 0b 	call	0x174a	; 0x174a <__udivmodsi4>
     eb4:	79 01       	movw	r14, r18
     eb6:	8a 01       	movw	r16, r20
    char c = m - base * n;
     eb8:	c8 01       	movw	r24, r16
     eba:	b7 01       	movw	r22, r14
     ebc:	a5 01       	movw	r20, r10
     ebe:	94 01       	movw	r18, r8
     ec0:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__mulsi3>
     ec4:	47 2d       	mov	r20, r7
     ec6:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     ec8:	08 94       	sec
     eca:	c1 08       	sbc	r12, r1
     ecc:	d1 08       	sbc	r13, r1
     ece:	4a 30       	cpi	r20, 0x0A	; 10
     ed0:	14 f4       	brge	.+4      	; 0xed6 <_ZN5Print11printNumberEmh+0x7c>
     ed2:	40 5d       	subi	r20, 0xD0	; 208
     ed4:	01 c0       	rjmp	.+2      	; 0xed8 <_ZN5Print11printNumberEmh+0x7e>
     ed6:	49 5c       	subi	r20, 0xC9	; 201
     ed8:	f6 01       	movw	r30, r12
     eda:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     edc:	e1 14       	cp	r14, r1
     ede:	f1 04       	cpc	r15, r1
     ee0:	01 05       	cpc	r16, r1
     ee2:	11 05       	cpc	r17, r1
     ee4:	21 f0       	breq	.+8      	; 0xeee <_ZN5Print11printNumberEmh+0x94>
     ee6:	7e 2c       	mov	r7, r14
     ee8:	5f 2d       	mov	r21, r15
     eea:	c8 01       	movw	r24, r16
     eec:	dd cf       	rjmp	.-70     	; 0xea8 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     eee:	c2 01       	movw	r24, r4
     ef0:	b6 01       	movw	r22, r12
     ef2:	0e 94 11 07 	call	0xe22	; 0xe22 <_ZN5Print5writeEPKc>
}
     ef6:	a1 96       	adiw	r28, 0x21	; 33
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	ef 90       	pop	r14
     f0e:	df 90       	pop	r13
     f10:	cf 90       	pop	r12
     f12:	bf 90       	pop	r11
     f14:	af 90       	pop	r10
     f16:	9f 90       	pop	r9
     f18:	8f 90       	pop	r8
     f1a:	7f 90       	pop	r7
     f1c:	5f 90       	pop	r5
     f1e:	4f 90       	pop	r4
     f20:	08 95       	ret

00000f22 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
     f22:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
     f24:	21 15       	cp	r18, r1
     f26:	31 05       	cpc	r19, r1
     f28:	41 f4       	brne	.+16     	; 0xf3a <_ZN5Print5printEmi+0x18>
     f2a:	ed 91       	ld	r30, X+
     f2c:	fc 91       	ld	r31, X
     f2e:	01 90       	ld	r0, Z+
     f30:	f0 81       	ld	r31, Z
     f32:	e0 2d       	mov	r30, r0
     f34:	64 2f       	mov	r22, r20
     f36:	09 95       	icall
     f38:	08 95       	ret
  else return printNumber(n, base);
     f3a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN5Print11printNumberEmh>
}
     f3e:	08 95       	ret

00000f40 <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
     f40:	cf 92       	push	r12
     f42:	df 92       	push	r13
     f44:	ef 92       	push	r14
     f46:	ff 92       	push	r15
     f48:	0f 93       	push	r16
     f4a:	1f 93       	push	r17
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	ec 01       	movw	r28, r24
     f52:	6a 01       	movw	r12, r20
     f54:	7b 01       	movw	r14, r22
{
  if (base == 0) {
     f56:	21 15       	cp	r18, r1
     f58:	31 05       	cpc	r19, r1
     f5a:	41 f4       	brne	.+16     	; 0xf6c <_ZN5Print5printEli+0x2c>
    return write(n);
     f5c:	e8 81       	ld	r30, Y
     f5e:	f9 81       	ldd	r31, Y+1	; 0x01
     f60:	01 90       	ld	r0, Z+
     f62:	f0 81       	ld	r31, Z
     f64:	e0 2d       	mov	r30, r0
     f66:	64 2f       	mov	r22, r20
     f68:	09 95       	icall
     f6a:	1f c0       	rjmp	.+62     	; 0xfaa <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
     f6c:	2a 30       	cpi	r18, 0x0A	; 10
     f6e:	31 05       	cpc	r19, r1
     f70:	d1 f4       	brne	.+52     	; 0xfa6 <_ZN5Print5printEli+0x66>
    if (n < 0) {
     f72:	77 ff       	sbrs	r23, 7
     f74:	17 c0       	rjmp	.+46     	; 0xfa4 <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     f76:	e8 81       	ld	r30, Y
     f78:	f9 81       	ldd	r31, Y+1	; 0x01
     f7a:	01 90       	ld	r0, Z+
     f7c:	f0 81       	ld	r31, Z
     f7e:	e0 2d       	mov	r30, r0
     f80:	6d e2       	ldi	r22, 0x2D	; 45
     f82:	09 95       	icall
     f84:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
     f86:	44 27       	eor	r20, r20
     f88:	55 27       	eor	r21, r21
     f8a:	ba 01       	movw	r22, r20
     f8c:	4c 19       	sub	r20, r12
     f8e:	5d 09       	sbc	r21, r13
     f90:	6e 09       	sbc	r22, r14
     f92:	7f 09       	sbc	r23, r15
     f94:	ce 01       	movw	r24, r28
     f96:	2a e0       	ldi	r18, 0x0A	; 10
     f98:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN5Print11printNumberEmh>
     f9c:	98 01       	movw	r18, r16
     f9e:	28 0f       	add	r18, r24
     fa0:	39 1f       	adc	r19, r25
     fa2:	04 c0       	rjmp	.+8      	; 0xfac <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
     fa4:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
     fa6:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN5Print11printNumberEmh>
     faa:	9c 01       	movw	r18, r24
  }
}
     fac:	c9 01       	movw	r24, r18
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	ff 90       	pop	r15
     fb8:	ef 90       	pop	r14
     fba:	df 90       	pop	r13
     fbc:	cf 90       	pop	r12
     fbe:	08 95       	ret

00000fc0 <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
     fc0:	ef 92       	push	r14
     fc2:	ff 92       	push	r15
     fc4:	0f 93       	push	r16
     fc6:	1f 93       	push	r17
     fc8:	7b 01       	movw	r14, r22
     fca:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
     fcc:	00 27       	eor	r16, r16
     fce:	f7 fc       	sbrc	r15, 7
     fd0:	00 95       	com	r16
     fd2:	10 2f       	mov	r17, r16
     fd4:	b8 01       	movw	r22, r16
     fd6:	a7 01       	movw	r20, r14
     fd8:	0e 94 a0 07 	call	0xf40	; 0xf40 <_ZN5Print5printEli>
}
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	ff 90       	pop	r15
     fe2:	ef 90       	pop	r14
     fe4:	08 95       	ret

00000fe6 <_ZN5Print7printlnEii>:
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
     fe6:	cf 92       	push	r12
     fe8:	df 92       	push	r13
     fea:	ef 92       	push	r14
     fec:	ff 92       	push	r15
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	6c 01       	movw	r12, r24
     ff4:	7b 01       	movw	r14, r22
     ff6:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
     ff8:	00 27       	eor	r16, r16
     ffa:	f7 fc       	sbrc	r15, 7
     ffc:	00 95       	com	r16
     ffe:	10 2f       	mov	r17, r16
    1000:	b8 01       	movw	r22, r16
    1002:	a7 01       	movw	r20, r14
    1004:	0e 94 a0 07 	call	0xf40	; 0xf40 <_ZN5Print5printEli>
    1008:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    100a:	c6 01       	movw	r24, r12
    100c:	0e 94 f1 06 	call	0xde2	; 0xde2 <_ZN5Print7printlnEv>
    1010:	08 0f       	add	r16, r24
    1012:	19 1f       	adc	r17, r25
  return n;
}
    1014:	c8 01       	movw	r24, r16
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	ff 90       	pop	r15
    101c:	ef 90       	pop	r14
    101e:	df 90       	pop	r13
    1020:	cf 90       	pop	r12
    1022:	08 95       	ret

00001024 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1024:	0e 94 11 07 	call	0xe22	; 0xe22 <_ZN5Print5writeEPKc>
}
    1028:	08 95       	ret

0000102a <_ZN5Print10printFloatEdh>:
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
    102a:	7f 92       	push	r7
    102c:	8f 92       	push	r8
    102e:	9f 92       	push	r9
    1030:	af 92       	push	r10
    1032:	bf 92       	push	r11
    1034:	cf 92       	push	r12
    1036:	df 92       	push	r13
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	4c 01       	movw	r8, r24
    1046:	7a 01       	movw	r14, r20
    1048:	8b 01       	movw	r16, r22
    104a:	72 2e       	mov	r7, r18
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    104c:	cb 01       	movw	r24, r22
    104e:	ba 01       	movw	r22, r20
    1050:	a8 01       	movw	r20, r16
    1052:	97 01       	movw	r18, r14
    1054:	0e 94 6f 0b 	call	0x16de	; 0x16de <__unordsf2>
    1058:	88 23       	and	r24, r24
    105a:	21 f0       	breq	.+8      	; 0x1064 <_ZN5Print10printFloatEdh+0x3a>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    105c:	c4 01       	movw	r24, r8
    105e:	60 e6       	ldi	r22, 0x60	; 96
    1060:	71 e0       	ldi	r23, 0x01	; 1
    1062:	21 c0       	rjmp	.+66     	; 0x10a6 <_ZN5Print10printFloatEdh+0x7c>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    1064:	c0 e0       	ldi	r28, 0x00	; 0
    1066:	d0 e0       	ldi	r29, 0x00	; 0
    1068:	57 01       	movw	r10, r14
    106a:	68 01       	movw	r12, r16
    106c:	e8 94       	clt
    106e:	d7 f8       	bld	r13, 7
    1070:	c6 01       	movw	r24, r12
    1072:	b5 01       	movw	r22, r10
    1074:	2f ef       	ldi	r18, 0xFF	; 255
    1076:	3f ef       	ldi	r19, 0xFF	; 255
    1078:	4f e7       	ldi	r20, 0x7F	; 127
    107a:	5f e7       	ldi	r21, 0x7F	; 127
    107c:	0e 94 6f 0b 	call	0x16de	; 0x16de <__unordsf2>
    1080:	88 23       	and	r24, r24
    1082:	51 f4       	brne	.+20     	; 0x1098 <_ZN5Print10printFloatEdh+0x6e>
    1084:	c6 01       	movw	r24, r12
    1086:	b5 01       	movw	r22, r10
    1088:	2f ef       	ldi	r18, 0xFF	; 255
    108a:	3f ef       	ldi	r19, 0xFF	; 255
    108c:	4f e7       	ldi	r20, 0x7F	; 127
    108e:	5f e7       	ldi	r21, 0x7F	; 127
    1090:	0e 94 b9 09 	call	0x1372	; 0x1372 <__cmpsf2>
    1094:	18 16       	cp	r1, r24
    1096:	14 f0       	brlt	.+4      	; 0x109c <_ZN5Print10printFloatEdh+0x72>
    1098:	c1 e0       	ldi	r28, 0x01	; 1
    109a:	d0 e0       	ldi	r29, 0x00	; 0
    109c:	21 97       	sbiw	r28, 0x01	; 1
    109e:	39 f0       	breq	.+14     	; 0x10ae <_ZN5Print10printFloatEdh+0x84>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    10a0:	c4 01       	movw	r24, r8
    10a2:	64 e6       	ldi	r22, 0x64	; 100
    10a4:	71 e0       	ldi	r23, 0x01	; 1
    10a6:	0e 94 11 07 	call	0xe22	; 0xe22 <_ZN5Print5writeEPKc>
    10aa:	ec 01       	movw	r28, r24
    10ac:	93 c0       	rjmp	.+294    	; 0x11d4 <_ZN5Print10printFloatEdh+0x1aa>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    10ae:	c8 01       	movw	r24, r16
    10b0:	b7 01       	movw	r22, r14
    10b2:	2f ef       	ldi	r18, 0xFF	; 255
    10b4:	3f ef       	ldi	r19, 0xFF	; 255
    10b6:	4f e7       	ldi	r20, 0x7F	; 127
    10b8:	5f e4       	ldi	r21, 0x4F	; 79
    10ba:	0e 94 08 0b 	call	0x1610	; 0x1610 <__gesf2>
    10be:	18 16       	cp	r1, r24
    10c0:	54 f0       	brlt	.+20     	; 0x10d6 <_ZN5Print10printFloatEdh+0xac>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    10c2:	c8 01       	movw	r24, r16
    10c4:	b7 01       	movw	r22, r14
    10c6:	2f ef       	ldi	r18, 0xFF	; 255
    10c8:	3f ef       	ldi	r19, 0xFF	; 255
    10ca:	4f e7       	ldi	r20, 0x7F	; 127
    10cc:	5f ec       	ldi	r21, 0xCF	; 207
    10ce:	0e 94 b9 09 	call	0x1372	; 0x1372 <__cmpsf2>
    10d2:	88 23       	and	r24, r24
    10d4:	24 f4       	brge	.+8      	; 0x10de <_ZN5Print10printFloatEdh+0xb4>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    10d6:	c4 01       	movw	r24, r8
    10d8:	68 e6       	ldi	r22, 0x68	; 104
    10da:	71 e0       	ldi	r23, 0x01	; 1
    10dc:	e4 cf       	rjmp	.-56     	; 0x10a6 <_ZN5Print10printFloatEdh+0x7c>
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    10de:	c8 01       	movw	r24, r16
    10e0:	b7 01       	movw	r22, r14
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	40 e0       	ldi	r20, 0x00	; 0
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	0e 94 b9 09 	call	0x1372	; 0x1372 <__cmpsf2>
    10ee:	87 fd       	sbrc	r24, 7
    10f0:	03 c0       	rjmp	.+6      	; 0x10f8 <_ZN5Print10printFloatEdh+0xce>
    10f2:	c0 e0       	ldi	r28, 0x00	; 0
    10f4:	d0 e0       	ldi	r29, 0x00	; 0
    10f6:	0e c0       	rjmp	.+28     	; 0x1114 <_ZN5Print10printFloatEdh+0xea>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    10f8:	d4 01       	movw	r26, r8
    10fa:	ed 91       	ld	r30, X+
    10fc:	fc 91       	ld	r31, X
    10fe:	01 90       	ld	r0, Z+
    1100:	f0 81       	ld	r31, Z
    1102:	e0 2d       	mov	r30, r0
    1104:	c4 01       	movw	r24, r8
    1106:	6d e2       	ldi	r22, 0x2D	; 45
    1108:	09 95       	icall
    110a:	ec 01       	movw	r28, r24
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
    110c:	17 fb       	bst	r17, 7
    110e:	10 95       	com	r17
    1110:	17 f9       	bld	r17, 7
    1112:	10 95       	com	r17
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e0       	ldi	r20, 0x00	; 0
    111a:	5f e3       	ldi	r21, 0x3F	; 63
    111c:	dd 24       	eor	r13, r13
    111e:	0b c0       	rjmp	.+22     	; 0x1136 <_ZN5Print10printFloatEdh+0x10c>
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
    1120:	ca 01       	movw	r24, r20
    1122:	b9 01       	movw	r22, r18
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	40 e2       	ldi	r20, 0x20	; 32
    112a:	51 e4       	ldi	r21, 0x41	; 65
    112c:	0e 94 bd 09 	call	0x137a	; 0x137a <__divsf3>
    1130:	9b 01       	movw	r18, r22
    1132:	ac 01       	movw	r20, r24
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1134:	d3 94       	inc	r13
    1136:	d7 14       	cp	r13, r7
    1138:	98 f3       	brcs	.-26     	; 0x1120 <_ZN5Print10printFloatEdh+0xf6>
    rounding /= 10.0;
  
  number += rounding;
    113a:	c8 01       	movw	r24, r16
    113c:	b7 01       	movw	r22, r14
    113e:	0e 94 55 09 	call	0x12aa	; 0x12aa <__addsf3>
    1142:	5b 01       	movw	r10, r22
    1144:	6c 01       	movw	r12, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1146:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__fixunssfsi>
    114a:	7b 01       	movw	r14, r22
    114c:	8c 01       	movw	r16, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    114e:	c4 01       	movw	r24, r8
    1150:	b8 01       	movw	r22, r16
    1152:	a7 01       	movw	r20, r14
    1154:	2a e0       	ldi	r18, 0x0A	; 10
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN5Print5printEmi>
    115c:	c8 0f       	add	r28, r24
    115e:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1160:	77 20       	and	r7, r7
    1162:	39 f0       	breq	.+14     	; 0x1172 <_ZN5Print10printFloatEdh+0x148>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1164:	c4 01       	movw	r24, r8
    1166:	6c e6       	ldi	r22, 0x6C	; 108
    1168:	71 e0       	ldi	r23, 0x01	; 1
    116a:	0e 94 11 07 	call	0xe22	; 0xe22 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    116e:	c8 0f       	add	r28, r24
    1170:	d9 1f       	adc	r29, r25
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1172:	c8 01       	movw	r24, r16
    1174:	b7 01       	movw	r22, r14
    1176:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__floatunsisf>
    117a:	9b 01       	movw	r18, r22
    117c:	ac 01       	movw	r20, r24
    117e:	c6 01       	movw	r24, r12
    1180:	b5 01       	movw	r22, r10
    1182:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__subsf3>
    1186:	24 c0       	rjmp	.+72     	; 0x11d0 <_ZN5Print10printFloatEdh+0x1a6>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	40 e2       	ldi	r20, 0x20	; 32
    118e:	51 e4       	ldi	r21, 0x41	; 65
    1190:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__mulsf3>
    1194:	7b 01       	movw	r14, r22
    1196:	8c 01       	movw	r16, r24
    int toPrint = int(remainder);
    1198:	0e 94 25 0a 	call	0x144a	; 0x144a <__fixsfsi>
    119c:	5b 01       	movw	r10, r22
    119e:	6c 01       	movw	r12, r24
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    11a0:	cc 24       	eor	r12, r12
    11a2:	b7 fc       	sbrc	r11, 7
    11a4:	c0 94       	com	r12
    11a6:	dc 2c       	mov	r13, r12
    11a8:	c4 01       	movw	r24, r8
    11aa:	b6 01       	movw	r22, r12
    11ac:	a5 01       	movw	r20, r10
    11ae:	2a e0       	ldi	r18, 0x0A	; 10
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	0e 94 a0 07 	call	0xf40	; 0xf40 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    11b6:	c8 0f       	add	r28, r24
    11b8:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    11ba:	c6 01       	movw	r24, r12
    11bc:	b5 01       	movw	r22, r10
    11be:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__floatsisf>
    11c2:	9b 01       	movw	r18, r22
    11c4:	ac 01       	movw	r20, r24
    11c6:	c8 01       	movw	r24, r16
    11c8:	b7 01       	movw	r22, r14
    11ca:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__subsf3>
    11ce:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    11d0:	77 20       	and	r7, r7
    11d2:	d1 f6       	brne	.-76     	; 0x1188 <_ZN5Print10printFloatEdh+0x15e>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    11d4:	ce 01       	movw	r24, r28
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	ff 90       	pop	r15
    11e0:	ef 90       	pop	r14
    11e2:	df 90       	pop	r13
    11e4:	cf 90       	pop	r12
    11e6:	bf 90       	pop	r11
    11e8:	af 90       	pop	r10
    11ea:	9f 90       	pop	r9
    11ec:	8f 90       	pop	r8
    11ee:	7f 90       	pop	r7
    11f0:	08 95       	ret

000011f2 <_ZN5Print7printlnEdi>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
    11f2:	ef 92       	push	r14
    11f4:	ff 92       	push	r15
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	7c 01       	movw	r14, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    11fc:	0e 94 15 08 	call	0x102a	; 0x102a <_ZN5Print10printFloatEdh>
    1200:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1202:	c7 01       	movw	r24, r14
    1204:	0e 94 f1 06 	call	0xde2	; 0xde2 <_ZN5Print7printlnEv>
    1208:	08 0f       	add	r16, r24
    120a:	19 1f       	adc	r17, r25
  return n;
}
    120c:	c8 01       	movw	r24, r16
    120e:	1f 91       	pop	r17
    1210:	0f 91       	pop	r16
    1212:	ff 90       	pop	r15
    1214:	ef 90       	pop	r14
    1216:	08 95       	ret

00001218 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    1218:	ef 92       	push	r14
    121a:	ff 92       	push	r15
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1222:	0e 94 11 07 	call	0xe22	; 0xe22 <_ZN5Print5writeEPKc>
    1226:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    1228:	c7 01       	movw	r24, r14
    122a:	0e 94 f1 06 	call	0xde2	; 0xde2 <_ZN5Print7printlnEv>
    122e:	08 0f       	add	r16, r24
    1230:	19 1f       	adc	r17, r25
  return n;
}
    1232:	c8 01       	movw	r24, r16
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	ff 90       	pop	r15
    123a:	ef 90       	pop	r14
    123c:	08 95       	ret

0000123e <main>:
#include <Arduino.h>

int main(void)
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
{
	init();
    1242:	0e 94 2e 09 	call	0x125c	; 0x125c <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1246:	0e 94 a8 04 	call	0x950	; 0x950 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    124a:	cb ef       	ldi	r28, 0xFB	; 251
    124c:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
    124e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <loop>
		if (serialEventRun) serialEventRun();
    1252:	20 97       	sbiw	r28, 0x00	; 0
    1254:	e1 f3       	breq	.-8      	; 0x124e <main+0x10>
    1256:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <_Z14serialEventRunv>
    125a:	f9 cf       	rjmp	.-14     	; 0x124e <main+0x10>

0000125c <init>:
#endif
void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    125c:	78 94       	sei
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    125e:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    1262:	08 95       	ret

00001264 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t bit = digitalPinToBitMask(pin);
    1268:	c9 01       	movw	r24, r18
    126a:	86 56       	subi	r24, 0x66	; 102
    126c:	9f 4f       	sbci	r25, 0xFF	; 255
    126e:	fc 01       	movw	r30, r24
    1270:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    1272:	2a 57       	subi	r18, 0x7A	; 122
    1274:	3f 4f       	sbci	r19, 0xFF	; 255
    1276:	f9 01       	movw	r30, r18
    1278:	84 91       	lpm	r24, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    127a:	88 23       	and	r24, r24
    127c:	a1 f0       	breq	.+40     	; 0x12a6 <digitalWrite+0x42>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	/////////if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    127e:	e8 2f       	mov	r30, r24
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	ee 0f       	add	r30, r30
    1284:	ff 1f       	adc	r31, r31
    1286:	ee 58       	subi	r30, 0x8E	; 142
    1288:	ff 4f       	sbci	r31, 0xFF	; 255
    128a:	a5 91       	lpm	r26, Z+
    128c:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    128e:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1290:	f8 94       	cli

	if (val == LOW) {
    1292:	66 23       	and	r22, r22
    1294:	21 f4       	brne	.+8      	; 0x129e <digitalWrite+0x3a>
		*out &= ~bit;
    1296:	8c 91       	ld	r24, X
    1298:	90 95       	com	r25
    129a:	89 23       	and	r24, r25
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <digitalWrite+0x3e>
	} else {
		*out |= bit;
    129e:	8c 91       	ld	r24, X
    12a0:	89 2b       	or	r24, r25
    12a2:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    12a4:	2f bf       	out	0x3f, r18	; 63
    12a6:	08 95       	ret

000012a8 <__subsf3>:
    12a8:	50 58       	subi	r21, 0x80	; 128

000012aa <__addsf3>:
    12aa:	bb 27       	eor	r27, r27
    12ac:	aa 27       	eor	r26, r26
    12ae:	0e d0       	rcall	.+28     	; 0x12cc <__addsf3x>
    12b0:	75 c1       	rjmp	.+746    	; 0x159c <__fp_round>
    12b2:	66 d1       	rcall	.+716    	; 0x1580 <__fp_pscA>
    12b4:	30 f0       	brcs	.+12     	; 0x12c2 <__addsf3+0x18>
    12b6:	6b d1       	rcall	.+726    	; 0x158e <__fp_pscB>
    12b8:	20 f0       	brcs	.+8      	; 0x12c2 <__addsf3+0x18>
    12ba:	31 f4       	brne	.+12     	; 0x12c8 <__addsf3+0x1e>
    12bc:	9f 3f       	cpi	r25, 0xFF	; 255
    12be:	11 f4       	brne	.+4      	; 0x12c4 <__addsf3+0x1a>
    12c0:	1e f4       	brtc	.+6      	; 0x12c8 <__addsf3+0x1e>
    12c2:	5b c1       	rjmp	.+694    	; 0x157a <__fp_nan>
    12c4:	0e f4       	brtc	.+2      	; 0x12c8 <__addsf3+0x1e>
    12c6:	e0 95       	com	r30
    12c8:	e7 fb       	bst	r30, 7
    12ca:	51 c1       	rjmp	.+674    	; 0x156e <__fp_inf>

000012cc <__addsf3x>:
    12cc:	e9 2f       	mov	r30, r25
    12ce:	77 d1       	rcall	.+750    	; 0x15be <__fp_split3>
    12d0:	80 f3       	brcs	.-32     	; 0x12b2 <__addsf3+0x8>
    12d2:	ba 17       	cp	r27, r26
    12d4:	62 07       	cpc	r22, r18
    12d6:	73 07       	cpc	r23, r19
    12d8:	84 07       	cpc	r24, r20
    12da:	95 07       	cpc	r25, r21
    12dc:	18 f0       	brcs	.+6      	; 0x12e4 <__addsf3x+0x18>
    12de:	71 f4       	brne	.+28     	; 0x12fc <__addsf3x+0x30>
    12e0:	9e f5       	brtc	.+102    	; 0x1348 <__addsf3x+0x7c>
    12e2:	8f c1       	rjmp	.+798    	; 0x1602 <__fp_zero>
    12e4:	0e f4       	brtc	.+2      	; 0x12e8 <__addsf3x+0x1c>
    12e6:	e0 95       	com	r30
    12e8:	0b 2e       	mov	r0, r27
    12ea:	ba 2f       	mov	r27, r26
    12ec:	a0 2d       	mov	r26, r0
    12ee:	0b 01       	movw	r0, r22
    12f0:	b9 01       	movw	r22, r18
    12f2:	90 01       	movw	r18, r0
    12f4:	0c 01       	movw	r0, r24
    12f6:	ca 01       	movw	r24, r20
    12f8:	a0 01       	movw	r20, r0
    12fa:	11 24       	eor	r1, r1
    12fc:	ff 27       	eor	r31, r31
    12fe:	59 1b       	sub	r21, r25
    1300:	99 f0       	breq	.+38     	; 0x1328 <__addsf3x+0x5c>
    1302:	59 3f       	cpi	r21, 0xF9	; 249
    1304:	50 f4       	brcc	.+20     	; 0x131a <__addsf3x+0x4e>
    1306:	50 3e       	cpi	r21, 0xE0	; 224
    1308:	68 f1       	brcs	.+90     	; 0x1364 <__addsf3x+0x98>
    130a:	1a 16       	cp	r1, r26
    130c:	f0 40       	sbci	r31, 0x00	; 0
    130e:	a2 2f       	mov	r26, r18
    1310:	23 2f       	mov	r18, r19
    1312:	34 2f       	mov	r19, r20
    1314:	44 27       	eor	r20, r20
    1316:	58 5f       	subi	r21, 0xF8	; 248
    1318:	f3 cf       	rjmp	.-26     	; 0x1300 <__addsf3x+0x34>
    131a:	46 95       	lsr	r20
    131c:	37 95       	ror	r19
    131e:	27 95       	ror	r18
    1320:	a7 95       	ror	r26
    1322:	f0 40       	sbci	r31, 0x00	; 0
    1324:	53 95       	inc	r21
    1326:	c9 f7       	brne	.-14     	; 0x131a <__addsf3x+0x4e>
    1328:	7e f4       	brtc	.+30     	; 0x1348 <__addsf3x+0x7c>
    132a:	1f 16       	cp	r1, r31
    132c:	ba 0b       	sbc	r27, r26
    132e:	62 0b       	sbc	r22, r18
    1330:	73 0b       	sbc	r23, r19
    1332:	84 0b       	sbc	r24, r20
    1334:	ba f0       	brmi	.+46     	; 0x1364 <__addsf3x+0x98>
    1336:	91 50       	subi	r25, 0x01	; 1
    1338:	a1 f0       	breq	.+40     	; 0x1362 <__addsf3x+0x96>
    133a:	ff 0f       	add	r31, r31
    133c:	bb 1f       	adc	r27, r27
    133e:	66 1f       	adc	r22, r22
    1340:	77 1f       	adc	r23, r23
    1342:	88 1f       	adc	r24, r24
    1344:	c2 f7       	brpl	.-16     	; 0x1336 <__addsf3x+0x6a>
    1346:	0e c0       	rjmp	.+28     	; 0x1364 <__addsf3x+0x98>
    1348:	ba 0f       	add	r27, r26
    134a:	62 1f       	adc	r22, r18
    134c:	73 1f       	adc	r23, r19
    134e:	84 1f       	adc	r24, r20
    1350:	48 f4       	brcc	.+18     	; 0x1364 <__addsf3x+0x98>
    1352:	87 95       	ror	r24
    1354:	77 95       	ror	r23
    1356:	67 95       	ror	r22
    1358:	b7 95       	ror	r27
    135a:	f7 95       	ror	r31
    135c:	9e 3f       	cpi	r25, 0xFE	; 254
    135e:	08 f0       	brcs	.+2      	; 0x1362 <__addsf3x+0x96>
    1360:	b3 cf       	rjmp	.-154    	; 0x12c8 <__addsf3+0x1e>
    1362:	93 95       	inc	r25
    1364:	88 0f       	add	r24, r24
    1366:	08 f0       	brcs	.+2      	; 0x136a <__addsf3x+0x9e>
    1368:	99 27       	eor	r25, r25
    136a:	ee 0f       	add	r30, r30
    136c:	97 95       	ror	r25
    136e:	87 95       	ror	r24
    1370:	08 95       	ret

00001372 <__cmpsf2>:
    1372:	d9 d0       	rcall	.+434    	; 0x1526 <__fp_cmp>
    1374:	08 f4       	brcc	.+2      	; 0x1378 <__cmpsf2+0x6>
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	08 95       	ret

0000137a <__divsf3>:
    137a:	0c d0       	rcall	.+24     	; 0x1394 <__divsf3x>
    137c:	0f c1       	rjmp	.+542    	; 0x159c <__fp_round>
    137e:	07 d1       	rcall	.+526    	; 0x158e <__fp_pscB>
    1380:	40 f0       	brcs	.+16     	; 0x1392 <__divsf3+0x18>
    1382:	fe d0       	rcall	.+508    	; 0x1580 <__fp_pscA>
    1384:	30 f0       	brcs	.+12     	; 0x1392 <__divsf3+0x18>
    1386:	21 f4       	brne	.+8      	; 0x1390 <__divsf3+0x16>
    1388:	5f 3f       	cpi	r21, 0xFF	; 255
    138a:	19 f0       	breq	.+6      	; 0x1392 <__divsf3+0x18>
    138c:	f0 c0       	rjmp	.+480    	; 0x156e <__fp_inf>
    138e:	51 11       	cpse	r21, r1
    1390:	39 c1       	rjmp	.+626    	; 0x1604 <__fp_szero>
    1392:	f3 c0       	rjmp	.+486    	; 0x157a <__fp_nan>

00001394 <__divsf3x>:
    1394:	14 d1       	rcall	.+552    	; 0x15be <__fp_split3>
    1396:	98 f3       	brcs	.-26     	; 0x137e <__divsf3+0x4>

00001398 <__divsf3_pse>:
    1398:	99 23       	and	r25, r25
    139a:	c9 f3       	breq	.-14     	; 0x138e <__divsf3+0x14>
    139c:	55 23       	and	r21, r21
    139e:	b1 f3       	breq	.-20     	; 0x138c <__divsf3+0x12>
    13a0:	95 1b       	sub	r25, r21
    13a2:	55 0b       	sbc	r21, r21
    13a4:	bb 27       	eor	r27, r27
    13a6:	aa 27       	eor	r26, r26
    13a8:	62 17       	cp	r22, r18
    13aa:	73 07       	cpc	r23, r19
    13ac:	84 07       	cpc	r24, r20
    13ae:	38 f0       	brcs	.+14     	; 0x13be <__divsf3_pse+0x26>
    13b0:	9f 5f       	subi	r25, 0xFF	; 255
    13b2:	5f 4f       	sbci	r21, 0xFF	; 255
    13b4:	22 0f       	add	r18, r18
    13b6:	33 1f       	adc	r19, r19
    13b8:	44 1f       	adc	r20, r20
    13ba:	aa 1f       	adc	r26, r26
    13bc:	a9 f3       	breq	.-22     	; 0x13a8 <__divsf3_pse+0x10>
    13be:	33 d0       	rcall	.+102    	; 0x1426 <__divsf3_pse+0x8e>
    13c0:	0e 2e       	mov	r0, r30
    13c2:	3a f0       	brmi	.+14     	; 0x13d2 <__divsf3_pse+0x3a>
    13c4:	e0 e8       	ldi	r30, 0x80	; 128
    13c6:	30 d0       	rcall	.+96     	; 0x1428 <__divsf3_pse+0x90>
    13c8:	91 50       	subi	r25, 0x01	; 1
    13ca:	50 40       	sbci	r21, 0x00	; 0
    13cc:	e6 95       	lsr	r30
    13ce:	00 1c       	adc	r0, r0
    13d0:	ca f7       	brpl	.-14     	; 0x13c4 <__divsf3_pse+0x2c>
    13d2:	29 d0       	rcall	.+82     	; 0x1426 <__divsf3_pse+0x8e>
    13d4:	fe 2f       	mov	r31, r30
    13d6:	27 d0       	rcall	.+78     	; 0x1426 <__divsf3_pse+0x8e>
    13d8:	66 0f       	add	r22, r22
    13da:	77 1f       	adc	r23, r23
    13dc:	88 1f       	adc	r24, r24
    13de:	bb 1f       	adc	r27, r27
    13e0:	26 17       	cp	r18, r22
    13e2:	37 07       	cpc	r19, r23
    13e4:	48 07       	cpc	r20, r24
    13e6:	ab 07       	cpc	r26, r27
    13e8:	b0 e8       	ldi	r27, 0x80	; 128
    13ea:	09 f0       	breq	.+2      	; 0x13ee <__divsf3_pse+0x56>
    13ec:	bb 0b       	sbc	r27, r27
    13ee:	80 2d       	mov	r24, r0
    13f0:	bf 01       	movw	r22, r30
    13f2:	ff 27       	eor	r31, r31
    13f4:	93 58       	subi	r25, 0x83	; 131
    13f6:	5f 4f       	sbci	r21, 0xFF	; 255
    13f8:	2a f0       	brmi	.+10     	; 0x1404 <__divsf3_pse+0x6c>
    13fa:	9e 3f       	cpi	r25, 0xFE	; 254
    13fc:	51 05       	cpc	r21, r1
    13fe:	68 f0       	brcs	.+26     	; 0x141a <__divsf3_pse+0x82>
    1400:	b6 c0       	rjmp	.+364    	; 0x156e <__fp_inf>
    1402:	00 c1       	rjmp	.+512    	; 0x1604 <__fp_szero>
    1404:	5f 3f       	cpi	r21, 0xFF	; 255
    1406:	ec f3       	brlt	.-6      	; 0x1402 <__divsf3_pse+0x6a>
    1408:	98 3e       	cpi	r25, 0xE8	; 232
    140a:	dc f3       	brlt	.-10     	; 0x1402 <__divsf3_pse+0x6a>
    140c:	86 95       	lsr	r24
    140e:	77 95       	ror	r23
    1410:	67 95       	ror	r22
    1412:	b7 95       	ror	r27
    1414:	f7 95       	ror	r31
    1416:	9f 5f       	subi	r25, 0xFF	; 255
    1418:	c9 f7       	brne	.-14     	; 0x140c <__divsf3_pse+0x74>
    141a:	88 0f       	add	r24, r24
    141c:	91 1d       	adc	r25, r1
    141e:	96 95       	lsr	r25
    1420:	87 95       	ror	r24
    1422:	97 f9       	bld	r25, 7
    1424:	08 95       	ret
    1426:	e1 e0       	ldi	r30, 0x01	; 1
    1428:	66 0f       	add	r22, r22
    142a:	77 1f       	adc	r23, r23
    142c:	88 1f       	adc	r24, r24
    142e:	bb 1f       	adc	r27, r27
    1430:	62 17       	cp	r22, r18
    1432:	73 07       	cpc	r23, r19
    1434:	84 07       	cpc	r24, r20
    1436:	ba 07       	cpc	r27, r26
    1438:	20 f0       	brcs	.+8      	; 0x1442 <__divsf3_pse+0xaa>
    143a:	62 1b       	sub	r22, r18
    143c:	73 0b       	sbc	r23, r19
    143e:	84 0b       	sbc	r24, r20
    1440:	ba 0b       	sbc	r27, r26
    1442:	ee 1f       	adc	r30, r30
    1444:	88 f7       	brcc	.-30     	; 0x1428 <__divsf3_pse+0x90>
    1446:	e0 95       	com	r30
    1448:	08 95       	ret

0000144a <__fixsfsi>:
    144a:	04 d0       	rcall	.+8      	; 0x1454 <__fixunssfsi>
    144c:	68 94       	set
    144e:	b1 11       	cpse	r27, r1
    1450:	d9 c0       	rjmp	.+434    	; 0x1604 <__fp_szero>
    1452:	08 95       	ret

00001454 <__fixunssfsi>:
    1454:	bc d0       	rcall	.+376    	; 0x15ce <__fp_splitA>
    1456:	88 f0       	brcs	.+34     	; 0x147a <__fixunssfsi+0x26>
    1458:	9f 57       	subi	r25, 0x7F	; 127
    145a:	90 f0       	brcs	.+36     	; 0x1480 <__fixunssfsi+0x2c>
    145c:	b9 2f       	mov	r27, r25
    145e:	99 27       	eor	r25, r25
    1460:	b7 51       	subi	r27, 0x17	; 23
    1462:	a0 f0       	brcs	.+40     	; 0x148c <__fixunssfsi+0x38>
    1464:	d1 f0       	breq	.+52     	; 0x149a <__fixunssfsi+0x46>
    1466:	66 0f       	add	r22, r22
    1468:	77 1f       	adc	r23, r23
    146a:	88 1f       	adc	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	1a f0       	brmi	.+6      	; 0x1476 <__fixunssfsi+0x22>
    1470:	ba 95       	dec	r27
    1472:	c9 f7       	brne	.-14     	; 0x1466 <__fixunssfsi+0x12>
    1474:	12 c0       	rjmp	.+36     	; 0x149a <__fixunssfsi+0x46>
    1476:	b1 30       	cpi	r27, 0x01	; 1
    1478:	81 f0       	breq	.+32     	; 0x149a <__fixunssfsi+0x46>
    147a:	c3 d0       	rcall	.+390    	; 0x1602 <__fp_zero>
    147c:	b1 e0       	ldi	r27, 0x01	; 1
    147e:	08 95       	ret
    1480:	c0 c0       	rjmp	.+384    	; 0x1602 <__fp_zero>
    1482:	67 2f       	mov	r22, r23
    1484:	78 2f       	mov	r23, r24
    1486:	88 27       	eor	r24, r24
    1488:	b8 5f       	subi	r27, 0xF8	; 248
    148a:	39 f0       	breq	.+14     	; 0x149a <__fixunssfsi+0x46>
    148c:	b9 3f       	cpi	r27, 0xF9	; 249
    148e:	cc f3       	brlt	.-14     	; 0x1482 <__fixunssfsi+0x2e>
    1490:	86 95       	lsr	r24
    1492:	77 95       	ror	r23
    1494:	67 95       	ror	r22
    1496:	b3 95       	inc	r27
    1498:	d9 f7       	brne	.-10     	; 0x1490 <__fixunssfsi+0x3c>
    149a:	3e f4       	brtc	.+14     	; 0x14aa <__fixunssfsi+0x56>
    149c:	90 95       	com	r25
    149e:	80 95       	com	r24
    14a0:	70 95       	com	r23
    14a2:	61 95       	neg	r22
    14a4:	7f 4f       	sbci	r23, 0xFF	; 255
    14a6:	8f 4f       	sbci	r24, 0xFF	; 255
    14a8:	9f 4f       	sbci	r25, 0xFF	; 255
    14aa:	08 95       	ret

000014ac <__floatunsisf>:
    14ac:	e8 94       	clt
    14ae:	09 c0       	rjmp	.+18     	; 0x14c2 <__floatsisf+0x12>

000014b0 <__floatsisf>:
    14b0:	97 fb       	bst	r25, 7
    14b2:	3e f4       	brtc	.+14     	; 0x14c2 <__floatsisf+0x12>
    14b4:	90 95       	com	r25
    14b6:	80 95       	com	r24
    14b8:	70 95       	com	r23
    14ba:	61 95       	neg	r22
    14bc:	7f 4f       	sbci	r23, 0xFF	; 255
    14be:	8f 4f       	sbci	r24, 0xFF	; 255
    14c0:	9f 4f       	sbci	r25, 0xFF	; 255
    14c2:	99 23       	and	r25, r25
    14c4:	a9 f0       	breq	.+42     	; 0x14f0 <__floatsisf+0x40>
    14c6:	f9 2f       	mov	r31, r25
    14c8:	96 e9       	ldi	r25, 0x96	; 150
    14ca:	bb 27       	eor	r27, r27
    14cc:	93 95       	inc	r25
    14ce:	f6 95       	lsr	r31
    14d0:	87 95       	ror	r24
    14d2:	77 95       	ror	r23
    14d4:	67 95       	ror	r22
    14d6:	b7 95       	ror	r27
    14d8:	f1 11       	cpse	r31, r1
    14da:	f8 cf       	rjmp	.-16     	; 0x14cc <__floatsisf+0x1c>
    14dc:	fa f4       	brpl	.+62     	; 0x151c <__floatsisf+0x6c>
    14de:	bb 0f       	add	r27, r27
    14e0:	11 f4       	brne	.+4      	; 0x14e6 <__floatsisf+0x36>
    14e2:	60 ff       	sbrs	r22, 0
    14e4:	1b c0       	rjmp	.+54     	; 0x151c <__floatsisf+0x6c>
    14e6:	6f 5f       	subi	r22, 0xFF	; 255
    14e8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ea:	8f 4f       	sbci	r24, 0xFF	; 255
    14ec:	9f 4f       	sbci	r25, 0xFF	; 255
    14ee:	16 c0       	rjmp	.+44     	; 0x151c <__floatsisf+0x6c>
    14f0:	88 23       	and	r24, r24
    14f2:	11 f0       	breq	.+4      	; 0x14f8 <__floatsisf+0x48>
    14f4:	96 e9       	ldi	r25, 0x96	; 150
    14f6:	11 c0       	rjmp	.+34     	; 0x151a <__floatsisf+0x6a>
    14f8:	77 23       	and	r23, r23
    14fa:	21 f0       	breq	.+8      	; 0x1504 <__floatsisf+0x54>
    14fc:	9e e8       	ldi	r25, 0x8E	; 142
    14fe:	87 2f       	mov	r24, r23
    1500:	76 2f       	mov	r23, r22
    1502:	05 c0       	rjmp	.+10     	; 0x150e <__floatsisf+0x5e>
    1504:	66 23       	and	r22, r22
    1506:	71 f0       	breq	.+28     	; 0x1524 <__floatsisf+0x74>
    1508:	96 e8       	ldi	r25, 0x86	; 134
    150a:	86 2f       	mov	r24, r22
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	2a f0       	brmi	.+10     	; 0x151c <__floatsisf+0x6c>
    1512:	9a 95       	dec	r25
    1514:	66 0f       	add	r22, r22
    1516:	77 1f       	adc	r23, r23
    1518:	88 1f       	adc	r24, r24
    151a:	da f7       	brpl	.-10     	; 0x1512 <__floatsisf+0x62>
    151c:	88 0f       	add	r24, r24
    151e:	96 95       	lsr	r25
    1520:	87 95       	ror	r24
    1522:	97 f9       	bld	r25, 7
    1524:	08 95       	ret

00001526 <__fp_cmp>:
    1526:	99 0f       	add	r25, r25
    1528:	00 08       	sbc	r0, r0
    152a:	55 0f       	add	r21, r21
    152c:	aa 0b       	sbc	r26, r26
    152e:	e0 e8       	ldi	r30, 0x80	; 128
    1530:	fe ef       	ldi	r31, 0xFE	; 254
    1532:	16 16       	cp	r1, r22
    1534:	17 06       	cpc	r1, r23
    1536:	e8 07       	cpc	r30, r24
    1538:	f9 07       	cpc	r31, r25
    153a:	c0 f0       	brcs	.+48     	; 0x156c <__fp_cmp+0x46>
    153c:	12 16       	cp	r1, r18
    153e:	13 06       	cpc	r1, r19
    1540:	e4 07       	cpc	r30, r20
    1542:	f5 07       	cpc	r31, r21
    1544:	98 f0       	brcs	.+38     	; 0x156c <__fp_cmp+0x46>
    1546:	62 1b       	sub	r22, r18
    1548:	73 0b       	sbc	r23, r19
    154a:	84 0b       	sbc	r24, r20
    154c:	95 0b       	sbc	r25, r21
    154e:	39 f4       	brne	.+14     	; 0x155e <__fp_cmp+0x38>
    1550:	0a 26       	eor	r0, r26
    1552:	61 f0       	breq	.+24     	; 0x156c <__fp_cmp+0x46>
    1554:	23 2b       	or	r18, r19
    1556:	24 2b       	or	r18, r20
    1558:	25 2b       	or	r18, r21
    155a:	21 f4       	brne	.+8      	; 0x1564 <__fp_cmp+0x3e>
    155c:	08 95       	ret
    155e:	0a 26       	eor	r0, r26
    1560:	09 f4       	brne	.+2      	; 0x1564 <__fp_cmp+0x3e>
    1562:	a1 40       	sbci	r26, 0x01	; 1
    1564:	a6 95       	lsr	r26
    1566:	8f ef       	ldi	r24, 0xFF	; 255
    1568:	81 1d       	adc	r24, r1
    156a:	81 1d       	adc	r24, r1
    156c:	08 95       	ret

0000156e <__fp_inf>:
    156e:	97 f9       	bld	r25, 7
    1570:	9f 67       	ori	r25, 0x7F	; 127
    1572:	80 e8       	ldi	r24, 0x80	; 128
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	08 95       	ret

0000157a <__fp_nan>:
    157a:	9f ef       	ldi	r25, 0xFF	; 255
    157c:	80 ec       	ldi	r24, 0xC0	; 192
    157e:	08 95       	ret

00001580 <__fp_pscA>:
    1580:	00 24       	eor	r0, r0
    1582:	0a 94       	dec	r0
    1584:	16 16       	cp	r1, r22
    1586:	17 06       	cpc	r1, r23
    1588:	18 06       	cpc	r1, r24
    158a:	09 06       	cpc	r0, r25
    158c:	08 95       	ret

0000158e <__fp_pscB>:
    158e:	00 24       	eor	r0, r0
    1590:	0a 94       	dec	r0
    1592:	12 16       	cp	r1, r18
    1594:	13 06       	cpc	r1, r19
    1596:	14 06       	cpc	r1, r20
    1598:	05 06       	cpc	r0, r21
    159a:	08 95       	ret

0000159c <__fp_round>:
    159c:	09 2e       	mov	r0, r25
    159e:	03 94       	inc	r0
    15a0:	00 0c       	add	r0, r0
    15a2:	11 f4       	brne	.+4      	; 0x15a8 <__fp_round+0xc>
    15a4:	88 23       	and	r24, r24
    15a6:	52 f0       	brmi	.+20     	; 0x15bc <__fp_round+0x20>
    15a8:	bb 0f       	add	r27, r27
    15aa:	40 f4       	brcc	.+16     	; 0x15bc <__fp_round+0x20>
    15ac:	bf 2b       	or	r27, r31
    15ae:	11 f4       	brne	.+4      	; 0x15b4 <__fp_round+0x18>
    15b0:	60 ff       	sbrs	r22, 0
    15b2:	04 c0       	rjmp	.+8      	; 0x15bc <__fp_round+0x20>
    15b4:	6f 5f       	subi	r22, 0xFF	; 255
    15b6:	7f 4f       	sbci	r23, 0xFF	; 255
    15b8:	8f 4f       	sbci	r24, 0xFF	; 255
    15ba:	9f 4f       	sbci	r25, 0xFF	; 255
    15bc:	08 95       	ret

000015be <__fp_split3>:
    15be:	57 fd       	sbrc	r21, 7
    15c0:	90 58       	subi	r25, 0x80	; 128
    15c2:	44 0f       	add	r20, r20
    15c4:	55 1f       	adc	r21, r21
    15c6:	59 f0       	breq	.+22     	; 0x15de <__fp_splitA+0x10>
    15c8:	5f 3f       	cpi	r21, 0xFF	; 255
    15ca:	71 f0       	breq	.+28     	; 0x15e8 <__fp_splitA+0x1a>
    15cc:	47 95       	ror	r20

000015ce <__fp_splitA>:
    15ce:	88 0f       	add	r24, r24
    15d0:	97 fb       	bst	r25, 7
    15d2:	99 1f       	adc	r25, r25
    15d4:	61 f0       	breq	.+24     	; 0x15ee <__fp_splitA+0x20>
    15d6:	9f 3f       	cpi	r25, 0xFF	; 255
    15d8:	79 f0       	breq	.+30     	; 0x15f8 <__fp_splitA+0x2a>
    15da:	87 95       	ror	r24
    15dc:	08 95       	ret
    15de:	12 16       	cp	r1, r18
    15e0:	13 06       	cpc	r1, r19
    15e2:	14 06       	cpc	r1, r20
    15e4:	55 1f       	adc	r21, r21
    15e6:	f2 cf       	rjmp	.-28     	; 0x15cc <__fp_split3+0xe>
    15e8:	46 95       	lsr	r20
    15ea:	f1 df       	rcall	.-30     	; 0x15ce <__fp_splitA>
    15ec:	08 c0       	rjmp	.+16     	; 0x15fe <__fp_splitA+0x30>
    15ee:	16 16       	cp	r1, r22
    15f0:	17 06       	cpc	r1, r23
    15f2:	18 06       	cpc	r1, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	f1 cf       	rjmp	.-30     	; 0x15da <__fp_splitA+0xc>
    15f8:	86 95       	lsr	r24
    15fa:	71 05       	cpc	r23, r1
    15fc:	61 05       	cpc	r22, r1
    15fe:	08 94       	sec
    1600:	08 95       	ret

00001602 <__fp_zero>:
    1602:	e8 94       	clt

00001604 <__fp_szero>:
    1604:	bb 27       	eor	r27, r27
    1606:	66 27       	eor	r22, r22
    1608:	77 27       	eor	r23, r23
    160a:	cb 01       	movw	r24, r22
    160c:	97 f9       	bld	r25, 7
    160e:	08 95       	ret

00001610 <__gesf2>:
    1610:	8a df       	rcall	.-236    	; 0x1526 <__fp_cmp>
    1612:	08 f4       	brcc	.+2      	; 0x1616 <__gesf2+0x6>
    1614:	8f ef       	ldi	r24, 0xFF	; 255
    1616:	08 95       	ret

00001618 <__mulsf3>:
    1618:	0b d0       	rcall	.+22     	; 0x1630 <__mulsf3x>
    161a:	c0 cf       	rjmp	.-128    	; 0x159c <__fp_round>
    161c:	b1 df       	rcall	.-158    	; 0x1580 <__fp_pscA>
    161e:	28 f0       	brcs	.+10     	; 0x162a <__mulsf3+0x12>
    1620:	b6 df       	rcall	.-148    	; 0x158e <__fp_pscB>
    1622:	18 f0       	brcs	.+6      	; 0x162a <__mulsf3+0x12>
    1624:	95 23       	and	r25, r21
    1626:	09 f0       	breq	.+2      	; 0x162a <__mulsf3+0x12>
    1628:	a2 cf       	rjmp	.-188    	; 0x156e <__fp_inf>
    162a:	a7 cf       	rjmp	.-178    	; 0x157a <__fp_nan>
    162c:	11 24       	eor	r1, r1
    162e:	ea cf       	rjmp	.-44     	; 0x1604 <__fp_szero>

00001630 <__mulsf3x>:
    1630:	c6 df       	rcall	.-116    	; 0x15be <__fp_split3>
    1632:	a0 f3       	brcs	.-24     	; 0x161c <__mulsf3+0x4>

00001634 <__mulsf3_pse>:
    1634:	95 9f       	mul	r25, r21
    1636:	d1 f3       	breq	.-12     	; 0x162c <__mulsf3+0x14>
    1638:	95 0f       	add	r25, r21
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	55 1f       	adc	r21, r21
    163e:	62 9f       	mul	r22, r18
    1640:	f0 01       	movw	r30, r0
    1642:	72 9f       	mul	r23, r18
    1644:	bb 27       	eor	r27, r27
    1646:	f0 0d       	add	r31, r0
    1648:	b1 1d       	adc	r27, r1
    164a:	63 9f       	mul	r22, r19
    164c:	aa 27       	eor	r26, r26
    164e:	f0 0d       	add	r31, r0
    1650:	b1 1d       	adc	r27, r1
    1652:	aa 1f       	adc	r26, r26
    1654:	64 9f       	mul	r22, r20
    1656:	66 27       	eor	r22, r22
    1658:	b0 0d       	add	r27, r0
    165a:	a1 1d       	adc	r26, r1
    165c:	66 1f       	adc	r22, r22
    165e:	82 9f       	mul	r24, r18
    1660:	22 27       	eor	r18, r18
    1662:	b0 0d       	add	r27, r0
    1664:	a1 1d       	adc	r26, r1
    1666:	62 1f       	adc	r22, r18
    1668:	73 9f       	mul	r23, r19
    166a:	b0 0d       	add	r27, r0
    166c:	a1 1d       	adc	r26, r1
    166e:	62 1f       	adc	r22, r18
    1670:	83 9f       	mul	r24, r19
    1672:	a0 0d       	add	r26, r0
    1674:	61 1d       	adc	r22, r1
    1676:	22 1f       	adc	r18, r18
    1678:	74 9f       	mul	r23, r20
    167a:	33 27       	eor	r19, r19
    167c:	a0 0d       	add	r26, r0
    167e:	61 1d       	adc	r22, r1
    1680:	23 1f       	adc	r18, r19
    1682:	84 9f       	mul	r24, r20
    1684:	60 0d       	add	r22, r0
    1686:	21 1d       	adc	r18, r1
    1688:	82 2f       	mov	r24, r18
    168a:	76 2f       	mov	r23, r22
    168c:	6a 2f       	mov	r22, r26
    168e:	11 24       	eor	r1, r1
    1690:	9f 57       	subi	r25, 0x7F	; 127
    1692:	50 40       	sbci	r21, 0x00	; 0
    1694:	8a f0       	brmi	.+34     	; 0x16b8 <__mulsf3_pse+0x84>
    1696:	e1 f0       	breq	.+56     	; 0x16d0 <__mulsf3_pse+0x9c>
    1698:	88 23       	and	r24, r24
    169a:	4a f0       	brmi	.+18     	; 0x16ae <__mulsf3_pse+0x7a>
    169c:	ee 0f       	add	r30, r30
    169e:	ff 1f       	adc	r31, r31
    16a0:	bb 1f       	adc	r27, r27
    16a2:	66 1f       	adc	r22, r22
    16a4:	77 1f       	adc	r23, r23
    16a6:	88 1f       	adc	r24, r24
    16a8:	91 50       	subi	r25, 0x01	; 1
    16aa:	50 40       	sbci	r21, 0x00	; 0
    16ac:	a9 f7       	brne	.-22     	; 0x1698 <__mulsf3_pse+0x64>
    16ae:	9e 3f       	cpi	r25, 0xFE	; 254
    16b0:	51 05       	cpc	r21, r1
    16b2:	70 f0       	brcs	.+28     	; 0x16d0 <__mulsf3_pse+0x9c>
    16b4:	5c cf       	rjmp	.-328    	; 0x156e <__fp_inf>
    16b6:	a6 cf       	rjmp	.-180    	; 0x1604 <__fp_szero>
    16b8:	5f 3f       	cpi	r21, 0xFF	; 255
    16ba:	ec f3       	brlt	.-6      	; 0x16b6 <__mulsf3_pse+0x82>
    16bc:	98 3e       	cpi	r25, 0xE8	; 232
    16be:	dc f3       	brlt	.-10     	; 0x16b6 <__mulsf3_pse+0x82>
    16c0:	86 95       	lsr	r24
    16c2:	77 95       	ror	r23
    16c4:	67 95       	ror	r22
    16c6:	b7 95       	ror	r27
    16c8:	f7 95       	ror	r31
    16ca:	e7 95       	ror	r30
    16cc:	9f 5f       	subi	r25, 0xFF	; 255
    16ce:	c1 f7       	brne	.-16     	; 0x16c0 <__mulsf3_pse+0x8c>
    16d0:	fe 2b       	or	r31, r30
    16d2:	88 0f       	add	r24, r24
    16d4:	91 1d       	adc	r25, r1
    16d6:	96 95       	lsr	r25
    16d8:	87 95       	ror	r24
    16da:	97 f9       	bld	r25, 7
    16dc:	08 95       	ret

000016de <__unordsf2>:
    16de:	23 df       	rcall	.-442    	; 0x1526 <__fp_cmp>
    16e0:	88 0b       	sbc	r24, r24
    16e2:	99 0b       	sbc	r25, r25
    16e4:	08 95       	ret

000016e6 <__mulsi3>:
    16e6:	62 9f       	mul	r22, r18
    16e8:	d0 01       	movw	r26, r0
    16ea:	73 9f       	mul	r23, r19
    16ec:	f0 01       	movw	r30, r0
    16ee:	82 9f       	mul	r24, r18
    16f0:	e0 0d       	add	r30, r0
    16f2:	f1 1d       	adc	r31, r1
    16f4:	64 9f       	mul	r22, r20
    16f6:	e0 0d       	add	r30, r0
    16f8:	f1 1d       	adc	r31, r1
    16fa:	92 9f       	mul	r25, r18
    16fc:	f0 0d       	add	r31, r0
    16fe:	83 9f       	mul	r24, r19
    1700:	f0 0d       	add	r31, r0
    1702:	74 9f       	mul	r23, r20
    1704:	f0 0d       	add	r31, r0
    1706:	65 9f       	mul	r22, r21
    1708:	f0 0d       	add	r31, r0
    170a:	99 27       	eor	r25, r25
    170c:	72 9f       	mul	r23, r18
    170e:	b0 0d       	add	r27, r0
    1710:	e1 1d       	adc	r30, r1
    1712:	f9 1f       	adc	r31, r25
    1714:	63 9f       	mul	r22, r19
    1716:	b0 0d       	add	r27, r0
    1718:	e1 1d       	adc	r30, r1
    171a:	f9 1f       	adc	r31, r25
    171c:	bd 01       	movw	r22, r26
    171e:	cf 01       	movw	r24, r30
    1720:	11 24       	eor	r1, r1
    1722:	08 95       	ret

00001724 <__divmodhi4>:
    1724:	97 fb       	bst	r25, 7
    1726:	09 2e       	mov	r0, r25
    1728:	07 26       	eor	r0, r23
    172a:	0a d0       	rcall	.+20     	; 0x1740 <__divmodhi4_neg1>
    172c:	77 fd       	sbrc	r23, 7
    172e:	04 d0       	rcall	.+8      	; 0x1738 <__divmodhi4_neg2>
    1730:	2e d0       	rcall	.+92     	; 0x178e <__udivmodhi4>
    1732:	06 d0       	rcall	.+12     	; 0x1740 <__divmodhi4_neg1>
    1734:	00 20       	and	r0, r0
    1736:	1a f4       	brpl	.+6      	; 0x173e <__divmodhi4_exit>

00001738 <__divmodhi4_neg2>:
    1738:	70 95       	com	r23
    173a:	61 95       	neg	r22
    173c:	7f 4f       	sbci	r23, 0xFF	; 255

0000173e <__divmodhi4_exit>:
    173e:	08 95       	ret

00001740 <__divmodhi4_neg1>:
    1740:	f6 f7       	brtc	.-4      	; 0x173e <__divmodhi4_exit>
    1742:	90 95       	com	r25
    1744:	81 95       	neg	r24
    1746:	9f 4f       	sbci	r25, 0xFF	; 255
    1748:	08 95       	ret

0000174a <__udivmodsi4>:
    174a:	a1 e2       	ldi	r26, 0x21	; 33
    174c:	1a 2e       	mov	r1, r26
    174e:	aa 1b       	sub	r26, r26
    1750:	bb 1b       	sub	r27, r27
    1752:	fd 01       	movw	r30, r26
    1754:	0d c0       	rjmp	.+26     	; 0x1770 <__udivmodsi4_ep>

00001756 <__udivmodsi4_loop>:
    1756:	aa 1f       	adc	r26, r26
    1758:	bb 1f       	adc	r27, r27
    175a:	ee 1f       	adc	r30, r30
    175c:	ff 1f       	adc	r31, r31
    175e:	a2 17       	cp	r26, r18
    1760:	b3 07       	cpc	r27, r19
    1762:	e4 07       	cpc	r30, r20
    1764:	f5 07       	cpc	r31, r21
    1766:	20 f0       	brcs	.+8      	; 0x1770 <__udivmodsi4_ep>
    1768:	a2 1b       	sub	r26, r18
    176a:	b3 0b       	sbc	r27, r19
    176c:	e4 0b       	sbc	r30, r20
    176e:	f5 0b       	sbc	r31, r21

00001770 <__udivmodsi4_ep>:
    1770:	66 1f       	adc	r22, r22
    1772:	77 1f       	adc	r23, r23
    1774:	88 1f       	adc	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	1a 94       	dec	r1
    177a:	69 f7       	brne	.-38     	; 0x1756 <__udivmodsi4_loop>
    177c:	60 95       	com	r22
    177e:	70 95       	com	r23
    1780:	80 95       	com	r24
    1782:	90 95       	com	r25
    1784:	9b 01       	movw	r18, r22
    1786:	ac 01       	movw	r20, r24
    1788:	bd 01       	movw	r22, r26
    178a:	cf 01       	movw	r24, r30
    178c:	08 95       	ret

0000178e <__udivmodhi4>:
    178e:	aa 1b       	sub	r26, r26
    1790:	bb 1b       	sub	r27, r27
    1792:	51 e1       	ldi	r21, 0x11	; 17
    1794:	07 c0       	rjmp	.+14     	; 0x17a4 <__udivmodhi4_ep>

00001796 <__udivmodhi4_loop>:
    1796:	aa 1f       	adc	r26, r26
    1798:	bb 1f       	adc	r27, r27
    179a:	a6 17       	cp	r26, r22
    179c:	b7 07       	cpc	r27, r23
    179e:	10 f0       	brcs	.+4      	; 0x17a4 <__udivmodhi4_ep>
    17a0:	a6 1b       	sub	r26, r22
    17a2:	b7 0b       	sbc	r27, r23

000017a4 <__udivmodhi4_ep>:
    17a4:	88 1f       	adc	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	5a 95       	dec	r21
    17aa:	a9 f7       	brne	.-22     	; 0x1796 <__udivmodhi4_loop>
    17ac:	80 95       	com	r24
    17ae:	90 95       	com	r25
    17b0:	bc 01       	movw	r22, r24
    17b2:	cd 01       	movw	r24, r26
    17b4:	08 95       	ret

000017b6 <__tablejump2__>:
    17b6:	ee 0f       	add	r30, r30
    17b8:	ff 1f       	adc	r31, r31

000017ba <__tablejump__>:
    17ba:	05 90       	lpm	r0, Z+
    17bc:	f4 91       	lpm	r31, Z+
    17be:	e0 2d       	mov	r30, r0
    17c0:	09 94       	ijmp

000017c2 <_exit>:
    17c2:	f8 94       	cli

000017c4 <__stop_program>:
    17c4:	ff cf       	rjmp	.-2      	; 0x17c4 <__stop_program>
