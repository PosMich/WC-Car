// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug.proto

#ifndef PROTOBUF_debug_2eproto__INCLUDED
#define PROTOBUF_debug_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace webrtc {
namespace audioproc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_debug_2eproto();
void protobuf_AssignDesc_debug_2eproto();
void protobuf_ShutdownFile_debug_2eproto();

class Init;
class ReverseStream;
class Stream;
class Event;

enum Event_Type {
  Event_Type_INIT = 0,
  Event_Type_REVERSE_STREAM = 1,
  Event_Type_STREAM = 2
};
bool Event_Type_IsValid(int value);
const Event_Type Event_Type_Type_MIN = Event_Type_INIT;
const Event_Type Event_Type_Type_MAX = Event_Type_STREAM;
const int Event_Type_Type_ARRAYSIZE = Event_Type_Type_MAX + 1;

// ===================================================================

class Init : public ::google::protobuf::MessageLite {
 public:
  Init();
  virtual ~Init();

  Init(const Init& from);

  inline Init& operator=(const Init& from) {
    CopyFrom(from);
    return *this;
  }

  static const Init& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Init* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Init* other);

  // implements Message ----------------------------------------------

  Init* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Init& from);
  void MergeFrom(const Init& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sample_rate = 1;
  inline bool has_sample_rate() const;
  inline void clear_sample_rate();
  static const int kSampleRateFieldNumber = 1;
  inline ::google::protobuf::int32 sample_rate() const;
  inline void set_sample_rate(::google::protobuf::int32 value);

  // optional int32 device_sample_rate = 2;
  inline bool has_device_sample_rate() const;
  inline void clear_device_sample_rate();
  static const int kDeviceSampleRateFieldNumber = 2;
  inline ::google::protobuf::int32 device_sample_rate() const;
  inline void set_device_sample_rate(::google::protobuf::int32 value);

  // optional int32 num_input_channels = 3;
  inline bool has_num_input_channels() const;
  inline void clear_num_input_channels();
  static const int kNumInputChannelsFieldNumber = 3;
  inline ::google::protobuf::int32 num_input_channels() const;
  inline void set_num_input_channels(::google::protobuf::int32 value);

  // optional int32 num_output_channels = 4;
  inline bool has_num_output_channels() const;
  inline void clear_num_output_channels();
  static const int kNumOutputChannelsFieldNumber = 4;
  inline ::google::protobuf::int32 num_output_channels() const;
  inline void set_num_output_channels(::google::protobuf::int32 value);

  // optional int32 num_reverse_channels = 5;
  inline bool has_num_reverse_channels() const;
  inline void clear_num_reverse_channels();
  static const int kNumReverseChannelsFieldNumber = 5;
  inline ::google::protobuf::int32 num_reverse_channels() const;
  inline void set_num_reverse_channels(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.audioproc.Init)
 private:
  inline void set_has_sample_rate();
  inline void clear_has_sample_rate();
  inline void set_has_device_sample_rate();
  inline void clear_has_device_sample_rate();
  inline void set_has_num_input_channels();
  inline void clear_has_num_input_channels();
  inline void set_has_num_output_channels();
  inline void clear_has_num_output_channels();
  inline void set_has_num_reverse_channels();
  inline void clear_has_num_reverse_channels();

  ::google::protobuf::int32 sample_rate_;
  ::google::protobuf::int32 device_sample_rate_;
  ::google::protobuf::int32 num_input_channels_;
  ::google::protobuf::int32 num_output_channels_;
  ::google::protobuf::int32 num_reverse_channels_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_debug_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_debug_2eproto();
  #endif
  friend void protobuf_AssignDesc_debug_2eproto();
  friend void protobuf_ShutdownFile_debug_2eproto();

  void InitAsDefaultInstance();
  static Init* default_instance_;
};
// -------------------------------------------------------------------

class ReverseStream : public ::google::protobuf::MessageLite {
 public:
  ReverseStream();
  virtual ~ReverseStream();

  ReverseStream(const ReverseStream& from);

  inline ReverseStream& operator=(const ReverseStream& from) {
    CopyFrom(from);
    return *this;
  }

  static const ReverseStream& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ReverseStream* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ReverseStream* other);

  // implements Message ----------------------------------------------

  ReverseStream* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ReverseStream& from);
  void MergeFrom(const ReverseStream& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:webrtc.audioproc.ReverseStream)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_debug_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_debug_2eproto();
  #endif
  friend void protobuf_AssignDesc_debug_2eproto();
  friend void protobuf_ShutdownFile_debug_2eproto();

  void InitAsDefaultInstance();
  static ReverseStream* default_instance_;
};
// -------------------------------------------------------------------

class Stream : public ::google::protobuf::MessageLite {
 public:
  Stream();
  virtual ~Stream();

  Stream(const Stream& from);

  inline Stream& operator=(const Stream& from) {
    CopyFrom(from);
    return *this;
  }

  static const Stream& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Stream* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Stream* other);

  // implements Message ----------------------------------------------

  Stream* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Stream& from);
  void MergeFrom(const Stream& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes input_data = 1;
  inline bool has_input_data() const;
  inline void clear_input_data();
  static const int kInputDataFieldNumber = 1;
  inline const ::std::string& input_data() const;
  inline void set_input_data(const ::std::string& value);
  inline void set_input_data(const char* value);
  inline void set_input_data(const void* value, size_t size);
  inline ::std::string* mutable_input_data();
  inline ::std::string* release_input_data();
  inline void set_allocated_input_data(::std::string* input_data);

  // optional bytes output_data = 2;
  inline bool has_output_data() const;
  inline void clear_output_data();
  static const int kOutputDataFieldNumber = 2;
  inline const ::std::string& output_data() const;
  inline void set_output_data(const ::std::string& value);
  inline void set_output_data(const char* value);
  inline void set_output_data(const void* value, size_t size);
  inline ::std::string* mutable_output_data();
  inline ::std::string* release_output_data();
  inline void set_allocated_output_data(::std::string* output_data);

  // optional int32 delay = 3;
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 3;
  inline ::google::protobuf::int32 delay() const;
  inline void set_delay(::google::protobuf::int32 value);

  // optional sint32 drift = 4;
  inline bool has_drift() const;
  inline void clear_drift();
  static const int kDriftFieldNumber = 4;
  inline ::google::protobuf::int32 drift() const;
  inline void set_drift(::google::protobuf::int32 value);

  // optional int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.audioproc.Stream)
 private:
  inline void set_has_input_data();
  inline void clear_has_input_data();
  inline void set_has_output_data();
  inline void clear_has_output_data();
  inline void set_has_delay();
  inline void clear_has_delay();
  inline void set_has_drift();
  inline void clear_has_drift();
  inline void set_has_level();
  inline void clear_has_level();

  ::std::string* input_data_;
  ::std::string* output_data_;
  ::google::protobuf::int32 delay_;
  ::google::protobuf::int32 drift_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_debug_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_debug_2eproto();
  #endif
  friend void protobuf_AssignDesc_debug_2eproto();
  friend void protobuf_ShutdownFile_debug_2eproto();

  void InitAsDefaultInstance();
  static Stream* default_instance_;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::MessageLite {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }

  static const Event& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Event* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Event* other);

  // implements Message ----------------------------------------------

  Event* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Event_Type Type;
  static const Type INIT = Event_Type_INIT;
  static const Type REVERSE_STREAM = Event_Type_REVERSE_STREAM;
  static const Type STREAM = Event_Type_STREAM;
  static inline bool Type_IsValid(int value) {
    return Event_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Event_Type_Type_MIN;
  static const Type Type_MAX =
    Event_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Event_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required .webrtc.audioproc.Event.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::webrtc::audioproc::Event_Type type() const;
  inline void set_type(::webrtc::audioproc::Event_Type value);

  // optional .webrtc.audioproc.Init init = 2;
  inline bool has_init() const;
  inline void clear_init();
  static const int kInitFieldNumber = 2;
  inline const ::webrtc::audioproc::Init& init() const;
  inline ::webrtc::audioproc::Init* mutable_init();
  inline ::webrtc::audioproc::Init* release_init();
  inline void set_allocated_init(::webrtc::audioproc::Init* init);

  // optional .webrtc.audioproc.ReverseStream reverse_stream = 3;
  inline bool has_reverse_stream() const;
  inline void clear_reverse_stream();
  static const int kReverseStreamFieldNumber = 3;
  inline const ::webrtc::audioproc::ReverseStream& reverse_stream() const;
  inline ::webrtc::audioproc::ReverseStream* mutable_reverse_stream();
  inline ::webrtc::audioproc::ReverseStream* release_reverse_stream();
  inline void set_allocated_reverse_stream(::webrtc::audioproc::ReverseStream* reverse_stream);

  // optional .webrtc.audioproc.Stream stream = 4;
  inline bool has_stream() const;
  inline void clear_stream();
  static const int kStreamFieldNumber = 4;
  inline const ::webrtc::audioproc::Stream& stream() const;
  inline ::webrtc::audioproc::Stream* mutable_stream();
  inline ::webrtc::audioproc::Stream* release_stream();
  inline void set_allocated_stream(::webrtc::audioproc::Stream* stream);

  // @@protoc_insertion_point(class_scope:webrtc.audioproc.Event)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_init();
  inline void clear_has_init();
  inline void set_has_reverse_stream();
  inline void clear_has_reverse_stream();
  inline void set_has_stream();
  inline void clear_has_stream();

  ::webrtc::audioproc::Init* init_;
  ::webrtc::audioproc::ReverseStream* reverse_stream_;
  ::webrtc::audioproc::Stream* stream_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_debug_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_debug_2eproto();
  #endif
  friend void protobuf_AssignDesc_debug_2eproto();
  friend void protobuf_ShutdownFile_debug_2eproto();

  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// ===================================================================


// ===================================================================

// Init

// optional int32 sample_rate = 1;
inline bool Init::has_sample_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Init::set_has_sample_rate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Init::clear_has_sample_rate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Init::clear_sample_rate() {
  sample_rate_ = 0;
  clear_has_sample_rate();
}
inline ::google::protobuf::int32 Init::sample_rate() const {
  return sample_rate_;
}
inline void Init::set_sample_rate(::google::protobuf::int32 value) {
  set_has_sample_rate();
  sample_rate_ = value;
}

// optional int32 device_sample_rate = 2;
inline bool Init::has_device_sample_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Init::set_has_device_sample_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Init::clear_has_device_sample_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Init::clear_device_sample_rate() {
  device_sample_rate_ = 0;
  clear_has_device_sample_rate();
}
inline ::google::protobuf::int32 Init::device_sample_rate() const {
  return device_sample_rate_;
}
inline void Init::set_device_sample_rate(::google::protobuf::int32 value) {
  set_has_device_sample_rate();
  device_sample_rate_ = value;
}

// optional int32 num_input_channels = 3;
inline bool Init::has_num_input_channels() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Init::set_has_num_input_channels() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Init::clear_has_num_input_channels() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Init::clear_num_input_channels() {
  num_input_channels_ = 0;
  clear_has_num_input_channels();
}
inline ::google::protobuf::int32 Init::num_input_channels() const {
  return num_input_channels_;
}
inline void Init::set_num_input_channels(::google::protobuf::int32 value) {
  set_has_num_input_channels();
  num_input_channels_ = value;
}

// optional int32 num_output_channels = 4;
inline bool Init::has_num_output_channels() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Init::set_has_num_output_channels() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Init::clear_has_num_output_channels() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Init::clear_num_output_channels() {
  num_output_channels_ = 0;
  clear_has_num_output_channels();
}
inline ::google::protobuf::int32 Init::num_output_channels() const {
  return num_output_channels_;
}
inline void Init::set_num_output_channels(::google::protobuf::int32 value) {
  set_has_num_output_channels();
  num_output_channels_ = value;
}

// optional int32 num_reverse_channels = 5;
inline bool Init::has_num_reverse_channels() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Init::set_has_num_reverse_channels() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Init::clear_has_num_reverse_channels() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Init::clear_num_reverse_channels() {
  num_reverse_channels_ = 0;
  clear_has_num_reverse_channels();
}
inline ::google::protobuf::int32 Init::num_reverse_channels() const {
  return num_reverse_channels_;
}
inline void Init::set_num_reverse_channels(::google::protobuf::int32 value) {
  set_has_num_reverse_channels();
  num_reverse_channels_ = value;
}

// -------------------------------------------------------------------

// ReverseStream

// optional bytes data = 1;
inline bool ReverseStream::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReverseStream::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReverseStream::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReverseStream::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ReverseStream::data() const {
  return *data_;
}
inline void ReverseStream::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ReverseStream::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ReverseStream::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReverseStream::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* ReverseStream::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReverseStream::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Stream

// optional bytes input_data = 1;
inline bool Stream::has_input_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stream::set_has_input_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stream::clear_has_input_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stream::clear_input_data() {
  if (input_data_ != &::google::protobuf::internal::kEmptyString) {
    input_data_->clear();
  }
  clear_has_input_data();
}
inline const ::std::string& Stream::input_data() const {
  return *input_data_;
}
inline void Stream::set_input_data(const ::std::string& value) {
  set_has_input_data();
  if (input_data_ == &::google::protobuf::internal::kEmptyString) {
    input_data_ = new ::std::string;
  }
  input_data_->assign(value);
}
inline void Stream::set_input_data(const char* value) {
  set_has_input_data();
  if (input_data_ == &::google::protobuf::internal::kEmptyString) {
    input_data_ = new ::std::string;
  }
  input_data_->assign(value);
}
inline void Stream::set_input_data(const void* value, size_t size) {
  set_has_input_data();
  if (input_data_ == &::google::protobuf::internal::kEmptyString) {
    input_data_ = new ::std::string;
  }
  input_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Stream::mutable_input_data() {
  set_has_input_data();
  if (input_data_ == &::google::protobuf::internal::kEmptyString) {
    input_data_ = new ::std::string;
  }
  return input_data_;
}
inline ::std::string* Stream::release_input_data() {
  clear_has_input_data();
  if (input_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = input_data_;
    input_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Stream::set_allocated_input_data(::std::string* input_data) {
  if (input_data_ != &::google::protobuf::internal::kEmptyString) {
    delete input_data_;
  }
  if (input_data) {
    set_has_input_data();
    input_data_ = input_data;
  } else {
    clear_has_input_data();
    input_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes output_data = 2;
inline bool Stream::has_output_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stream::set_has_output_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stream::clear_has_output_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stream::clear_output_data() {
  if (output_data_ != &::google::protobuf::internal::kEmptyString) {
    output_data_->clear();
  }
  clear_has_output_data();
}
inline const ::std::string& Stream::output_data() const {
  return *output_data_;
}
inline void Stream::set_output_data(const ::std::string& value) {
  set_has_output_data();
  if (output_data_ == &::google::protobuf::internal::kEmptyString) {
    output_data_ = new ::std::string;
  }
  output_data_->assign(value);
}
inline void Stream::set_output_data(const char* value) {
  set_has_output_data();
  if (output_data_ == &::google::protobuf::internal::kEmptyString) {
    output_data_ = new ::std::string;
  }
  output_data_->assign(value);
}
inline void Stream::set_output_data(const void* value, size_t size) {
  set_has_output_data();
  if (output_data_ == &::google::protobuf::internal::kEmptyString) {
    output_data_ = new ::std::string;
  }
  output_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Stream::mutable_output_data() {
  set_has_output_data();
  if (output_data_ == &::google::protobuf::internal::kEmptyString) {
    output_data_ = new ::std::string;
  }
  return output_data_;
}
inline ::std::string* Stream::release_output_data() {
  clear_has_output_data();
  if (output_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = output_data_;
    output_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Stream::set_allocated_output_data(::std::string* output_data) {
  if (output_data_ != &::google::protobuf::internal::kEmptyString) {
    delete output_data_;
  }
  if (output_data) {
    set_has_output_data();
    output_data_ = output_data;
  } else {
    clear_has_output_data();
    output_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 delay = 3;
inline bool Stream::has_delay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Stream::set_has_delay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Stream::clear_has_delay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Stream::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
inline ::google::protobuf::int32 Stream::delay() const {
  return delay_;
}
inline void Stream::set_delay(::google::protobuf::int32 value) {
  set_has_delay();
  delay_ = value;
}

// optional sint32 drift = 4;
inline bool Stream::has_drift() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Stream::set_has_drift() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Stream::clear_has_drift() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Stream::clear_drift() {
  drift_ = 0;
  clear_has_drift();
}
inline ::google::protobuf::int32 Stream::drift() const {
  return drift_;
}
inline void Stream::set_drift(::google::protobuf::int32 value) {
  set_has_drift();
  drift_ = value;
}

// optional int32 level = 5;
inline bool Stream::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Stream::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Stream::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Stream::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Stream::level() const {
  return level_;
}
inline void Stream::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// Event

// required .webrtc.audioproc.Event.Type type = 1;
inline bool Event::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::webrtc::audioproc::Event_Type Event::type() const {
  return static_cast< ::webrtc::audioproc::Event_Type >(type_);
}
inline void Event::set_type(::webrtc::audioproc::Event_Type value) {
  assert(::webrtc::audioproc::Event_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .webrtc.audioproc.Init init = 2;
inline bool Event::has_init() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_init() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_init() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_init() {
  if (init_ != NULL) init_->::webrtc::audioproc::Init::Clear();
  clear_has_init();
}
inline const ::webrtc::audioproc::Init& Event::init() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return init_ != NULL ? *init_ : *default_instance().init_;
#else
  return init_ != NULL ? *init_ : *default_instance_->init_;
#endif
}
inline ::webrtc::audioproc::Init* Event::mutable_init() {
  set_has_init();
  if (init_ == NULL) init_ = new ::webrtc::audioproc::Init;
  return init_;
}
inline ::webrtc::audioproc::Init* Event::release_init() {
  clear_has_init();
  ::webrtc::audioproc::Init* temp = init_;
  init_ = NULL;
  return temp;
}
inline void Event::set_allocated_init(::webrtc::audioproc::Init* init) {
  delete init_;
  init_ = init;
  if (init) {
    set_has_init();
  } else {
    clear_has_init();
  }
}

// optional .webrtc.audioproc.ReverseStream reverse_stream = 3;
inline bool Event::has_reverse_stream() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event::set_has_reverse_stream() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event::clear_has_reverse_stream() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event::clear_reverse_stream() {
  if (reverse_stream_ != NULL) reverse_stream_->::webrtc::audioproc::ReverseStream::Clear();
  clear_has_reverse_stream();
}
inline const ::webrtc::audioproc::ReverseStream& Event::reverse_stream() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return reverse_stream_ != NULL ? *reverse_stream_ : *default_instance().reverse_stream_;
#else
  return reverse_stream_ != NULL ? *reverse_stream_ : *default_instance_->reverse_stream_;
#endif
}
inline ::webrtc::audioproc::ReverseStream* Event::mutable_reverse_stream() {
  set_has_reverse_stream();
  if (reverse_stream_ == NULL) reverse_stream_ = new ::webrtc::audioproc::ReverseStream;
  return reverse_stream_;
}
inline ::webrtc::audioproc::ReverseStream* Event::release_reverse_stream() {
  clear_has_reverse_stream();
  ::webrtc::audioproc::ReverseStream* temp = reverse_stream_;
  reverse_stream_ = NULL;
  return temp;
}
inline void Event::set_allocated_reverse_stream(::webrtc::audioproc::ReverseStream* reverse_stream) {
  delete reverse_stream_;
  reverse_stream_ = reverse_stream;
  if (reverse_stream) {
    set_has_reverse_stream();
  } else {
    clear_has_reverse_stream();
  }
}

// optional .webrtc.audioproc.Stream stream = 4;
inline bool Event::has_stream() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event::set_has_stream() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event::clear_has_stream() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event::clear_stream() {
  if (stream_ != NULL) stream_->::webrtc::audioproc::Stream::Clear();
  clear_has_stream();
}
inline const ::webrtc::audioproc::Stream& Event::stream() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return stream_ != NULL ? *stream_ : *default_instance().stream_;
#else
  return stream_ != NULL ? *stream_ : *default_instance_->stream_;
#endif
}
inline ::webrtc::audioproc::Stream* Event::mutable_stream() {
  set_has_stream();
  if (stream_ == NULL) stream_ = new ::webrtc::audioproc::Stream;
  return stream_;
}
inline ::webrtc::audioproc::Stream* Event::release_stream() {
  clear_has_stream();
  ::webrtc::audioproc::Stream* temp = stream_;
  stream_ = NULL;
  return temp;
}
inline void Event::set_allocated_stream(::webrtc::audioproc::Stream* stream) {
  delete stream_;
  stream_ = stream;
  if (stream) {
    set_has_stream();
  } else {
    clear_has_stream();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace audioproc
}  // namespace webrtc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_debug_2eproto__INCLUDED
