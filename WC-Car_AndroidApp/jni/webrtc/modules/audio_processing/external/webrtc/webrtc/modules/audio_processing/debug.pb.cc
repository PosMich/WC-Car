// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "debug.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace webrtc {
namespace audioproc {

void protobuf_ShutdownFile_debug_2eproto() {
  delete Init::default_instance_;
  delete ReverseStream::default_instance_;
  delete Stream::default_instance_;
  delete Event::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_debug_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_debug_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Init::default_instance_ = new Init();
  ReverseStream::default_instance_ = new ReverseStream();
  Stream::default_instance_ = new Stream();
  Event::default_instance_ = new Event();
  Init::default_instance_->InitAsDefaultInstance();
  ReverseStream::default_instance_->InitAsDefaultInstance();
  Stream::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_debug_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_debug_2eproto_once_);
void protobuf_AddDesc_debug_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_debug_2eproto_once_,
                 &protobuf_AddDesc_debug_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_debug_2eproto {
  StaticDescriptorInitializer_debug_2eproto() {
    protobuf_AddDesc_debug_2eproto();
  }
} static_descriptor_initializer_debug_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Init::kSampleRateFieldNumber;
const int Init::kDeviceSampleRateFieldNumber;
const int Init::kNumInputChannelsFieldNumber;
const int Init::kNumOutputChannelsFieldNumber;
const int Init::kNumReverseChannelsFieldNumber;
#endif  // !_MSC_VER

Init::Init()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Init::InitAsDefaultInstance() {
}

Init::Init(const Init& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Init::SharedCtor() {
  _cached_size_ = 0;
  sample_rate_ = 0;
  device_sample_rate_ = 0;
  num_input_channels_ = 0;
  num_output_channels_ = 0;
  num_reverse_channels_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Init::~Init() {
  SharedDtor();
}

void Init::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Init::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Init& Init::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_debug_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_debug_2eproto();
#endif
  return *default_instance_;
}

Init* Init::default_instance_ = NULL;

Init* Init::New() const {
  return new Init;
}

void Init::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sample_rate_ = 0;
    device_sample_rate_ = 0;
    num_input_channels_ = 0;
    num_output_channels_ = 0;
    num_reverse_channels_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Init::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sample_rate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_)));
          set_has_sample_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_device_sample_rate;
        break;
      }

      // optional int32 device_sample_rate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_device_sample_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_sample_rate_)));
          set_has_device_sample_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_input_channels;
        break;
      }

      // optional int32 num_input_channels = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_input_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_input_channels_)));
          set_has_num_input_channels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_output_channels;
        break;
      }

      // optional int32 num_output_channels = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_output_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_output_channels_)));
          set_has_num_output_channels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num_reverse_channels;
        break;
      }

      // optional int32 num_reverse_channels = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_reverse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_reverse_channels_)));
          set_has_num_reverse_channels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Init::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sample_rate = 1;
  if (has_sample_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sample_rate(), output);
  }

  // optional int32 device_sample_rate = 2;
  if (has_device_sample_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->device_sample_rate(), output);
  }

  // optional int32 num_input_channels = 3;
  if (has_num_input_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_input_channels(), output);
  }

  // optional int32 num_output_channels = 4;
  if (has_num_output_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_output_channels(), output);
  }

  // optional int32 num_reverse_channels = 5;
  if (has_num_reverse_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_reverse_channels(), output);
  }

}

int Init::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sample_rate = 1;
    if (has_sample_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sample_rate());
    }

    // optional int32 device_sample_rate = 2;
    if (has_device_sample_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_sample_rate());
    }

    // optional int32 num_input_channels = 3;
    if (has_num_input_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_input_channels());
    }

    // optional int32 num_output_channels = 4;
    if (has_num_output_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_output_channels());
    }

    // optional int32 num_reverse_channels = 5;
    if (has_num_reverse_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_reverse_channels());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Init::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Init*>(&from));
}

void Init::MergeFrom(const Init& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sample_rate()) {
      set_sample_rate(from.sample_rate());
    }
    if (from.has_device_sample_rate()) {
      set_device_sample_rate(from.device_sample_rate());
    }
    if (from.has_num_input_channels()) {
      set_num_input_channels(from.num_input_channels());
    }
    if (from.has_num_output_channels()) {
      set_num_output_channels(from.num_output_channels());
    }
    if (from.has_num_reverse_channels()) {
      set_num_reverse_channels(from.num_reverse_channels());
    }
  }
}

void Init::CopyFrom(const Init& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Init::IsInitialized() const {

  return true;
}

void Init::Swap(Init* other) {
  if (other != this) {
    std::swap(sample_rate_, other->sample_rate_);
    std::swap(device_sample_rate_, other->device_sample_rate_);
    std::swap(num_input_channels_, other->num_input_channels_);
    std::swap(num_output_channels_, other->num_output_channels_);
    std::swap(num_reverse_channels_, other->num_reverse_channels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Init::GetTypeName() const {
  return "webrtc.audioproc.Init";
}


// ===================================================================

#ifndef _MSC_VER
const int ReverseStream::kDataFieldNumber;
#endif  // !_MSC_VER

ReverseStream::ReverseStream()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ReverseStream::InitAsDefaultInstance() {
}

ReverseStream::ReverseStream(const ReverseStream& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ReverseStream::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReverseStream::~ReverseStream() {
  SharedDtor();
}

void ReverseStream::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReverseStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReverseStream& ReverseStream::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_debug_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_debug_2eproto();
#endif
  return *default_instance_;
}

ReverseStream* ReverseStream::default_instance_ = NULL;

ReverseStream* ReverseStream::New() const {
  return new ReverseStream;
}

void ReverseStream::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ReverseStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReverseStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }

}

int ReverseStream::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReverseStream::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReverseStream*>(&from));
}

void ReverseStream::MergeFrom(const ReverseStream& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
}

void ReverseStream::CopyFrom(const ReverseStream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReverseStream::IsInitialized() const {

  return true;
}

void ReverseStream::Swap(ReverseStream* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ReverseStream::GetTypeName() const {
  return "webrtc.audioproc.ReverseStream";
}


// ===================================================================

#ifndef _MSC_VER
const int Stream::kInputDataFieldNumber;
const int Stream::kOutputDataFieldNumber;
const int Stream::kDelayFieldNumber;
const int Stream::kDriftFieldNumber;
const int Stream::kLevelFieldNumber;
#endif  // !_MSC_VER

Stream::Stream()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Stream::InitAsDefaultInstance() {
}

Stream::Stream(const Stream& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Stream::SharedCtor() {
  _cached_size_ = 0;
  input_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  output_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  delay_ = 0;
  drift_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stream::~Stream() {
  SharedDtor();
}

void Stream::SharedDtor() {
  if (input_data_ != &::google::protobuf::internal::kEmptyString) {
    delete input_data_;
  }
  if (output_data_ != &::google::protobuf::internal::kEmptyString) {
    delete output_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Stream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Stream& Stream::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_debug_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_debug_2eproto();
#endif
  return *default_instance_;
}

Stream* Stream::default_instance_ = NULL;

Stream* Stream::New() const {
  return new Stream;
}

void Stream::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_input_data()) {
      if (input_data_ != &::google::protobuf::internal::kEmptyString) {
        input_data_->clear();
      }
    }
    if (has_output_data()) {
      if (output_data_ != &::google::protobuf::internal::kEmptyString) {
        output_data_->clear();
      }
    }
    delay_ = 0;
    drift_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Stream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes input_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_input_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_output_data;
        break;
      }

      // optional bytes output_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_output_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_delay;
        break;
      }

      // optional int32 delay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_drift;
        break;
      }

      // optional sint32 drift = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &drift_)));
          set_has_drift();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes input_data = 1;
  if (has_input_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->input_data(), output);
  }

  // optional bytes output_data = 2;
  if (has_output_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->output_data(), output);
  }

  // optional int32 delay = 3;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->delay(), output);
  }

  // optional sint32 drift = 4;
  if (has_drift()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->drift(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

}

int Stream::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes input_data = 1;
    if (has_input_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->input_data());
    }

    // optional bytes output_data = 2;
    if (has_output_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->output_data());
    }

    // optional int32 delay = 3;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay());
    }

    // optional sint32 drift = 4;
    if (has_drift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->drift());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stream::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Stream*>(&from));
}

void Stream::MergeFrom(const Stream& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_input_data()) {
      set_input_data(from.input_data());
    }
    if (from.has_output_data()) {
      set_output_data(from.output_data());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_drift()) {
      set_drift(from.drift());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
}

void Stream::CopyFrom(const Stream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream::IsInitialized() const {

  return true;
}

void Stream::Swap(Stream* other) {
  if (other != this) {
    std::swap(input_data_, other->input_data_);
    std::swap(output_data_, other->output_data_);
    std::swap(delay_, other->delay_);
    std::swap(drift_, other->drift_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Stream::GetTypeName() const {
  return "webrtc.audioproc.Stream";
}


// ===================================================================

bool Event_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Event_Type Event::INIT;
const Event_Type Event::REVERSE_STREAM;
const Event_Type Event::STREAM;
const Event_Type Event::Type_MIN;
const Event_Type Event::Type_MAX;
const int Event::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Event::kTypeFieldNumber;
const int Event::kInitFieldNumber;
const int Event::kReverseStreamFieldNumber;
const int Event::kStreamFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Event::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  init_ = const_cast< ::webrtc::audioproc::Init*>(
      ::webrtc::audioproc::Init::internal_default_instance());
#else
  init_ = const_cast< ::webrtc::audioproc::Init*>(&::webrtc::audioproc::Init::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  reverse_stream_ = const_cast< ::webrtc::audioproc::ReverseStream*>(
      ::webrtc::audioproc::ReverseStream::internal_default_instance());
#else
  reverse_stream_ = const_cast< ::webrtc::audioproc::ReverseStream*>(&::webrtc::audioproc::ReverseStream::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  stream_ = const_cast< ::webrtc::audioproc::Stream*>(
      ::webrtc::audioproc::Stream::internal_default_instance());
#else
  stream_ = const_cast< ::webrtc::audioproc::Stream*>(&::webrtc::audioproc::Stream::default_instance());
#endif
}

Event::Event(const Event& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  init_ = NULL;
  reverse_stream_ = NULL;
  stream_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  SharedDtor();
}

void Event::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete init_;
    delete reverse_stream_;
    delete stream_;
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Event& Event::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_debug_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_debug_2eproto();
#endif
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_init()) {
      if (init_ != NULL) init_->::webrtc::audioproc::Init::Clear();
    }
    if (has_reverse_stream()) {
      if (reverse_stream_ != NULL) reverse_stream_->::webrtc::audioproc::ReverseStream::Clear();
    }
    if (has_stream()) {
      if (stream_ != NULL) stream_->::webrtc::audioproc::Stream::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .webrtc.audioproc.Event.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::audioproc::Event_Type_IsValid(value)) {
            set_type(static_cast< ::webrtc::audioproc::Event_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_init;
        break;
      }

      // optional .webrtc.audioproc.Init init = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_init:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reverse_stream;
        break;
      }

      // optional .webrtc.audioproc.ReverseStream reverse_stream = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reverse_stream:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reverse_stream()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stream;
        break;
      }

      // optional .webrtc.audioproc.Stream stream = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stream()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .webrtc.audioproc.Event.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .webrtc.audioproc.Init init = 2;
  if (has_init()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->init(), output);
  }

  // optional .webrtc.audioproc.ReverseStream reverse_stream = 3;
  if (has_reverse_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->reverse_stream(), output);
  }

  // optional .webrtc.audioproc.Stream stream = 4;
  if (has_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->stream(), output);
  }

}

int Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .webrtc.audioproc.Event.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .webrtc.audioproc.Init init = 2;
    if (has_init()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->init());
    }

    // optional .webrtc.audioproc.ReverseStream reverse_stream = 3;
    if (has_reverse_stream()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reverse_stream());
    }

    // optional .webrtc.audioproc.Stream stream = 4;
    if (has_stream()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stream());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Event*>(&from));
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_init()) {
      mutable_init()->::webrtc::audioproc::Init::MergeFrom(from.init());
    }
    if (from.has_reverse_stream()) {
      mutable_reverse_stream()->::webrtc::audioproc::ReverseStream::MergeFrom(from.reverse_stream());
    }
    if (from.has_stream()) {
      mutable_stream()->::webrtc::audioproc::Stream::MergeFrom(from.stream());
    }
  }
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(init_, other->init_);
    std::swap(reverse_stream_, other->reverse_stream_);
    std::swap(stream_, other->stream_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Event::GetTypeName() const {
  return "webrtc.audioproc.Event";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace audioproc
}  // namespace webrtc

// @@protoc_insertion_point(global_scope)
