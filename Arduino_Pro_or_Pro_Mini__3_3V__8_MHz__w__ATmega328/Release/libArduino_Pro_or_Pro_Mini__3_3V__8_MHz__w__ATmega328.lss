In archive libArduino_Pro_or_Pro_Mini__3_3V__8_MHz__w__ATmega328.a:

malloc.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000768  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000ae5  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.avr-libc 0000026a  00000000  00000000  00001281  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.__malloc_margin 00000002  00000000  00000000  000014eb  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data.__malloc_heap_start 00000002  00000000  00000000  000014ed  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .data.__malloc_heap_end 00000002  00000000  00000000  000014ef  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
Disassembly of section .text.avr-libc:

00000000 <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	bc 01       	movw	r22, r24
   a:	82 30       	cpi	r24, 0x02	; 2
   c:	91 05       	cpc	r25, r1
   e:	00 f4       	brcc	.+0      	; 0x10 <malloc+0x10>
  10:	62 e0       	ldi	r22, 0x02	; 2
  12:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
  14:	e0 91 00 00 	lds	r30, 0x0000
  18:	f0 91 00 00 	lds	r31, 0x0000
  1c:	a0 e0       	ldi	r26, 0x00	; 0
  1e:	b0 e0       	ldi	r27, 0x00	; 0
  20:	40 e0       	ldi	r20, 0x00	; 0
  22:	50 e0       	ldi	r21, 0x00	; 0
  24:	00 c0       	rjmp	.+0      	; 0x26 <malloc+0x26>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
  26:	80 81       	ld	r24, Z
  28:	91 81       	ldd	r25, Z+1	; 0x01
  2a:	86 17       	cp	r24, r22
  2c:	97 07       	cpc	r25, r23
  2e:	00 f0       	brcs	.+0      	; 0x30 <malloc+0x30>
			continue;
		if (fp1->sz == len) {
  30:	86 17       	cp	r24, r22
  32:	97 07       	cpc	r25, r23
  34:	01 f4       	brne	.+0      	; 0x36 <malloc+0x36>
  36:	82 81       	ldd	r24, Z+2	; 0x02
  38:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
  3a:	10 97       	sbiw	r26, 0x00	; 0
  3c:	01 f0       	breq	.+0      	; 0x3e <malloc+0x3e>
				fp2->nx = fp1->nx;
  3e:	13 96       	adiw	r26, 0x03	; 3
  40:	9c 93       	st	X, r25
  42:	8e 93       	st	-X, r24
  44:	12 97       	sbiw	r26, 0x02	; 2
  46:	00 c0       	rjmp	.+0      	; 0x48 <malloc+0x48>
			else
				__flp = fp1->nx;
  48:	90 93 00 00 	sts	0x0000, r25
  4c:	80 93 00 00 	sts	0x0000, r24
  50:	00 c0       	rjmp	.+0      	; 0x52 <malloc+0x52>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
  52:	41 15       	cp	r20, r1
  54:	51 05       	cpc	r21, r1
  56:	01 f0       	breq	.+0      	; 0x58 <malloc+0x58>
  58:	84 17       	cp	r24, r20
  5a:	95 07       	cpc	r25, r21
  5c:	00 f4       	brcc	.+0      	; 0x5e <malloc+0x5e>
  5e:	ef 01       	movw	r28, r30
  60:	8d 01       	movw	r16, r26
  62:	ac 01       	movw	r20, r24
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
  64:	df 01       	movw	r26, r30
  66:	82 81       	ldd	r24, Z+2	; 0x02
  68:	93 81       	ldd	r25, Z+3	; 0x03
  6a:	9c 01       	movw	r18, r24
  6c:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
  6e:	30 97       	sbiw	r30, 0x00	; 0
  70:	01 f4       	brne	.+0      	; 0x72 <malloc+0x72>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
  72:	41 15       	cp	r20, r1
  74:	51 05       	cpc	r21, r1
  76:	01 f0       	breq	.+0      	; 0x78 <malloc+0x78>
		if (s - len < sizeof(struct __freelist)) {
  78:	ca 01       	movw	r24, r20
  7a:	86 1b       	sub	r24, r22
  7c:	97 0b       	sbc	r25, r23
  7e:	84 30       	cpi	r24, 0x04	; 4
  80:	91 05       	cpc	r25, r1
  82:	00 f4       	brcc	.+0      	; 0x84 <malloc+0x84>
  84:	8a 81       	ldd	r24, Y+2	; 0x02
  86:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
  88:	01 15       	cp	r16, r1
  8a:	11 05       	cpc	r17, r1
  8c:	01 f0       	breq	.+0      	; 0x8e <malloc+0x8e>
				sfp2->nx = sfp1->nx;
  8e:	f8 01       	movw	r30, r16
  90:	93 83       	std	Z+3, r25	; 0x03
  92:	82 83       	std	Z+2, r24	; 0x02
  94:	00 c0       	rjmp	.+0      	; 0x96 <malloc+0x96>
			else
				__flp = sfp1->nx;
  96:	90 93 00 00 	sts	0x0000, r25
  9a:	80 93 00 00 	sts	0x0000, r24
			return &(sfp1->nx);
  9e:	fe 01       	movw	r30, r28
  a0:	32 96       	adiw	r30, 0x02	; 2
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <malloc+0xa4>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
  a4:	fe 01       	movw	r30, r28
  a6:	e8 0f       	add	r30, r24
  a8:	f9 1f       	adc	r31, r25
  aa:	61 93       	st	Z+, r22
  ac:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
  ae:	02 97       	sbiw	r24, 0x02	; 2
  b0:	99 83       	std	Y+1, r25	; 0x01
  b2:	88 83       	st	Y, r24
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <malloc+0xb6>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
  b6:	80 91 00 00 	lds	r24, 0x0000
  ba:	90 91 00 00 	lds	r25, 0x0000
  be:	89 2b       	or	r24, r25
  c0:	01 f4       	brne	.+0      	; 0xc2 <malloc+0xc2>
		__brkval = __malloc_heap_start;
  c2:	80 91 00 00 	lds	r24, 0x0000
  c6:	90 91 00 00 	lds	r25, 0x0000
  ca:	90 93 00 00 	sts	0x0000, r25
  ce:	80 93 00 00 	sts	0x0000, r24
	cp = __malloc_heap_end;
  d2:	40 91 00 00 	lds	r20, 0x0000
  d6:	50 91 00 00 	lds	r21, 0x0000
	if (cp == 0)
  da:	41 15       	cp	r20, r1
  dc:	51 05       	cpc	r21, r1
  de:	01 f4       	brne	.+0      	; 0xe0 <malloc+0xe0>
		cp = STACK_POINTER() - __malloc_margin;
  e0:	4d b7       	in	r20, 0x3d	; 61
  e2:	5e b7       	in	r21, 0x3e	; 62
  e4:	80 91 00 00 	lds	r24, 0x0000
  e8:	90 91 00 00 	lds	r25, 0x0000
  ec:	48 1b       	sub	r20, r24
  ee:	59 0b       	sbc	r21, r25
	if (cp <= __brkval)
  f0:	20 91 00 00 	lds	r18, 0x0000
  f4:	30 91 00 00 	lds	r19, 0x0000
  f8:	24 17       	cp	r18, r20
  fa:	35 07       	cpc	r19, r21
  fc:	00 f4       	brcc	.+0      	; 0xfe <malloc+0xfe>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
  fe:	ca 01       	movw	r24, r20
 100:	82 1b       	sub	r24, r18
 102:	93 0b       	sbc	r25, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
 104:	86 17       	cp	r24, r22
 106:	97 07       	cpc	r25, r23
 108:	00 f0       	brcs	.+0      	; 0x10a <malloc+0x10a>
 10a:	ab 01       	movw	r20, r22
 10c:	4e 5f       	subi	r20, 0xFE	; 254
 10e:	5f 4f       	sbci	r21, 0xFF	; 255
 110:	84 17       	cp	r24, r20
 112:	95 07       	cpc	r25, r21
 114:	00 f0       	brcs	.+0      	; 0x116 <malloc+0x116>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
 116:	42 0f       	add	r20, r18
 118:	53 1f       	adc	r21, r19
 11a:	50 93 00 00 	sts	0x0000, r21
 11e:	40 93 00 00 	sts	0x0000, r20
		fp1->sz = len;
 122:	f9 01       	movw	r30, r18
 124:	61 93       	st	Z+, r22
 126:	71 93       	st	Z+, r23
 128:	00 c0       	rjmp	.+0      	; 0x12a <malloc+0x12a>
		return &(fp1->nx);
 12a:	e0 e0       	ldi	r30, 0x00	; 0
 12c:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
 12e:	cf 01       	movw	r24, r30
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	08 95       	ret

0000013a <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	9c 01       	movw	r18, r24
 140:	00 97       	sbiw	r24, 0x00	; 0
 142:	01 f4       	brne	.+0      	; 0x144 <free+0xa>
 144:	00 c0       	rjmp	.+0      	; 0x146 <free+0xc>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
 146:	ec 01       	movw	r28, r24
 148:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
 14a:	1b 82       	std	Y+3, r1	; 0x03
 14c:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
 14e:	60 91 00 00 	lds	r22, 0x0000
 152:	70 91 00 00 	lds	r23, 0x0000
 156:	61 15       	cp	r22, r1
 158:	71 05       	cpc	r23, r1
 15a:	01 f4       	brne	.+0      	; 0x15c <free+0x22>
		if ((char *)p + fpnew->sz == __brkval)
 15c:	88 81       	ld	r24, Y
 15e:	99 81       	ldd	r25, Y+1	; 0x01
 160:	82 0f       	add	r24, r18
 162:	93 1f       	adc	r25, r19
 164:	20 91 00 00 	lds	r18, 0x0000
 168:	30 91 00 00 	lds	r19, 0x0000
 16c:	28 17       	cp	r18, r24
 16e:	39 07       	cpc	r19, r25
 170:	01 f4       	brne	.+0      	; 0x172 <free+0x38>
			__brkval = cpnew;
 172:	d0 93 00 00 	sts	0x0000, r29
 176:	c0 93 00 00 	sts	0x0000, r28
 17a:	00 c0       	rjmp	.+0      	; 0x17c <free+0x42>
		else
			__flp = fpnew;
 17c:	db 01       	movw	r26, r22
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
 182:	ac 17       	cp	r26, r28
 184:	bd 07       	cpc	r27, r29
 186:	00 f0       	brcs	.+0      	; 0x188 <free+0x4e>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
 188:	bb 83       	std	Y+3, r27	; 0x03
 18a:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
 18c:	fe 01       	movw	r30, r28
 18e:	21 91       	ld	r18, Z+
 190:	31 91       	ld	r19, Z+
 192:	e2 0f       	add	r30, r18
 194:	f3 1f       	adc	r31, r19
 196:	ae 17       	cp	r26, r30
 198:	bf 07       	cpc	r27, r31
 19a:	01 f4       	brne	.+0      	; 0x19c <free+0x62>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
 19c:	8d 91       	ld	r24, X+
 19e:	9c 91       	ld	r25, X
 1a0:	11 97       	sbiw	r26, 0x01	; 1
 1a2:	28 0f       	add	r18, r24
 1a4:	39 1f       	adc	r19, r25
 1a6:	2e 5f       	subi	r18, 0xFE	; 254
 1a8:	3f 4f       	sbci	r19, 0xFF	; 255
 1aa:	39 83       	std	Y+1, r19	; 0x01
 1ac:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
 1ae:	12 96       	adiw	r26, 0x02	; 2
 1b0:	8d 91       	ld	r24, X+
 1b2:	9c 91       	ld	r25, X
 1b4:	13 97       	sbiw	r26, 0x03	; 3
 1b6:	9b 83       	std	Y+3, r25	; 0x03
 1b8:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
 1ba:	41 15       	cp	r20, r1
 1bc:	51 05       	cpc	r21, r1
 1be:	01 f4       	brne	.+0      	; 0x1c0 <free+0x86>
			/* new head of freelist */
			__flp = fpnew;
 1c0:	d0 93 00 00 	sts	0x0000, r29
 1c4:	c0 93 00 00 	sts	0x0000, r28
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <free+0x90>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
 1ca:	12 96       	adiw	r26, 0x02	; 2
 1cc:	8d 91       	ld	r24, X+
 1ce:	9c 91       	ld	r25, X
 1d0:	13 97       	sbiw	r26, 0x03	; 3
 1d2:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
 1d4:	00 97       	sbiw	r24, 0x00	; 0
 1d6:	01 f0       	breq	.+0      	; 0x1d8 <free+0x9e>
 1d8:	dc 01       	movw	r26, r24
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <free+0xa2>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
 1dc:	da 01       	movw	r26, r20
 1de:	13 96       	adiw	r26, 0x03	; 3
 1e0:	dc 93       	st	X, r29
 1e2:	ce 93       	st	-X, r28
 1e4:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
 1e6:	fa 01       	movw	r30, r20
 1e8:	21 91       	ld	r18, Z+
 1ea:	31 91       	ld	r19, Z+
 1ec:	e2 0f       	add	r30, r18
 1ee:	f3 1f       	adc	r31, r19
 1f0:	ce 17       	cp	r28, r30
 1f2:	df 07       	cpc	r29, r31
 1f4:	01 f4       	brne	.+0      	; 0x1f6 <free+0xbc>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
 1f6:	88 81       	ld	r24, Y
 1f8:	99 81       	ldd	r25, Y+1	; 0x01
 1fa:	28 0f       	add	r18, r24
 1fc:	39 1f       	adc	r19, r25
 1fe:	2e 5f       	subi	r18, 0xFE	; 254
 200:	3f 4f       	sbci	r19, 0xFF	; 255
 202:	fa 01       	movw	r30, r20
 204:	31 83       	std	Z+1, r19	; 0x01
 206:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
 208:	8a 81       	ldd	r24, Y+2	; 0x02
 20a:	9b 81       	ldd	r25, Y+3	; 0x03
 20c:	93 83       	std	Z+3, r25	; 0x03
 20e:	82 83       	std	Z+2, r24	; 0x02
 210:	e0 e0       	ldi	r30, 0x00	; 0
 212:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
 214:	db 01       	movw	r26, r22
 216:	12 96       	adiw	r26, 0x02	; 2
 218:	8d 91       	ld	r24, X+
 21a:	9c 91       	ld	r25, X
 21c:	13 97       	sbiw	r26, 0x03	; 3
 21e:	00 97       	sbiw	r24, 0x00	; 0
 220:	01 f0       	breq	.+0      	; 0x222 <free+0xe8>
 222:	bc 01       	movw	r22, r24
 224:	fd 01       	movw	r30, r26
 226:	00 c0       	rjmp	.+0      	; 0x228 <free+0xee>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
 228:	ab 01       	movw	r20, r22
 22a:	4e 5f       	subi	r20, 0xFE	; 254
 22c:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
 22e:	db 01       	movw	r26, r22
 230:	8d 91       	ld	r24, X+
 232:	9c 91       	ld	r25, X
 234:	84 0f       	add	r24, r20
 236:	95 1f       	adc	r25, r21
 238:	20 91 00 00 	lds	r18, 0x0000
 23c:	30 91 00 00 	lds	r19, 0x0000
 240:	28 17       	cp	r18, r24
 242:	39 07       	cpc	r19, r25
 244:	01 f4       	brne	.+0      	; 0x246 <free+0x10c>
		if (fp2 == NULL)
 246:	30 97       	sbiw	r30, 0x00	; 0
 248:	01 f4       	brne	.+0      	; 0x24a <free+0x110>
			/* Freelist is empty now. */
			__flp = NULL;
 24a:	10 92 00 00 	sts	0x0000, r1
 24e:	10 92 00 00 	sts	0x0000, r1
 252:	00 c0       	rjmp	.+0      	; 0x254 <free+0x11a>
		else
			fp2->nx = NULL;
 254:	13 82       	std	Z+3, r1	; 0x03
 256:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
 258:	42 50       	subi	r20, 0x02	; 2
 25a:	50 40       	sbci	r21, 0x00	; 0
 25c:	50 93 00 00 	sts	0x0000, r21
 260:	40 93 00 00 	sts	0x0000, r20
	}
}
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

realloc.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000005dc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000a66  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.avr-libc 000001c2  00000000  00000000  00001076  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
Disassembly of section .text.avr-libc:

00000000 <realloc>:
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  1a:	df 93       	push	r29
  1c:	8c 01       	movw	r16, r24
  1e:	00 97       	sbiw	r24, 0x00	; 0
  20:	01 f4       	brne	.+0      	; 0x22 <realloc+0x22>
		return malloc(len);
  22:	cb 01       	movw	r24, r22
  24:	0e 94 00 00 	call	0	; 0x0 <realloc>
  28:	8c 01       	movw	r16, r24
  2a:	00 c0       	rjmp	.+0      	; 0x2c <realloc+0x2c>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
  2c:	8e ef       	ldi	r24, 0xFE	; 254
  2e:	e8 2e       	mov	r14, r24
  30:	8f ef       	ldi	r24, 0xFF	; 255
  32:	f8 2e       	mov	r15, r24
  34:	e0 0e       	add	r14, r16
  36:	f1 1e       	adc	r15, r17
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
  38:	48 01       	movw	r8, r16
  3a:	86 0e       	add	r8, r22
  3c:	97 1e       	adc	r9, r23
	if (cp < cp1)
  3e:	8e 14       	cp	r8, r14
  40:	9f 04       	cpc	r9, r15
  42:	00 f4       	brcc	.+0      	; 0x44 <realloc+0x44>
  44:	00 c0       	rjmp	.+0      	; 0x46 <realloc+0x46>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
  46:	d7 01       	movw	r26, r14
  48:	4d 91       	ld	r20, X+
  4a:	5c 91       	ld	r21, X
  4c:	11 97       	sbiw	r26, 0x01	; 1
  4e:	46 17       	cp	r20, r22
  50:	57 07       	cpc	r21, r23
  52:	00 f0       	brcs	.+0      	; 0x54 <realloc+0x54>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
  54:	45 30       	cpi	r20, 0x05	; 5
  56:	51 05       	cpc	r21, r1
  58:	00 f4       	brcc	.+0      	; 0x5a <realloc+0x5a>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <realloc+0x5c>
  5c:	ca 01       	movw	r24, r20
  5e:	04 97       	sbiw	r24, 0x04	; 4
  60:	86 17       	cp	r24, r22
  62:	97 07       	cpc	r25, r23
  64:	00 f4       	brcc	.+0      	; 0x66 <realloc+0x66>
  66:	00 c0       	rjmp	.+0      	; 0x68 <realloc+0x68>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
  68:	42 50       	subi	r20, 0x02	; 2
  6a:	50 40       	sbci	r21, 0x00	; 0
  6c:	46 1b       	sub	r20, r22
  6e:	57 0b       	sbc	r21, r23
  70:	f4 01       	movw	r30, r8
  72:	41 93       	st	Z+, r20
  74:	51 93       	st	Z+, r21
		fp1->sz = len;
  76:	6d 93       	st	X+, r22
  78:	7c 93       	st	X, r23
		free(&(fp2->nx));
  7a:	cf 01       	movw	r24, r30
  7c:	0e 94 00 00 	call	0	; 0x0 <realloc>
  80:	00 c0       	rjmp	.+0      	; 0x82 <realloc+0x82>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
  82:	5b 01       	movw	r10, r22
  84:	a4 1a       	sub	r10, r20
  86:	b5 0a       	sbc	r11, r21
	cp = (char *)ptr + fp1->sz;
  88:	38 01       	movw	r6, r16
  8a:	64 0e       	add	r6, r20
  8c:	75 1e       	adc	r7, r21
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
  8e:	a0 91 00 00 	lds	r26, 0x0000
  92:	b0 91 00 00 	lds	r27, 0x0000
  96:	cc 24       	eor	r12, r12
  98:	dd 24       	eor	r13, r13
  9a:	e0 e0       	ldi	r30, 0x00	; 0
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <realloc+0xa0>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
  a0:	a6 15       	cp	r26, r6
  a2:	b7 05       	cpc	r27, r7
  a4:	01 f4       	brne	.+0      	; 0xa6 <realloc+0xa6>
  a6:	cd 91       	ld	r28, X+
  a8:	dc 91       	ld	r29, X
  aa:	11 97       	sbiw	r26, 0x01	; 1
  ac:	ce 01       	movw	r24, r28
  ae:	02 96       	adiw	r24, 0x02	; 2
  b0:	8a 15       	cp	r24, r10
  b2:	9b 05       	cpc	r25, r11
  b4:	00 f0       	brcs	.+0      	; 0xb6 <realloc+0xb6>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
  b6:	ce 01       	movw	r24, r28
  b8:	8a 19       	sub	r24, r10
  ba:	9b 09       	sbc	r25, r11
  bc:	02 96       	adiw	r24, 0x02	; 2
  be:	12 96       	adiw	r26, 0x02	; 2
  c0:	2c 91       	ld	r18, X
  c2:	12 97       	sbiw	r26, 0x02	; 2
  c4:	13 96       	adiw	r26, 0x03	; 3
  c6:	3c 91       	ld	r19, X
  c8:	05 97       	sbiw	r24, 0x05	; 5
  ca:	00 f0       	brcs	.+0      	; 0xcc <realloc+0xcc>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
  cc:	f4 01       	movw	r30, r8
				fp2->nx = fp3->nx;
  ce:	22 83       	std	Z+2, r18	; 0x02
  d0:	33 83       	std	Z+3, r19	; 0x03
				fp2->sz = fp3->sz - incr;
  d2:	ca 19       	sub	r28, r10
  d4:	db 09       	sbc	r29, r11
  d6:	d1 83       	std	Z+1, r29	; 0x01
  d8:	c0 83       	st	Z, r28
				fp1->sz = len;
  da:	d7 01       	movw	r26, r14
  dc:	6d 93       	st	X+, r22
  de:	7c 93       	st	X, r23
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <realloc+0xe2>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
  e2:	4e 5f       	subi	r20, 0xFE	; 254
  e4:	5f 4f       	sbci	r21, 0xFF	; 255
  e6:	4c 0f       	add	r20, r28
  e8:	5d 1f       	adc	r21, r29
  ea:	f7 01       	movw	r30, r14
  ec:	51 83       	std	Z+1, r21	; 0x01
  ee:	40 83       	st	Z, r20
				fp2 = fp3->nx;
  f0:	c9 01       	movw	r24, r18
  f2:	fc 01       	movw	r30, r24
			}
			if (ofp3)
  f4:	c1 14       	cp	r12, r1
  f6:	d1 04       	cpc	r13, r1
  f8:	01 f0       	breq	.+0      	; 0xfa <realloc+0xfa>
				ofp3->nx = fp2;
  fa:	d6 01       	movw	r26, r12
  fc:	13 96       	adiw	r26, 0x03	; 3
  fe:	fc 93       	st	X, r31
 100:	ee 93       	st	-X, r30
 102:	12 97       	sbiw	r26, 0x02	; 2
 104:	00 c0       	rjmp	.+0      	; 0x106 <realloc+0x106>
			else
				__flp = fp2;
 106:	f0 93 00 00 	sts	0x0000, r31
 10a:	e0 93 00 00 	sts	0x0000, r30
 10e:	00 c0       	rjmp	.+0      	; 0x110 <realloc+0x110>
 110:	8d 91       	ld	r24, X+
 112:	9c 91       	ld	r25, X
 114:	11 97       	sbiw	r26, 0x01	; 1
 116:	e8 17       	cp	r30, r24
 118:	f9 07       	cpc	r31, r25
 11a:	00 f4       	brcc	.+0      	; 0x11c <realloc+0x11c>
 11c:	fc 01       	movw	r30, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
 11e:	6d 01       	movw	r12, r26
 120:	12 96       	adiw	r26, 0x02	; 2
 122:	8c 91       	ld	r24, X
 124:	12 97       	sbiw	r26, 0x02	; 2
 126:	13 96       	adiw	r26, 0x03	; 3
 128:	9c 91       	ld	r25, X
 12a:	9c 01       	movw	r18, r24
 12c:	d9 01       	movw	r26, r18
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
 12e:	10 97       	sbiw	r26, 0x00	; 0
 130:	01 f0       	breq	.+0      	; 0x132 <realloc+0x132>
 132:	00 c0       	rjmp	.+0      	; 0x134 <realloc+0x134>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
 134:	80 91 00 00 	lds	r24, 0x0000
 138:	90 91 00 00 	lds	r25, 0x0000
 13c:	86 15       	cp	r24, r6
 13e:	97 05       	cpc	r25, r7
 140:	01 f4       	brne	.+0      	; 0x142 <realloc+0x142>
 142:	e6 17       	cp	r30, r22
 144:	f7 07       	cpc	r31, r23
 146:	00 f4       	brcc	.+0      	; 0x148 <realloc+0x148>
		cp1 = __malloc_heap_end;
 148:	20 91 00 00 	lds	r18, 0x0000
 14c:	30 91 00 00 	lds	r19, 0x0000
		cp = (char *)ptr + len;
		if (cp1 == 0)
 150:	21 15       	cp	r18, r1
 152:	31 05       	cpc	r19, r1
 154:	01 f4       	brne	.+0      	; 0x156 <realloc+0x156>
			cp1 = STACK_POINTER() - __malloc_margin;
 156:	2d b7       	in	r18, 0x3d	; 61
 158:	3e b7       	in	r19, 0x3e	; 62
 15a:	80 91 00 00 	lds	r24, 0x0000
 15e:	90 91 00 00 	lds	r25, 0x0000
 162:	28 1b       	sub	r18, r24
 164:	39 0b       	sbc	r19, r25
		if (cp < cp1) {
 166:	82 16       	cp	r8, r18
 168:	93 06       	cpc	r9, r19
 16a:	00 f4       	brcc	.+0      	; 0x16c <realloc+0x16c>
			__brkval = cp;
 16c:	90 92 00 00 	sts	0x0000, r9
 170:	80 92 00 00 	sts	0x0000, r8
			fp1->sz = len;
 174:	f7 01       	movw	r30, r14
 176:	71 83       	std	Z+1, r23	; 0x01
 178:	60 83       	st	Z, r22
 17a:	00 c0       	rjmp	.+0      	; 0x17c <realloc+0x17c>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
 17c:	cb 01       	movw	r24, r22
 17e:	0e 94 00 00 	call	0	; 0x0 <realloc>
 182:	ec 01       	movw	r28, r24
 184:	00 97       	sbiw	r24, 0x00	; 0
 186:	01 f0       	breq	.+0      	; 0x188 <realloc+0x188>
		return 0;
	memcpy(memp, ptr, fp1->sz);
 188:	d7 01       	movw	r26, r14
 18a:	4d 91       	ld	r20, X+
 18c:	5c 91       	ld	r21, X
 18e:	b8 01       	movw	r22, r16
 190:	0e 94 00 00 	call	0	; 0x0 <realloc>
	free(ptr);
 194:	c8 01       	movw	r24, r16
 196:	0e 94 00 00 	call	0	; 0x0 <realloc>
 19a:	8e 01       	movw	r16, r28
 19c:	00 c0       	rjmp	.+0      	; 0x19e <realloc+0x19e>
	return memp;
 19e:	00 e0       	ldi	r16, 0x00	; 0
 1a0:	10 e0       	ldi	r17, 0x00	; 0
}
 1a2:	c8 01       	movw	r24, r16
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	1f 91       	pop	r17
 1aa:	0f 91       	pop	r16
 1ac:	ff 90       	pop	r15
 1ae:	ef 90       	pop	r14
 1b0:	df 90       	pop	r13
 1b2:	cf 90       	pop	r12
 1b4:	bf 90       	pop	r11
 1b6:	af 90       	pop	r10
 1b8:	9f 90       	pop	r9
 1ba:	8f 90       	pop	r8
 1bc:	7f 90       	pop	r7
 1be:	6f 90       	pop	r6
 1c0:	08 95       	ret

CDC.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000528  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002ce8  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING

HID.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000528  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002ce8  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING

HardwareSerial.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00001164  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00003c50  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Z11serialEventv 00000002  00000000  00000000  00004de8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.__vector_18 00000076  00000000  00000000  00004dea  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z14serialEventRunv 00000026  00000000  00000000  00004e60  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__vector_19 00000076  00000000  00000000  00004e86  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh 00000088  00000000  00000000  00004efc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh 00000088  00000000  00000000  00004f84  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN14HardwareSerial5beginEm 000000fc  00000000  00000000  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN14HardwareSerial5beginEmh 00000106  00000000  00000000  00005108  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN14HardwareSerial3endEv 000000cc  00000000  00000000  0000520e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN14HardwareSerial9availableEv 00000022  00000000  00000000  000052da  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text._ZN14HardwareSerial4peekEv 00000040  00000000  00000000  000052fc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN14HardwareSerial4readEv 00000052  00000000  00000000  0000533c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN14HardwareSerial5flushEv 00000020  00000000  00000000  0000538e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN14HardwareSerial5writeEh 00000080  00000000  00000000  000053ae  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN14HardwareSerialcvbEv 00000004  00000000  00000000  0000542e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._GLOBAL__I_rx_buffer 000000ac  00000000  00000000  00005432  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .ctors        00000002  00000000  00000000  000054de  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 22 .bss.rx_buffer 00000044  00000000  00000000  000054e0  2**0
                  ALLOC
 23 .bss.tx_buffer 00000044  00000000  00000000  000054e0  2**0
                  ALLOC
 24 .bss.Serial   00000022  00000000  00000000  000054e0  2**0
                  ALLOC
 25 .rodata._ZTV14HardwareSerial 00000010  00000000  00000000  000054e0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 26 .rodata._ZTV6Stream 00000010  00000000  00000000  000054f0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
Disassembly of section .text._Z11serialEventv:

00000000 <_Z11serialEventv>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   0:	08 95       	ret
Disassembly of section .text.__vector_18:

00000000 <__vector_18>:
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	8f 93       	push	r24
  12:	9f 93       	push	r25
  14:	ef 93       	push	r30
  16:	ff 93       	push	r31
  18:	80 91 c0 00 	lds	r24, 0x00C0
  1c:	82 fd       	sbrc	r24, 2
  1e:	00 c0       	rjmp	.+0      	; 0x20 <__vector_18+0x20>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	40 91 c6 00 	lds	r20, 0x00C6
  24:	20 91 00 00 	lds	r18, 0x0000
  28:	30 91 00 00 	lds	r19, 0x0000
{
  _rx_buffer = rx_buffer;
  2c:	2f 5f       	subi	r18, 0xFF	; 255
  2e:	3f 4f       	sbci	r19, 0xFF	; 255
  30:	2f 73       	andi	r18, 0x3F	; 63
  32:	30 70       	andi	r19, 0x00	; 0
  34:	80 91 00 00 	lds	r24, 0x0000
  _tx_buffer = tx_buffer;
  38:	90 91 00 00 	lds	r25, 0x0000
  3c:	28 17       	cp	r18, r24
  3e:	39 07       	cpc	r19, r25
  40:	01 f0       	breq	.+0      	; 0x42 <__vector_18+0x42>
  42:	e0 91 00 00 	lds	r30, 0x0000
  _ubrrh = ubrrh;
  46:	f0 91 00 00 	lds	r31, 0x0000
  4a:	e0 50       	subi	r30, 0x00	; 0
  4c:	f0 40       	sbci	r31, 0x00	; 0
  4e:	40 83       	st	Z, r20
  _ubrrl = ubrrl;
  50:	30 93 00 00 	sts	0x0000, r19
  54:	20 93 00 00 	sts	0x0000, r18
  58:	00 c0       	rjmp	.+0      	; 0x5a <__vector_18+0x5a>
  5a:	80 91 c6 00 	lds	r24, 0x00C6
  _ucsra = ucsra;
  5e:	ff 91       	pop	r31
  60:	ef 91       	pop	r30
  62:	9f 91       	pop	r25
  64:	8f 91       	pop	r24
  66:	4f 91       	pop	r20
  _ucsrb = ucsrb;
  68:	3f 91       	pop	r19
  6a:	2f 91       	pop	r18
  6c:	0f 90       	pop	r0
  6e:	0f be       	out	0x3f, r0	; 63
  70:	0f 90       	pop	r0
  72:	1f 90       	pop	r1
  _ucsrc = ucsrc;
  74:	18 95       	reti
Disassembly of section .text._Z14serialEventRunv:

00000000 <_Z14serialEventRunv>:
   0:	e0 91 00 00 	lds	r30, 0x0000
   4:	f0 91 00 00 	lds	r31, 0x0000
   8:	e0 5c       	subi	r30, 0xC0	; 192
   a:	ff 4f       	sbci	r31, 0xFF	; 255
   c:	81 91       	ld	r24, Z+
   e:	91 91       	ld	r25, Z+
  10:	20 81       	ld	r18, Z
  12:	31 81       	ldd	r19, Z+1	; 0x01
  14:	82 1b       	sub	r24, r18
  16:	93 0b       	sbc	r25, r19
  18:	8f 73       	andi	r24, 0x3F	; 63
  1a:	90 70       	andi	r25, 0x00	; 0
  1c:	89 2b       	or	r24, r25
  1e:	01 f0       	breq	.+0      	; 0x20 <_Z14serialEventRunv+0x20>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
  24:	08 95       	ret
Disassembly of section .text.__vector_19:

00000000 <__vector_19>:
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	8f 93       	push	r24
  10:	9f 93       	push	r25
  12:	ef 93       	push	r30
  14:	ff 93       	push	r31
  16:	20 91 00 00 	lds	r18, 0x0000
  1a:	30 91 00 00 	lds	r19, 0x0000
  1e:	80 91 00 00 	lds	r24, 0x0000
  22:	90 91 00 00 	lds	r25, 0x0000
  26:	28 17       	cp	r18, r24
  28:	39 07       	cpc	r19, r25
  2a:	01 f4       	brne	.+0      	; 0x2c <__vector_19+0x2c>
{
  _rx_buffer = rx_buffer;
  2c:	80 91 c1 00 	lds	r24, 0x00C1
  30:	8f 7d       	andi	r24, 0xDF	; 223
  32:	80 93 c1 00 	sts	0x00C1, r24
  36:	00 c0       	rjmp	.+0      	; 0x38 <__vector_19+0x38>
  _tx_buffer = tx_buffer;
  38:	e0 91 00 00 	lds	r30, 0x0000
  3c:	f0 91 00 00 	lds	r31, 0x0000
  40:	e0 50       	subi	r30, 0x00	; 0
  42:	f0 40       	sbci	r31, 0x00	; 0
  _ubrrh = ubrrh;
  44:	20 81       	ld	r18, Z
  46:	80 91 00 00 	lds	r24, 0x0000
  4a:	90 91 00 00 	lds	r25, 0x0000
  4e:	01 96       	adiw	r24, 0x01	; 1
  _ubrrl = ubrrl;
  50:	8f 73       	andi	r24, 0x3F	; 63
  52:	90 70       	andi	r25, 0x00	; 0
  54:	90 93 00 00 	sts	0x0000, r25
  58:	80 93 00 00 	sts	0x0000, r24
  _ucsra = ucsra;
  5c:	20 93 c6 00 	sts	0x00C6, r18
  60:	ff 91       	pop	r31
  62:	ef 91       	pop	r30
  64:	9f 91       	pop	r25
  66:	8f 91       	pop	r24
  _ucsrb = ucsrb;
  68:	3f 91       	pop	r19
  6a:	2f 91       	pop	r18
  6c:	0f 90       	pop	r0
  6e:	0f be       	out	0x3f, r0	; 63
  70:	0f 90       	pop	r0
  72:	1f 90       	pop	r1
  _ucsrc = ucsrc;
  74:	18 95       	reti
Disassembly of section .text._ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh:

00000000 <_ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	df 93       	push	r29
  16:	cf 93       	push	r28
  18:	cd b7       	in	r28, 0x3d	; 61
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	fc 01       	movw	r30, r24
  1e:	13 82       	std	Z+3, r1	; 0x03

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	12 82       	std	Z+2, r1	; 0x02
  22:	88 ee       	ldi	r24, 0xE8	; 232
  24:	93 e0       	ldi	r25, 0x03	; 3
  26:	a0 e0       	ldi	r26, 0x00	; 0
  28:	b0 e0       	ldi	r27, 0x00	; 0
  2a:	84 83       	std	Z+4, r24	; 0x04
{
  _rx_buffer = rx_buffer;
  2c:	95 83       	std	Z+5, r25	; 0x05
  2e:	a6 83       	std	Z+6, r26	; 0x06
  30:	b7 83       	std	Z+7, r27	; 0x07
  32:	80 e0       	ldi	r24, 0x00	; 0
  34:	90 e0       	ldi	r25, 0x00	; 0
  36:	91 83       	std	Z+1, r25	; 0x01
  _tx_buffer = tx_buffer;
  38:	80 83       	st	Z, r24
  3a:	75 87       	std	Z+13, r23	; 0x0d
  3c:	64 87       	std	Z+12, r22	; 0x0c
  3e:	57 87       	std	Z+15, r21	; 0x0f
  40:	46 87       	std	Z+14, r20	; 0x0e
  42:	31 8b       	std	Z+17, r19	; 0x11
  _ubrrh = ubrrh;
  44:	20 8b       	std	Z+16, r18	; 0x10
  46:	13 8b       	std	Z+19, r17	; 0x13
  48:	02 8b       	std	Z+18, r16	; 0x12
  4a:	f5 8a       	std	Z+21, r15	; 0x15
  4c:	e4 8a       	std	Z+20, r14	; 0x14
  4e:	d7 8a       	std	Z+23, r13	; 0x17
  _ubrrl = ubrrl;
  50:	c6 8a       	std	Z+22, r12	; 0x16
  52:	b1 8e       	std	Z+25, r11	; 0x19
  54:	a0 8e       	std	Z+24, r10	; 0x18
  56:	93 8e       	std	Z+27, r9	; 0x1b
  58:	82 8e       	std	Z+26, r8	; 0x1a
  5a:	8f 85       	ldd	r24, Y+15	; 0x0f
  _ucsra = ucsra;
  5c:	84 8f       	std	Z+28, r24	; 0x1c
  5e:	88 89       	ldd	r24, Y+16	; 0x10
  60:	85 8f       	std	Z+29, r24	; 0x1d
  62:	89 89       	ldd	r24, Y+17	; 0x11
  64:	86 8f       	std	Z+30, r24	; 0x1e
  66:	8a 89       	ldd	r24, Y+18	; 0x12
  _ucsrb = ucsrb;
  68:	87 8f       	std	Z+31, r24	; 0x1f
  6a:	8b 89       	ldd	r24, Y+19	; 0x13
  6c:	80 a3       	std	Z+32, r24	; 0x20
  6e:	cf 91       	pop	r28
  70:	df 91       	pop	r29
  72:	1f 91       	pop	r17
  _ucsrc = ucsrc;
  74:	0f 91       	pop	r16
  76:	ff 90       	pop	r15
  78:	ef 90       	pop	r14
  7a:	df 90       	pop	r13
  7c:	cf 90       	pop	r12
  7e:	bf 90       	pop	r11
  _udr = udr;
  80:	af 90       	pop	r10
  82:	9f 90       	pop	r9
  84:	8f 90       	pop	r8
  86:	08 95       	ret
Disassembly of section .text._ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh:

00000000 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	df 93       	push	r29
  16:	cf 93       	push	r28
  18:	cd b7       	in	r28, 0x3d	; 61
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	fc 01       	movw	r30, r24
  1e:	13 82       	std	Z+3, r1	; 0x03

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	12 82       	std	Z+2, r1	; 0x02
  22:	88 ee       	ldi	r24, 0xE8	; 232
  24:	93 e0       	ldi	r25, 0x03	; 3
  26:	a0 e0       	ldi	r26, 0x00	; 0
  28:	b0 e0       	ldi	r27, 0x00	; 0
  2a:	84 83       	std	Z+4, r24	; 0x04
{
  _rx_buffer = rx_buffer;
  2c:	95 83       	std	Z+5, r25	; 0x05
  2e:	a6 83       	std	Z+6, r26	; 0x06
  30:	b7 83       	std	Z+7, r27	; 0x07
  32:	80 e0       	ldi	r24, 0x00	; 0
  34:	90 e0       	ldi	r25, 0x00	; 0
  36:	91 83       	std	Z+1, r25	; 0x01
  _tx_buffer = tx_buffer;
  38:	80 83       	st	Z, r24
  3a:	75 87       	std	Z+13, r23	; 0x0d
  3c:	64 87       	std	Z+12, r22	; 0x0c
  3e:	57 87       	std	Z+15, r21	; 0x0f
  40:	46 87       	std	Z+14, r20	; 0x0e
  42:	31 8b       	std	Z+17, r19	; 0x11
  _ubrrh = ubrrh;
  44:	20 8b       	std	Z+16, r18	; 0x10
  46:	13 8b       	std	Z+19, r17	; 0x13
  48:	02 8b       	std	Z+18, r16	; 0x12
  4a:	f5 8a       	std	Z+21, r15	; 0x15
  4c:	e4 8a       	std	Z+20, r14	; 0x14
  4e:	d7 8a       	std	Z+23, r13	; 0x17
  _ubrrl = ubrrl;
  50:	c6 8a       	std	Z+22, r12	; 0x16
  52:	b1 8e       	std	Z+25, r11	; 0x19
  54:	a0 8e       	std	Z+24, r10	; 0x18
  56:	93 8e       	std	Z+27, r9	; 0x1b
  58:	82 8e       	std	Z+26, r8	; 0x1a
  5a:	8f 85       	ldd	r24, Y+15	; 0x0f
  _ucsra = ucsra;
  5c:	84 8f       	std	Z+28, r24	; 0x1c
  5e:	88 89       	ldd	r24, Y+16	; 0x10
  60:	85 8f       	std	Z+29, r24	; 0x1d
  62:	89 89       	ldd	r24, Y+17	; 0x11
  64:	86 8f       	std	Z+30, r24	; 0x1e
  66:	8a 89       	ldd	r24, Y+18	; 0x12
  _ucsrb = ucsrb;
  68:	87 8f       	std	Z+31, r24	; 0x1f
  6a:	8b 89       	ldd	r24, Y+19	; 0x13
  6c:	80 a3       	std	Z+32, r24	; 0x20
  6e:	cf 91       	pop	r28
  70:	df 91       	pop	r29
  72:	1f 91       	pop	r17
  _ucsrc = ucsrc;
  74:	0f 91       	pop	r16
  76:	ff 90       	pop	r15
  78:	ef 90       	pop	r14
  7a:	df 90       	pop	r13
  7c:	cf 90       	pop	r12
  7e:	bf 90       	pop	r11
  _udr = udr;
  80:	af 90       	pop	r10
  82:	9f 90       	pop	r9
  84:	8f 90       	pop	r8
  86:	08 95       	ret
Disassembly of section .text._ZN14HardwareSerial5beginEm:

00000000 <_ZN14HardwareSerial5beginEm>:
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	ec 01       	movw	r28, r24
  14:	7a 01       	movw	r14, r20
  16:	8b 01       	movw	r16, r22
  18:	dd 24       	eor	r13, r13
  1a:	d3 94       	inc	r13
  1c:	91 e0       	ldi	r25, 0x01	; 1
  1e:	a9 2e       	mov	r10, r25

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	b1 2c       	mov	r11, r1
  22:	ec 89       	ldd	r30, Y+20	; 0x14
  24:	fd 89       	ldd	r31, Y+21	; 0x15
  26:	dd 20       	and	r13, r13
  28:	01 f0       	breq	.+0      	; 0x2a <_ZN14HardwareSerial5beginEm+0x2a>
  2a:	c5 01       	movw	r24, r10
{
  _rx_buffer = rx_buffer;
  2c:	08 a0       	ldd	r0, Y+32	; 0x20
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZN14HardwareSerial5beginEm+0x30>
  30:	88 0f       	add	r24, r24
  32:	99 1f       	adc	r25, r25
  34:	0a 94       	dec	r0
  36:	02 f4       	brpl	.+0      	; 0x38 <_ZN14HardwareSerial5beginEm+0x38>
  _tx_buffer = tx_buffer;
  38:	80 83       	st	Z, r24
  3a:	60 e8       	ldi	r22, 0x80	; 128
  3c:	74 e8       	ldi	r23, 0x84	; 132
  3e:	8e e1       	ldi	r24, 0x1E	; 30
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	00 c0       	rjmp	.+0      	; 0x44 <_ZN14HardwareSerial5beginEm+0x44>
  _ubrrh = ubrrh;
  44:	10 82       	st	Z, r1
  46:	60 e4       	ldi	r22, 0x40	; 64
  48:	72 e4       	ldi	r23, 0x42	; 66
  4a:	8f e0       	ldi	r24, 0x0F	; 15
  4c:	90 e0       	ldi	r25, 0x00	; 0
  4e:	a8 01       	movw	r20, r16
  _ubrrl = ubrrl;
  50:	97 01       	movw	r18, r14
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerial5beginEm>
  56:	21 50       	subi	r18, 0x01	; 1
  58:	30 40       	sbci	r19, 0x00	; 0
  5a:	40 40       	sbci	r20, 0x00	; 0
  _ucsra = ucsra;
  5c:	50 40       	sbci	r21, 0x00	; 0
  5e:	56 95       	lsr	r21
  60:	47 95       	ror	r20
  62:	37 95       	ror	r19
  64:	27 95       	ror	r18
  66:	80 e1       	ldi	r24, 0x10	; 16
  _ucsrb = ucsrb;
  68:	20 30       	cpi	r18, 0x00	; 0
  6a:	38 07       	cpc	r19, r24
  6c:	00 f0       	brcs	.+0      	; 0x6e <_ZN14HardwareSerial5beginEm+0x6e>
  6e:	dd 20       	and	r13, r13
  70:	01 f0       	breq	.+0      	; 0x72 <_ZN14HardwareSerial5beginEm+0x72>
  72:	dd 24       	eor	r13, r13
  _ucsrc = ucsrc;
  74:	00 c0       	rjmp	.+0      	; 0x76 <_ZN14HardwareSerial5beginEm+0x76>
  76:	e8 89       	ldd	r30, Y+16	; 0x10
  78:	f9 89       	ldd	r31, Y+17	; 0x11
  7a:	30 83       	st	Z, r19
  7c:	ea 89       	ldd	r30, Y+18	; 0x12
  7e:	fb 89       	ldd	r31, Y+19	; 0x13
  _udr = udr;
  80:	20 83       	st	Z, r18
  82:	19 a2       	std	Y+33, r1	; 0x21
  84:	ee 89       	ldd	r30, Y+22	; 0x16
  86:	ff 89       	ldd	r31, Y+23	; 0x17
  88:	40 81       	ld	r20, Z
  8a:	21 e0       	ldi	r18, 0x01	; 1
  _rxen = rxen;
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	c9 01       	movw	r24, r18
  90:	0c 8c       	ldd	r0, Y+28	; 0x1c
  _txen = txen;
  92:	00 c0       	rjmp	.+0      	; 0x94 <_ZN14HardwareSerial5beginEm+0x94>
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  _rxcie = rxcie;
  98:	0a 94       	dec	r0
  9a:	02 f4       	brpl	.+0      	; 0x9c <_ZN14HardwareSerial5beginEm+0x9c>
  9c:	48 2b       	or	r20, r24
  _udrie = udrie;
  9e:	40 83       	st	Z, r20
  a0:	ee 89       	ldd	r30, Y+22	; 0x16
  a2:	ff 89       	ldd	r31, Y+23	; 0x17
  _u2x = u2x;
  a4:	40 81       	ld	r20, Z
  a6:	c9 01       	movw	r24, r18
  a8:	0d 8c       	ldd	r0, Y+29	; 0x1d
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
  aa:	00 c0       	rjmp	.+0      	; 0xac <_ZN14HardwareSerial5beginEm+0xac>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	0a 94       	dec	r0
  b2:	02 f4       	brpl	.+0      	; 0xb4 <_ZN14HardwareSerial5beginEm+0xb4>
  b4:	48 2b       	or	r20, r24
  b6:	40 83       	st	Z, r20
  b8:	ee 89       	ldd	r30, Y+22	; 0x16
  ba:	ff 89       	ldd	r31, Y+23	; 0x17
  bc:	40 81       	ld	r20, Z
  be:	c9 01       	movw	r24, r18
  c0:	0e 8c       	ldd	r0, Y+30	; 0x1e
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <_ZN14HardwareSerial5beginEm+0xc4>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	0a 94       	dec	r0
  ca:	02 f4       	brpl	.+0      	; 0xcc <_ZN14HardwareSerial5beginEm+0xcc>
  cc:	48 2b       	or	r20, r24
  ce:	40 83       	st	Z, r20
  d0:	ee 89       	ldd	r30, Y+22	; 0x16
  d2:	ff 89       	ldd	r31, Y+23	; 0x17
  d4:	80 81       	ld	r24, Z
  d6:	0f 8c       	ldd	r0, Y+31	; 0x1f
  d8:	00 c0       	rjmp	.+0      	; 0xda <_ZN14HardwareSerial5beginEm+0xda>
  da:	22 0f       	add	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	0a 94       	dec	r0
  e0:	02 f4       	brpl	.+0      	; 0xe2 <_ZN14HardwareSerial5beginEm+0xe2>
  e2:	20 95       	com	r18
  e4:	28 23       	and	r18, r24
  e6:	20 83       	st	Z, r18
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	1f 91       	pop	r17
  ee:	0f 91       	pop	r16
  f0:	ff 90       	pop	r15
  f2:	ef 90       	pop	r14
  f4:	df 90       	pop	r13
  f6:	bf 90       	pop	r11
  f8:	af 90       	pop	r10
  fa:	08 95       	ret
Disassembly of section .text._ZN14HardwareSerial5beginEmh:

00000000 <_ZN14HardwareSerial5beginEmh>:
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	ec 01       	movw	r28, r24
  16:	7a 01       	movw	r14, r20
  18:	8b 01       	movw	r16, r22
  1a:	c2 2e       	mov	r12, r18
  1c:	dd 24       	eor	r13, r13
  1e:	d3 94       	inc	r13

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	71 e0       	ldi	r23, 0x01	; 1
  22:	a7 2e       	mov	r10, r23
  24:	b1 2c       	mov	r11, r1
  26:	ec 89       	ldd	r30, Y+20	; 0x14
  28:	fd 89       	ldd	r31, Y+21	; 0x15
  2a:	dd 20       	and	r13, r13
{
  _rx_buffer = rx_buffer;
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN14HardwareSerial5beginEmh+0x2e>
  2e:	c5 01       	movw	r24, r10
  30:	08 a0       	ldd	r0, Y+32	; 0x20
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZN14HardwareSerial5beginEmh+0x34>
  34:	88 0f       	add	r24, r24
  36:	99 1f       	adc	r25, r25
  _tx_buffer = tx_buffer;
  38:	0a 94       	dec	r0
  3a:	02 f4       	brpl	.+0      	; 0x3c <_ZN14HardwareSerial5beginEmh+0x3c>
  3c:	80 83       	st	Z, r24
  3e:	60 e8       	ldi	r22, 0x80	; 128
  40:	74 e8       	ldi	r23, 0x84	; 132
  42:	8e e1       	ldi	r24, 0x1E	; 30
  _ubrrh = ubrrh;
  44:	90 e0       	ldi	r25, 0x00	; 0
  46:	00 c0       	rjmp	.+0      	; 0x48 <_ZN14HardwareSerial5beginEmh+0x48>
  48:	10 82       	st	Z, r1
  4a:	60 e4       	ldi	r22, 0x40	; 64
  4c:	72 e4       	ldi	r23, 0x42	; 66
  4e:	8f e0       	ldi	r24, 0x0F	; 15
  _ubrrl = ubrrl;
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	a8 01       	movw	r20, r16
  54:	97 01       	movw	r18, r14
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerial5beginEmh>
  5a:	21 50       	subi	r18, 0x01	; 1
  _ucsra = ucsra;
  5c:	30 40       	sbci	r19, 0x00	; 0
  5e:	40 40       	sbci	r20, 0x00	; 0
  60:	50 40       	sbci	r21, 0x00	; 0
  62:	56 95       	lsr	r21
  64:	47 95       	ror	r20
  66:	37 95       	ror	r19
  _ucsrb = ucsrb;
  68:	27 95       	ror	r18
  6a:	80 e1       	ldi	r24, 0x10	; 16
  6c:	20 30       	cpi	r18, 0x00	; 0
  6e:	38 07       	cpc	r19, r24
  70:	00 f0       	brcs	.+0      	; 0x72 <_ZN14HardwareSerial5beginEmh+0x72>
  72:	dd 20       	and	r13, r13
  _ucsrc = ucsrc;
  74:	01 f0       	breq	.+0      	; 0x76 <_ZN14HardwareSerial5beginEmh+0x76>
  76:	dd 24       	eor	r13, r13
  78:	00 c0       	rjmp	.+0      	; 0x7a <_ZN14HardwareSerial5beginEmh+0x7a>
  7a:	e8 89       	ldd	r30, Y+16	; 0x10
  7c:	f9 89       	ldd	r31, Y+17	; 0x11
  7e:	30 83       	st	Z, r19
  _udr = udr;
  80:	ea 89       	ldd	r30, Y+18	; 0x12
  82:	fb 89       	ldd	r31, Y+19	; 0x13
  84:	20 83       	st	Z, r18
  86:	e8 8d       	ldd	r30, Y+24	; 0x18
  88:	f9 8d       	ldd	r31, Y+25	; 0x19
  8a:	c0 82       	st	Z, r12
  _rxen = rxen;
  8c:	ee 89       	ldd	r30, Y+22	; 0x16
  8e:	ff 89       	ldd	r31, Y+23	; 0x17
  90:	40 81       	ld	r20, Z
  _txen = txen;
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	c9 01       	movw	r24, r18
  _rxcie = rxcie;
  98:	0c 8c       	ldd	r0, Y+28	; 0x1c
  9a:	00 c0       	rjmp	.+0      	; 0x9c <_ZN14HardwareSerial5beginEmh+0x9c>
  9c:	88 0f       	add	r24, r24
  _udrie = udrie;
  9e:	99 1f       	adc	r25, r25
  a0:	0a 94       	dec	r0
  a2:	02 f4       	brpl	.+0      	; 0xa4 <_ZN14HardwareSerial5beginEmh+0xa4>
  _u2x = u2x;
  a4:	48 2b       	or	r20, r24
  a6:	40 83       	st	Z, r20
  a8:	ee 89       	ldd	r30, Y+22	; 0x16
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
  aa:	ff 89       	ldd	r31, Y+23	; 0x17
  ac:	40 81       	ld	r20, Z
  ae:	c9 01       	movw	r24, r18
  b0:	0d 8c       	ldd	r0, Y+29	; 0x1d
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <_ZN14HardwareSerial5beginEmh+0xb4>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	0a 94       	dec	r0
  ba:	02 f4       	brpl	.+0      	; 0xbc <_ZN14HardwareSerial5beginEmh+0xbc>
  bc:	48 2b       	or	r20, r24
  be:	40 83       	st	Z, r20
  c0:	ee 89       	ldd	r30, Y+22	; 0x16
  c2:	ff 89       	ldd	r31, Y+23	; 0x17
  c4:	40 81       	ld	r20, Z
  c6:	c9 01       	movw	r24, r18
  c8:	0e 8c       	ldd	r0, Y+30	; 0x1e
  ca:	00 c0       	rjmp	.+0      	; 0xcc <_ZN14HardwareSerial5beginEmh+0xcc>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	0a 94       	dec	r0
  d2:	02 f4       	brpl	.+0      	; 0xd4 <_ZN14HardwareSerial5beginEmh+0xd4>
  d4:	48 2b       	or	r20, r24
  d6:	40 83       	st	Z, r20
  d8:	ee 89       	ldd	r30, Y+22	; 0x16
  da:	ff 89       	ldd	r31, Y+23	; 0x17
  dc:	80 81       	ld	r24, Z
  de:	0f 8c       	ldd	r0, Y+31	; 0x1f
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <_ZN14HardwareSerial5beginEmh+0xe2>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	0a 94       	dec	r0
  e8:	02 f4       	brpl	.+0      	; 0xea <_ZN14HardwareSerial5beginEmh+0xea>
  ea:	20 95       	com	r18
  ec:	28 23       	and	r18, r24
  ee:	20 83       	st	Z, r18
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	1f 91       	pop	r17
  f6:	0f 91       	pop	r16
  f8:	ff 90       	pop	r15
  fa:	ef 90       	pop	r14
  fc:	df 90       	pop	r13
  fe:	cf 90       	pop	r12
 100:	bf 90       	pop	r11
 102:	af 90       	pop	r10
 104:	08 95       	ret
Disassembly of section .text._ZN14HardwareSerial3endEv:

00000000 <_ZN14HardwareSerial3endEv>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	dc 01       	movw	r26, r24
   6:	1e 96       	adiw	r26, 0x0e	; 14
   8:	8d 91       	ld	r24, X+
   a:	9c 91       	ld	r25, X
   c:	1f 97       	sbiw	r26, 0x0f	; 15
   e:	ec 01       	movw	r28, r24
  10:	c0 5c       	subi	r28, 0xC0	; 192
  12:	df 4f       	sbci	r29, 0xFF	; 255
  14:	fc 01       	movw	r30, r24
  16:	ee 5b       	subi	r30, 0xBE	; 190
  18:	ff 4f       	sbci	r31, 0xFF	; 255
  1a:	28 81       	ld	r18, Y
  1c:	39 81       	ldd	r19, Y+1	; 0x01
  1e:	80 81       	ld	r24, Z

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	91 81       	ldd	r25, Z+1	; 0x01
  22:	28 17       	cp	r18, r24
  24:	39 07       	cpc	r19, r25
  26:	01 f4       	brne	.+0      	; 0x28 <_ZN14HardwareSerial3endEv+0x28>
  28:	56 96       	adiw	r26, 0x16	; 22
  2a:	ed 91       	ld	r30, X+
{
  _rx_buffer = rx_buffer;
  2c:	fc 91       	ld	r31, X
  2e:	57 97       	sbiw	r26, 0x17	; 23
  30:	40 81       	ld	r20, Z
  32:	21 e0       	ldi	r18, 0x01	; 1
  34:	30 e0       	ldi	r19, 0x00	; 0
  36:	c9 01       	movw	r24, r18
  _tx_buffer = tx_buffer;
  38:	5c 96       	adiw	r26, 0x1c	; 28
  3a:	0c 90       	ld	r0, X
  3c:	5c 97       	sbiw	r26, 0x1c	; 28
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_ZN14HardwareSerial3endEv+0x40>
  40:	88 0f       	add	r24, r24
  42:	99 1f       	adc	r25, r25
  _ubrrh = ubrrh;
  44:	0a 94       	dec	r0
  46:	02 f4       	brpl	.+0      	; 0x48 <_ZN14HardwareSerial3endEv+0x48>
  48:	80 95       	com	r24
  4a:	84 23       	and	r24, r20
  4c:	80 83       	st	Z, r24
  4e:	56 96       	adiw	r26, 0x16	; 22
  _ubrrl = ubrrl;
  50:	ed 91       	ld	r30, X+
  52:	fc 91       	ld	r31, X
  54:	57 97       	sbiw	r26, 0x17	; 23
  56:	40 81       	ld	r20, Z
  58:	c9 01       	movw	r24, r18
  5a:	5d 96       	adiw	r26, 0x1d	; 29
  _ucsra = ucsra;
  5c:	0c 90       	ld	r0, X
  5e:	5d 97       	sbiw	r26, 0x1d	; 29
  60:	00 c0       	rjmp	.+0      	; 0x62 <_ZN14HardwareSerial3endEv+0x62>
  62:	88 0f       	add	r24, r24
  64:	99 1f       	adc	r25, r25
  66:	0a 94       	dec	r0
  _ucsrb = ucsrb;
  68:	02 f4       	brpl	.+0      	; 0x6a <_ZN14HardwareSerial3endEv+0x6a>
  6a:	80 95       	com	r24
  6c:	84 23       	and	r24, r20
  6e:	80 83       	st	Z, r24
  70:	56 96       	adiw	r26, 0x16	; 22
  72:	ed 91       	ld	r30, X+
  _ucsrc = ucsrc;
  74:	fc 91       	ld	r31, X
  76:	57 97       	sbiw	r26, 0x17	; 23
  78:	40 81       	ld	r20, Z
  7a:	c9 01       	movw	r24, r18
  7c:	5e 96       	adiw	r26, 0x1e	; 30
  7e:	0c 90       	ld	r0, X
  _udr = udr;
  80:	5e 97       	sbiw	r26, 0x1e	; 30
  82:	00 c0       	rjmp	.+0      	; 0x84 <_ZN14HardwareSerial3endEv+0x84>
  84:	88 0f       	add	r24, r24
  86:	99 1f       	adc	r25, r25
  88:	0a 94       	dec	r0
  8a:	02 f4       	brpl	.+0      	; 0x8c <_ZN14HardwareSerial3endEv+0x8c>
  _rxen = rxen;
  8c:	80 95       	com	r24
  8e:	84 23       	and	r24, r20
  90:	80 83       	st	Z, r24
  _txen = txen;
  92:	56 96       	adiw	r26, 0x16	; 22
  94:	ed 91       	ld	r30, X+
  96:	fc 91       	ld	r31, X
  _rxcie = rxcie;
  98:	57 97       	sbiw	r26, 0x17	; 23
  9a:	80 81       	ld	r24, Z
  9c:	5f 96       	adiw	r26, 0x1f	; 31
  _udrie = udrie;
  9e:	0c 90       	ld	r0, X
  a0:	5f 97       	sbiw	r26, 0x1f	; 31
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_ZN14HardwareSerial3endEv+0xa4>
  _u2x = u2x;
  a4:	22 0f       	add	r18, r18
  a6:	33 1f       	adc	r19, r19
  a8:	0a 94       	dec	r0
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
  aa:	02 f4       	brpl	.+0      	; 0xac <_ZN14HardwareSerial3endEv+0xac>
  ac:	20 95       	com	r18
  ae:	28 23       	and	r18, r24
  b0:	20 83       	st	Z, r18
  b2:	1c 96       	adiw	r26, 0x0c	; 12
  b4:	ed 91       	ld	r30, X+
  b6:	fc 91       	ld	r31, X
  b8:	1d 97       	sbiw	r26, 0x0d	; 13
  ba:	ee 5b       	subi	r30, 0xBE	; 190
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	80 81       	ld	r24, Z
  c0:	91 81       	ldd	r25, Z+1	; 0x01
  c2:	92 93       	st	-Z, r25
  c4:	82 93       	st	-Z, r24
  c6:	df 91       	pop	r29
  c8:	cf 91       	pop	r28
  ca:	08 95       	ret
Disassembly of section .text._ZN14HardwareSerial9availableEv:

00000000 <_ZN14HardwareSerial9availableEv>:
   0:	dc 01       	movw	r26, r24
   2:	1c 96       	adiw	r26, 0x0c	; 12
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	1d 97       	sbiw	r26, 0x0d	; 13
   a:	e0 5c       	subi	r30, 0xC0	; 192
   c:	ff 4f       	sbci	r31, 0xFF	; 255
   e:	21 91       	ld	r18, Z+
  10:	31 91       	ld	r19, Z+
  12:	80 81       	ld	r24, Z
  14:	91 81       	ldd	r25, Z+1	; 0x01
  16:	28 1b       	sub	r18, r24
  18:	39 0b       	sbc	r19, r25
  1a:	2f 73       	andi	r18, 0x3F	; 63
  1c:	30 70       	andi	r19, 0x00	; 0
  1e:	c9 01       	movw	r24, r18

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	08 95       	ret
Disassembly of section .text._ZN14HardwareSerial4peekEv:

00000000 <_ZN14HardwareSerial4peekEv>:
   0:	dc 01       	movw	r26, r24
   2:	1c 96       	adiw	r26, 0x0c	; 12
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	1d 97       	sbiw	r26, 0x0d	; 13
   a:	e0 5c       	subi	r30, 0xC0	; 192
   c:	ff 4f       	sbci	r31, 0xFF	; 255
   e:	20 81       	ld	r18, Z
  10:	31 81       	ldd	r19, Z+1	; 0x01
  12:	e0 54       	subi	r30, 0x40	; 64
  14:	f0 40       	sbci	r31, 0x00	; 0
  16:	df 01       	movw	r26, r30
  18:	ae 5b       	subi	r26, 0xBE	; 190
  1a:	bf 4f       	sbci	r27, 0xFF	; 255
  1c:	8d 91       	ld	r24, X+
  1e:	9c 91       	ld	r25, X
  20:	11 97       	sbiw	r26, 0x01	; 1
  22:	28 17       	cp	r18, r24
  24:	39 07       	cpc	r19, r25
  26:	01 f4       	brne	.+0      	; 0x28 <_ZN14HardwareSerial4peekEv+0x28>
  28:	2f ef       	ldi	r18, 0xFF	; 255
  2a:	3f ef       	ldi	r19, 0xFF	; 255
{
  _rx_buffer = rx_buffer;
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN14HardwareSerial4peekEv+0x2e>
  2e:	8d 91       	ld	r24, X+
  30:	9c 91       	ld	r25, X
  32:	e8 0f       	add	r30, r24
  34:	f9 1f       	adc	r31, r25
  36:	80 81       	ld	r24, Z
  _tx_buffer = tx_buffer;
  38:	28 2f       	mov	r18, r24
  3a:	30 e0       	ldi	r19, 0x00	; 0
  3c:	c9 01       	movw	r24, r18
  3e:	08 95       	ret
Disassembly of section .text._ZN14HardwareSerial4readEv:

00000000 <_ZN14HardwareSerial4readEv>:
   0:	dc 01       	movw	r26, r24
   2:	1c 96       	adiw	r26, 0x0c	; 12
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	1d 97       	sbiw	r26, 0x0d	; 13
   a:	e0 5c       	subi	r30, 0xC0	; 192
   c:	ff 4f       	sbci	r31, 0xFF	; 255
   e:	20 81       	ld	r18, Z
  10:	31 81       	ldd	r19, Z+1	; 0x01
  12:	e0 54       	subi	r30, 0x40	; 64
  14:	f0 40       	sbci	r31, 0x00	; 0
  16:	df 01       	movw	r26, r30
  18:	ae 5b       	subi	r26, 0xBE	; 190
  1a:	bf 4f       	sbci	r27, 0xFF	; 255
  1c:	8d 91       	ld	r24, X+
  1e:	9c 91       	ld	r25, X

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	11 97       	sbiw	r26, 0x01	; 1
  22:	28 17       	cp	r18, r24
  24:	39 07       	cpc	r19, r25
  26:	01 f4       	brne	.+0      	; 0x28 <_ZN14HardwareSerial4readEv+0x28>
  28:	2f ef       	ldi	r18, 0xFF	; 255
  2a:	3f ef       	ldi	r19, 0xFF	; 255
{
  _rx_buffer = rx_buffer;
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN14HardwareSerial4readEv+0x2e>
  2e:	8d 91       	ld	r24, X+
  30:	9c 91       	ld	r25, X
  32:	11 97       	sbiw	r26, 0x01	; 1
  34:	e8 0f       	add	r30, r24
  36:	f9 1f       	adc	r31, r25
  _tx_buffer = tx_buffer;
  38:	20 81       	ld	r18, Z
  3a:	8d 91       	ld	r24, X+
  3c:	9c 91       	ld	r25, X
  3e:	11 97       	sbiw	r26, 0x01	; 1
  40:	01 96       	adiw	r24, 0x01	; 1
  42:	8f 73       	andi	r24, 0x3F	; 63
  _ubrrh = ubrrh;
  44:	90 70       	andi	r25, 0x00	; 0
  46:	11 96       	adiw	r26, 0x01	; 1
  48:	9c 93       	st	X, r25
  4a:	8e 93       	st	-X, r24
  4c:	30 e0       	ldi	r19, 0x00	; 0
  4e:	c9 01       	movw	r24, r18
  _ubrrl = ubrrl;
  50:	08 95       	ret
Disassembly of section .text._ZN14HardwareSerial5flushEv:

00000000 <_ZN14HardwareSerial5flushEv>:
   0:	dc 01       	movw	r26, r24
   2:	91 96       	adiw	r26, 0x21	; 33
   4:	8c 91       	ld	r24, X
   6:	91 97       	sbiw	r26, 0x21	; 33
   8:	88 23       	and	r24, r24
   a:	01 f0       	breq	.+0      	; 0xc <_ZN14HardwareSerial5flushEv+0xc>
   c:	54 96       	adiw	r26, 0x14	; 20
   e:	ed 91       	ld	r30, X+
  10:	fc 91       	ld	r31, X
  12:	55 97       	sbiw	r26, 0x15	; 21
  14:	80 81       	ld	r24, Z
  16:	86 ff       	sbrs	r24, 6
  18:	00 c0       	rjmp	.+0      	; 0x1a <_ZN14HardwareSerial5flushEv+0x1a>
  1a:	91 96       	adiw	r26, 0x21	; 33
  1c:	1c 92       	st	X, r1
  1e:	08 95       	ret
Disassembly of section .text._ZN14HardwareSerial5writeEh:

00000000 <_ZN14HardwareSerial5writeEh>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	ee 85       	ldd	r30, Y+14	; 0x0e
   8:	ff 85       	ldd	r31, Y+15	; 0x0f
   a:	e0 5c       	subi	r30, 0xC0	; 192
   c:	ff 4f       	sbci	r31, 0xFF	; 255
   e:	20 81       	ld	r18, Z
  10:	31 81       	ldd	r19, Z+1	; 0x01
  12:	e0 54       	subi	r30, 0x40	; 64
  14:	f0 40       	sbci	r31, 0x00	; 0
  16:	2f 5f       	subi	r18, 0xFF	; 255
  18:	3f 4f       	sbci	r19, 0xFF	; 255
  1a:	2f 73       	andi	r18, 0x3F	; 63
  1c:	30 70       	andi	r19, 0x00	; 0
  1e:	df 01       	movw	r26, r30

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	ae 5b       	subi	r26, 0xBE	; 190
  22:	bf 4f       	sbci	r27, 0xFF	; 255
  24:	8d 91       	ld	r24, X+
  26:	9c 91       	ld	r25, X
  28:	11 97       	sbiw	r26, 0x01	; 1
  2a:	28 17       	cp	r18, r24
{
  _rx_buffer = rx_buffer;
  2c:	39 07       	cpc	r19, r25
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZN14HardwareSerial5writeEh+0x30>
  30:	e0 5c       	subi	r30, 0xC0	; 192
  32:	ff 4f       	sbci	r31, 0xFF	; 255
  34:	80 81       	ld	r24, Z
  36:	91 81       	ldd	r25, Z+1	; 0x01
  _tx_buffer = tx_buffer;
  38:	e0 54       	subi	r30, 0x40	; 64
  3a:	f0 40       	sbci	r31, 0x00	; 0
  3c:	e8 0f       	add	r30, r24
  3e:	f9 1f       	adc	r31, r25
  40:	60 83       	st	Z, r22
  42:	ee 85       	ldd	r30, Y+14	; 0x0e
  _ubrrh = ubrrh;
  44:	ff 85       	ldd	r31, Y+15	; 0x0f
  46:	e0 5c       	subi	r30, 0xC0	; 192
  48:	ff 4f       	sbci	r31, 0xFF	; 255
  4a:	31 83       	std	Z+1, r19	; 0x01
  4c:	20 83       	st	Z, r18
  4e:	ee 89       	ldd	r30, Y+22	; 0x16
  _ubrrl = ubrrl;
  50:	ff 89       	ldd	r31, Y+23	; 0x17
  52:	20 81       	ld	r18, Z
  54:	81 e0       	ldi	r24, 0x01	; 1
  56:	90 e0       	ldi	r25, 0x00	; 0
  58:	0f 8c       	ldd	r0, Y+31	; 0x1f
  5a:	00 c0       	rjmp	.+0      	; 0x5c <_ZN14HardwareSerial5writeEh+0x5c>
  _ucsra = ucsra;
  5c:	88 0f       	add	r24, r24
  5e:	99 1f       	adc	r25, r25
  60:	0a 94       	dec	r0
  62:	02 f4       	brpl	.+0      	; 0x64 <_ZN14HardwareSerial5writeEh+0x64>
  64:	28 2b       	or	r18, r24
  66:	20 83       	st	Z, r18
  _ucsrb = ucsrb;
  68:	81 e0       	ldi	r24, 0x01	; 1
  6a:	89 a3       	std	Y+33, r24	; 0x21
  6c:	ec 89       	ldd	r30, Y+20	; 0x14
  6e:	fd 89       	ldd	r31, Y+21	; 0x15
  70:	80 81       	ld	r24, Z
  72:	80 64       	ori	r24, 0x40	; 64
  _ucsrc = ucsrc;
  74:	80 83       	st	Z, r24
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	df 91       	pop	r29
  7c:	cf 91       	pop	r28
  7e:	08 95       	ret
Disassembly of section .text._ZN14HardwareSerialcvbEv:

00000000 <_ZN14HardwareSerialcvbEv>:
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	08 95       	ret
Disassembly of section .text._GLOBAL__I_rx_buffer:

00000000 <_GLOBAL__I_rx_buffer>:
   0:	10 92 00 00 	sts	0x0000, r1
   4:	10 92 00 00 	sts	0x0000, r1
   8:	88 ee       	ldi	r24, 0xE8	; 232
   a:	93 e0       	ldi	r25, 0x03	; 3
   c:	a0 e0       	ldi	r26, 0x00	; 0
   e:	b0 e0       	ldi	r27, 0x00	; 0
  10:	80 93 00 00 	sts	0x0000, r24
  14:	90 93 00 00 	sts	0x0000, r25
  18:	a0 93 00 00 	sts	0x0000, r26
  1c:	b0 93 00 00 	sts	0x0000, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	80 e0       	ldi	r24, 0x00	; 0
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	90 93 00 00 	sts	0x0000, r25
  28:	80 93 00 00 	sts	0x0000, r24
{
  _rx_buffer = rx_buffer;
  2c:	80 e0       	ldi	r24, 0x00	; 0
  2e:	90 e0       	ldi	r25, 0x00	; 0
  30:	90 93 00 00 	sts	0x0000, r25
  34:	80 93 00 00 	sts	0x0000, r24
  _tx_buffer = tx_buffer;
  38:	80 e0       	ldi	r24, 0x00	; 0
  3a:	90 e0       	ldi	r25, 0x00	; 0
  3c:	90 93 00 00 	sts	0x0000, r25
  40:	80 93 00 00 	sts	0x0000, r24
  _ubrrh = ubrrh;
  44:	85 ec       	ldi	r24, 0xC5	; 197
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	90 93 00 00 	sts	0x0000, r25
  4c:	80 93 00 00 	sts	0x0000, r24
  _ubrrl = ubrrl;
  50:	84 ec       	ldi	r24, 0xC4	; 196
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	90 93 00 00 	sts	0x0000, r25
  58:	80 93 00 00 	sts	0x0000, r24
  _ucsra = ucsra;
  5c:	80 ec       	ldi	r24, 0xC0	; 192
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	90 93 00 00 	sts	0x0000, r25
  64:	80 93 00 00 	sts	0x0000, r24
  _ucsrb = ucsrb;
  68:	81 ec       	ldi	r24, 0xC1	; 193
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	90 93 00 00 	sts	0x0000, r25
  70:	80 93 00 00 	sts	0x0000, r24
  _ucsrc = ucsrc;
  74:	82 ec       	ldi	r24, 0xC2	; 194
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	90 93 00 00 	sts	0x0000, r25
  7c:	80 93 00 00 	sts	0x0000, r24
  _udr = udr;
  80:	86 ec       	ldi	r24, 0xC6	; 198
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	90 93 00 00 	sts	0x0000, r25
  88:	80 93 00 00 	sts	0x0000, r24
  _rxen = rxen;
  8c:	84 e0       	ldi	r24, 0x04	; 4
  8e:	80 93 00 00 	sts	0x0000, r24
  _txen = txen;
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	80 93 00 00 	sts	0x0000, r24
  _rxcie = rxcie;
  98:	87 e0       	ldi	r24, 0x07	; 7
  9a:	80 93 00 00 	sts	0x0000, r24
  _udrie = udrie;
  9e:	85 e0       	ldi	r24, 0x05	; 5
  a0:	80 93 00 00 	sts	0x0000, r24
  _u2x = u2x;
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 93 00 00 	sts	0x0000, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
  aa:	08 95       	ret

IPAddress.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000bd0  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000038a9  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN9IPAddressC2Ehhhh 00000018  00000000  00000000  000044ad  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN9IPAddressC1Ehhhh 00000018  00000000  00000000  000044c5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._GLOBAL__I__ZN9IPAddressC2Ev 0000001e  00000000  00000000  000044dd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .ctors        00000002  00000000  00000000  000044fb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
  9 .text._ZNK9IPAddress7printToER5Print 00000084  00000000  00000000  000044fd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN9IPAddresseqEPKh 0000001e  00000000  00000000  00004581  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN9IPAddressaSEm 00000024  00000000  00000000  0000459f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN9IPAddressaSEPKh 0000001a  00000000  00000000  000045c3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text._ZN9IPAddressC1EPKh 00000022  00000000  00000000  000045dd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN9IPAddressC2EPKh 00000022  00000000  00000000  000045ff  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN9IPAddressC1Em 0000002c  00000000  00000000  00004621  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN9IPAddressC2Em 0000002c  00000000  00000000  0000464d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN9IPAddressC1Ev 00000014  00000000  00000000  00004679  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN9IPAddressC2Ev 00000014  00000000  00000000  0000468d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .rodata._ZTV9IPAddress 00000006  00000000  00000000  000046a1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 20 .bss._ZL11INADDR_NONE 00000006  00000000  00000000  000046a7  2**0
                  ALLOC
 21 .rodata._ZTV9Printable 00000006  00000000  00000000  000046a7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
Disassembly of section .text._ZN9IPAddressC2Ehhhh:

00000000 <_ZN9IPAddressC2Ehhhh>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	0f 93       	push	r16
   2:	fc 01       	movw	r30, r24
   4:	80 e0       	ldi	r24, 0x00	; 0
   6:	90 e0       	ldi	r25, 0x00	; 0
   8:	91 83       	std	Z+1, r25	; 0x01
{
    memset(_address, 0, sizeof(_address));
   a:	80 83       	st	Z, r24
   c:	62 83       	std	Z+2, r22	; 0x02
   e:	43 83       	std	Z+3, r20	; 0x03
  10:	24 83       	std	Z+4, r18	; 0x04
}
  12:	05 83       	std	Z+5, r16	; 0x05
  14:	0f 91       	pop	r16
  16:	08 95       	ret
Disassembly of section .text._ZN9IPAddressC1Ehhhh:

00000000 <_ZN9IPAddressC1Ehhhh>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	0f 93       	push	r16
   2:	fc 01       	movw	r30, r24
   4:	80 e0       	ldi	r24, 0x00	; 0
   6:	90 e0       	ldi	r25, 0x00	; 0
   8:	91 83       	std	Z+1, r25	; 0x01
{
    memset(_address, 0, sizeof(_address));
   a:	80 83       	st	Z, r24
   c:	62 83       	std	Z+2, r22	; 0x02
   e:	43 83       	std	Z+3, r20	; 0x03
  10:	24 83       	std	Z+4, r18	; 0x04
}
  12:	05 83       	std	Z+5, r16	; 0x05
  14:	0f 91       	pop	r16
  16:	08 95       	ret
Disassembly of section .text._GLOBAL__I__ZN9IPAddressC2Ev:

00000000 <_GLOBAL__I__ZN9IPAddressC2Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	80 e0       	ldi	r24, 0x00	; 0
   2:	90 e0       	ldi	r25, 0x00	; 0
   4:	90 93 00 00 	sts	0x0000, r25
   8:	80 93 00 00 	sts	0x0000, r24
{
    memset(_address, 0, sizeof(_address));
   c:	10 92 00 00 	sts	0x0000, r1
  10:	10 92 00 00 	sts	0x0000, r1
}
  14:	10 92 00 00 	sts	0x0000, r1
  18:	10 92 00 00 	sts	0x0000, r1
  1c:	08 95       	ret
Disassembly of section .text._ZNK9IPAddress7printToER5Print:

00000000 <_ZNK9IPAddress7printToER5Print>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
{
    memset(_address, 0, sizeof(_address));
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
}
  12:	1f 93       	push	r17
  14:	cf 93       	push	r28
  16:	df 93       	push	r29
  18:	4c 01       	movw	r8, r24
  1a:	6b 01       	movw	r12, r22
  1c:	7c 01       	movw	r14, r24
  1e:	aa 24       	eor	r10, r10
  20:	bb 24       	eor	r11, r11
  22:	c0 e0       	ldi	r28, 0x00	; 0
  24:	d0 e0       	ldi	r29, 0x00	; 0
  26:	c6 01       	movw	r24, r12
  28:	f7 01       	movw	r30, r14
  2a:	62 81       	ldd	r22, Z+2	; 0x02
  2c:	4a e0       	ldi	r20, 0x0A	; 10
  2e:	50 e0       	ldi	r21, 0x00	; 0
  30:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  34:	8c 01       	movw	r16, r24
  36:	c6 01       	movw	r24, r12
  38:	6e e2       	ldi	r22, 0x2E	; 46
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  3e:	08 0f       	add	r16, r24
  40:	19 1f       	adc	r17, r25
  42:	a0 0e       	add	r10, r16
  44:	b1 1e       	adc	r11, r17
  46:	21 96       	adiw	r28, 0x01	; 1
  48:	08 94       	sec
  4a:	e1 1c       	adc	r14, r1
  4c:	f1 1c       	adc	r15, r1
  4e:	c3 30       	cpi	r28, 0x03	; 3
  50:	d1 05       	cpc	r29, r1
  52:	01 f4       	brne	.+0      	; 0x54 <_ZNK9IPAddress7printToER5Print+0x54>
  54:	c6 01       	movw	r24, r12
  56:	f4 01       	movw	r30, r8
  58:	65 81       	ldd	r22, Z+5	; 0x05
  5a:	4a e0       	ldi	r20, 0x0A	; 10
  5c:	50 e0       	ldi	r21, 0x00	; 0
  5e:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  62:	95 01       	movw	r18, r10
  64:	28 0f       	add	r18, r24
  66:	39 1f       	adc	r19, r25
  68:	c9 01       	movw	r24, r18
  6a:	df 91       	pop	r29
  6c:	cf 91       	pop	r28
  6e:	1f 91       	pop	r17
  70:	0f 91       	pop	r16
  72:	ff 90       	pop	r15
  74:	ef 90       	pop	r14
  76:	df 90       	pop	r13
  78:	cf 90       	pop	r12
  7a:	bf 90       	pop	r11
  7c:	af 90       	pop	r10
  7e:	9f 90       	pop	r9
  80:	8f 90       	pop	r8
  82:	08 95       	ret
Disassembly of section .text._ZN9IPAddresseqEPKh:

00000000 <_ZN9IPAddresseqEPKh>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	9c 01       	movw	r18, r24
   2:	2e 5f       	subi	r18, 0xFE	; 254
   4:	3f 4f       	sbci	r19, 0xFF	; 255
   6:	cb 01       	movw	r24, r22
   8:	b9 01       	movw	r22, r18
{
    memset(_address, 0, sizeof(_address));
   a:	44 e0       	ldi	r20, 0x04	; 4
   c:	50 e0       	ldi	r21, 0x00	; 0
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresseqEPKh>
}
  12:	9c 01       	movw	r18, r24
  14:	80 e0       	ldi	r24, 0x00	; 0
  16:	23 2b       	or	r18, r19
  18:	01 f4       	brne	.+0      	; 0x1a <_ZN9IPAddresseqEPKh+0x1a>
  1a:	81 e0       	ldi	r24, 0x01	; 1
  1c:	08 95       	ret
Disassembly of section .text._ZN9IPAddressaSEm:

00000000 <_ZN9IPAddressaSEm>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9IPAddressaSEm+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN9IPAddressaSEm+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
{
    memset(_address, 0, sizeof(_address));
   a:	de b7       	in	r29, 0x3e	; 62
   c:	fc 01       	movw	r30, r24
   e:	42 83       	std	Z+2, r20	; 0x02
  10:	53 83       	std	Z+3, r21	; 0x03
}
  12:	64 83       	std	Z+4, r22	; 0x04
  14:	75 83       	std	Z+5, r23	; 0x05
  16:	0f 90       	pop	r0
  18:	0f 90       	pop	r0
  1a:	0f 90       	pop	r0
  1c:	0f 90       	pop	r0
  1e:	cf 91       	pop	r28
  20:	df 91       	pop	r29
  22:	08 95       	ret
Disassembly of section .text._ZN9IPAddressaSEPKh:

00000000 <_ZN9IPAddressaSEPKh>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	9c 01       	movw	r18, r24
   2:	fb 01       	movw	r30, r22
   4:	80 81       	ld	r24, Z
   6:	91 81       	ldd	r25, Z+1	; 0x01
   8:	a2 81       	ldd	r26, Z+2	; 0x02
{
    memset(_address, 0, sizeof(_address));
   a:	b3 81       	ldd	r27, Z+3	; 0x03
   c:	f9 01       	movw	r30, r18
   e:	82 83       	std	Z+2, r24	; 0x02
  10:	93 83       	std	Z+3, r25	; 0x03
}
  12:	a4 83       	std	Z+4, r26	; 0x04
  14:	b5 83       	std	Z+5, r27	; 0x05
  16:	c9 01       	movw	r24, r18
  18:	08 95       	ret
Disassembly of section .text._ZN9IPAddressC1EPKh:

00000000 <_ZN9IPAddressC1EPKh>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	9c 01       	movw	r18, r24
   2:	fb 01       	movw	r30, r22
   4:	80 e0       	ldi	r24, 0x00	; 0
   6:	90 e0       	ldi	r25, 0x00	; 0
   8:	d9 01       	movw	r26, r18
{
    memset(_address, 0, sizeof(_address));
   a:	8d 93       	st	X+, r24
   c:	9c 93       	st	X, r25
   e:	80 81       	ld	r24, Z
  10:	91 81       	ldd	r25, Z+1	; 0x01
}
  12:	a2 81       	ldd	r26, Z+2	; 0x02
  14:	b3 81       	ldd	r27, Z+3	; 0x03
  16:	f9 01       	movw	r30, r18
  18:	82 83       	std	Z+2, r24	; 0x02
  1a:	93 83       	std	Z+3, r25	; 0x03
  1c:	a4 83       	std	Z+4, r26	; 0x04
  1e:	b5 83       	std	Z+5, r27	; 0x05
  20:	08 95       	ret
Disassembly of section .text._ZN9IPAddressC2EPKh:

00000000 <_ZN9IPAddressC2EPKh>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	9c 01       	movw	r18, r24
   2:	fb 01       	movw	r30, r22
   4:	80 e0       	ldi	r24, 0x00	; 0
   6:	90 e0       	ldi	r25, 0x00	; 0
   8:	d9 01       	movw	r26, r18
{
    memset(_address, 0, sizeof(_address));
   a:	8d 93       	st	X+, r24
   c:	9c 93       	st	X, r25
   e:	80 81       	ld	r24, Z
  10:	91 81       	ldd	r25, Z+1	; 0x01
}
  12:	a2 81       	ldd	r26, Z+2	; 0x02
  14:	b3 81       	ldd	r27, Z+3	; 0x03
  16:	f9 01       	movw	r30, r18
  18:	82 83       	std	Z+2, r24	; 0x02
  1a:	93 83       	std	Z+3, r25	; 0x03
  1c:	a4 83       	std	Z+4, r26	; 0x04
  1e:	b5 83       	std	Z+5, r27	; 0x05
  20:	08 95       	ret
Disassembly of section .text._ZN9IPAddressC1Em:

00000000 <_ZN9IPAddressC1Em>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9IPAddressC1Em+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN9IPAddressC1Em+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
{
    memset(_address, 0, sizeof(_address));
   a:	de b7       	in	r29, 0x3e	; 62
   c:	fc 01       	movw	r30, r24
   e:	80 e0       	ldi	r24, 0x00	; 0
  10:	90 e0       	ldi	r25, 0x00	; 0
}
  12:	91 83       	std	Z+1, r25	; 0x01
  14:	80 83       	st	Z, r24
  16:	42 83       	std	Z+2, r20	; 0x02
  18:	53 83       	std	Z+3, r21	; 0x03
  1a:	64 83       	std	Z+4, r22	; 0x04
  1c:	75 83       	std	Z+5, r23	; 0x05
  1e:	0f 90       	pop	r0
  20:	0f 90       	pop	r0
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	cf 91       	pop	r28
  28:	df 91       	pop	r29
  2a:	08 95       	ret
Disassembly of section .text._ZN9IPAddressC2Em:

00000000 <_ZN9IPAddressC2Em>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9IPAddressC2Em+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN9IPAddressC2Em+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
{
    memset(_address, 0, sizeof(_address));
   a:	de b7       	in	r29, 0x3e	; 62
   c:	fc 01       	movw	r30, r24
   e:	80 e0       	ldi	r24, 0x00	; 0
  10:	90 e0       	ldi	r25, 0x00	; 0
}
  12:	91 83       	std	Z+1, r25	; 0x01
  14:	80 83       	st	Z, r24
  16:	42 83       	std	Z+2, r20	; 0x02
  18:	53 83       	std	Z+3, r21	; 0x03
  1a:	64 83       	std	Z+4, r22	; 0x04
  1c:	75 83       	std	Z+5, r23	; 0x05
  1e:	0f 90       	pop	r0
  20:	0f 90       	pop	r0
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	cf 91       	pop	r28
  28:	df 91       	pop	r29
  2a:	08 95       	ret
Disassembly of section .text._ZN9IPAddressC1Ev:

00000000 <_ZN9IPAddressC1Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
   a:	12 82       	std	Z+2, r1	; 0x02
   c:	13 82       	std	Z+3, r1	; 0x03
   e:	14 82       	std	Z+4, r1	; 0x04
  10:	15 82       	std	Z+5, r1	; 0x05
}
  12:	08 95       	ret
Disassembly of section .text._ZN9IPAddressC2Ev:

00000000 <_ZN9IPAddressC2Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
   a:	12 82       	std	Z+2, r1	; 0x02
   c:	13 82       	std	Z+3, r1	; 0x03
   e:	14 82       	std	Z+4, r1	; 0x04
  10:	15 82       	std	Z+5, r1	; 0x05
}
  12:	08 95       	ret

Print.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000042  2**0
                  ALLOC
  3 .stab         00001398  00000000  00000000  00000044  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00003cc3  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN5Print5writeEPKhj 00000054  00000000  00000000  0000509f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN5Print5printEPK19__FlashStringHelper 00000046  00000000  00000000  000050f3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN5Print5printEc 00000010  00000000  00000000  00005139  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text._ZN5Print5printERK9Printable 00000016  00000000  00000000  00005149  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text._ZN5Print7printlnEv 00000040  00000000  00000000  0000515f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text._ZN5Print7printlnEPK19__FlashStringHelper 00000028  00000000  00000000  0000519f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN5Print7printlnEc 00000030  00000000  00000000  000051c7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN5Print7printlnERK9Printable 00000034  00000000  00000000  000051f7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN5Print5writeEPKc 00000038  00000000  00000000  0000522b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN5Print11printNumberEmh 000000c8  00000000  00000000  00005263  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN5Print5printEmi 0000001e  00000000  00000000  0000532b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN5Print7printlnEmi 00000028  00000000  00000000  00005349  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN5Print5printEji 00000022  00000000  00000000  00005371  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN5Print7printlnEji 0000003a  00000000  00000000  00005393  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN5Print5printEhi 00000024  00000000  00000000  000053cd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN5Print7printlnEhi 0000003c  00000000  00000000  000053f1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN5Print5printEli 00000080  00000000  00000000  0000542d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN5Print7printlnEli 00000028  00000000  00000000  000054ad  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN5Print5printEii 00000026  00000000  00000000  000054d5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN5Print7printlnEii 0000003e  00000000  00000000  000054fb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN5Print5printEPKc 00000006  00000000  00000000  00005539  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN5Print10printFloatEdh 000001c8  00000000  00000000  0000553f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN5Print5printEdi 00000006  00000000  00000000  00005707  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN5Print7printlnEdi 00000026  00000000  00000000  0000570d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZN5Print7printlnEPKc 00000026  00000000  00000000  00005733  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZN5Print5printERK6String 00000066  00000000  00000000  00005759  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text._ZN5Print7printlnERK6String 00000028  00000000  00000000  000057bf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .rodata._ZTV5Print 00000008  00000000  00000000  000057e7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
Disassembly of section .text._ZN5Print5writeEPKhj:

00000000 <_ZN5Print5writeEPKhj>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
{
  size_t n = print(s);
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  n += println();
  10:	7c 01       	movw	r14, r24
  12:	6b 01       	movw	r12, r22
  14:	8a 01       	movw	r16, r20
  16:	c0 e0       	ldi	r28, 0x00	; 0
  18:	d0 e0       	ldi	r29, 0x00	; 0
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN5Print5writeEPKhj+0x1c>
  return n;
}
  1c:	d6 01       	movw	r26, r12
  1e:	6d 91       	ld	r22, X+
  20:	6d 01       	movw	r12, r26
  22:	d7 01       	movw	r26, r14
  24:	ed 91       	ld	r30, X+
  26:	fc 91       	ld	r31, X
  28:	01 90       	ld	r0, Z+
  2a:	f0 81       	ld	r31, Z
  2c:	e0 2d       	mov	r30, r0
  2e:	c7 01       	movw	r24, r14
  30:	09 95       	icall
  32:	c8 0f       	add	r28, r24
  34:	d9 1f       	adc	r29, r25
  36:	01 50       	subi	r16, 0x01	; 1
  38:	10 40       	sbci	r17, 0x00	; 0
  3a:	01 15       	cp	r16, r1
  3c:	11 05       	cpc	r17, r1
  3e:	01 f4       	brne	.+0      	; 0x40 <_ZN5Print5writeEPKhj+0x40>
  40:	ce 01       	movw	r24, r28
  42:	df 91       	pop	r29
  44:	cf 91       	pop	r28
  46:	1f 91       	pop	r17
  48:	0f 91       	pop	r16
  4a:	ff 90       	pop	r15
  4c:	ef 90       	pop	r14
  4e:	df 90       	pop	r13
  50:	cf 90       	pop	r12
  52:	08 95       	ret
Disassembly of section .text._ZN5Print5printEPK19__FlashStringHelper:

00000000 <_ZN5Print5printEPK19__FlashStringHelper>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
{
  size_t n = print(s);
   a:	df 93       	push	r29
   c:	7c 01       	movw	r14, r24
   e:	8b 01       	movw	r16, r22
  n += println();
  10:	c0 e0       	ldi	r28, 0x00	; 0
  12:	d0 e0       	ldi	r29, 0x00	; 0
  14:	f8 01       	movw	r30, r16
  16:	0f 5f       	subi	r16, 0xFF	; 255
  18:	1f 4f       	sbci	r17, 0xFF	; 255
  1a:	64 91       	lpm	r22, Z+
  return n;
}
  1c:	66 23       	and	r22, r22
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN5Print5printEPK19__FlashStringHelper+0x20>
  20:	d7 01       	movw	r26, r14
  22:	ed 91       	ld	r30, X+
  24:	fc 91       	ld	r31, X
  26:	01 90       	ld	r0, Z+
  28:	f0 81       	ld	r31, Z
  2a:	e0 2d       	mov	r30, r0
  2c:	c7 01       	movw	r24, r14
  2e:	09 95       	icall
  30:	c8 0f       	add	r28, r24
  32:	d9 1f       	adc	r29, r25
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
  36:	ce 01       	movw	r24, r28
  38:	df 91       	pop	r29
  3a:	cf 91       	pop	r28
  3c:	1f 91       	pop	r17
  3e:	0f 91       	pop	r16
  40:	ff 90       	pop	r15
  42:	ef 90       	pop	r14
  44:	08 95       	ret
Disassembly of section .text._ZN5Print5printEc:

00000000 <_ZN5Print5printEc>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	dc 01       	movw	r26, r24
   2:	ed 91       	ld	r30, X+
   4:	fc 91       	ld	r31, X
   6:	01 90       	ld	r0, Z+
   8:	f0 81       	ld	r31, Z
{
  size_t n = print(s);
   a:	e0 2d       	mov	r30, r0
   c:	09 95       	icall
   e:	08 95       	ret
Disassembly of section .text._ZN5Print5printERK9Printable:

00000000 <_ZN5Print5printERK9Printable>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	9c 01       	movw	r18, r24
   2:	db 01       	movw	r26, r22
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	01 90       	ld	r0, Z+
{
  size_t n = print(s);
   a:	f0 81       	ld	r31, Z
   c:	e0 2d       	mov	r30, r0
   e:	cb 01       	movw	r24, r22
  n += println();
  10:	b9 01       	movw	r22, r18
  12:	09 95       	icall
  14:	08 95       	ret
Disassembly of section .text._ZN5Print7printlnEv:

00000000 <_ZN5Print7printlnEv>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	8c 01       	movw	r16, r24
{
  size_t n = print(s);
   a:	dc 01       	movw	r26, r24
   c:	ed 91       	ld	r30, X+
   e:	fc 91       	ld	r31, X
  n += println();
  10:	01 90       	ld	r0, Z+
  12:	f0 81       	ld	r31, Z
  14:	e0 2d       	mov	r30, r0
  16:	6d e0       	ldi	r22, 0x0D	; 13
  18:	09 95       	icall
  1a:	7c 01       	movw	r14, r24
  return n;
}
  1c:	d8 01       	movw	r26, r16
  1e:	ed 91       	ld	r30, X+
  20:	fc 91       	ld	r31, X
  22:	01 90       	ld	r0, Z+
  24:	f0 81       	ld	r31, Z
  26:	e0 2d       	mov	r30, r0
  28:	c8 01       	movw	r24, r16
  2a:	6a e0       	ldi	r22, 0x0A	; 10
  2c:	09 95       	icall
  2e:	9c 01       	movw	r18, r24
  30:	2e 0d       	add	r18, r14
  32:	3f 1d       	adc	r19, r15
  34:	c9 01       	movw	r24, r18
  36:	1f 91       	pop	r17
  38:	0f 91       	pop	r16
  3a:	ff 90       	pop	r15
  3c:	ef 90       	pop	r14
  3e:	08 95       	ret
Disassembly of section .text._ZN5Print7printlnEPK19__FlashStringHelper:

00000000 <_ZN5Print7printlnEPK19__FlashStringHelper>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
{
  size_t n = print(s);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPK19__FlashStringHelper>
   e:	8c 01       	movw	r16, r24
  n += println();
  10:	c7 01       	movw	r24, r14
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPK19__FlashStringHelper>
  16:	9c 01       	movw	r18, r24
  18:	20 0f       	add	r18, r16
  1a:	31 1f       	adc	r19, r17
  return n;
}
  1c:	c9 01       	movw	r24, r18
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	ff 90       	pop	r15
  24:	ef 90       	pop	r14
  26:	08 95       	ret
Disassembly of section .text._ZN5Print7printlnEc:

00000000 <_ZN5Print7printlnEc>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
{
  size_t n = print(s);
   a:	dc 01       	movw	r26, r24
   c:	ed 91       	ld	r30, X+
   e:	fc 91       	ld	r31, X
  n += println();
  10:	01 90       	ld	r0, Z+
  12:	f0 81       	ld	r31, Z
  14:	e0 2d       	mov	r30, r0
  16:	09 95       	icall
  18:	8c 01       	movw	r16, r24
  1a:	c7 01       	movw	r24, r14
  return n;
}
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEc>
  20:	08 0f       	add	r16, r24
  22:	19 1f       	adc	r17, r25
  24:	c8 01       	movw	r24, r16
  26:	1f 91       	pop	r17
  28:	0f 91       	pop	r16
  2a:	ff 90       	pop	r15
  2c:	ef 90       	pop	r14
  2e:	08 95       	ret
Disassembly of section .text._ZN5Print7printlnERK9Printable:

00000000 <_ZN5Print7printlnERK9Printable>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
{
  size_t n = print(s);
   a:	db 01       	movw	r26, r22
   c:	ed 91       	ld	r30, X+
   e:	fc 91       	ld	r31, X
  n += println();
  10:	01 90       	ld	r0, Z+
  12:	f0 81       	ld	r31, Z
  14:	e0 2d       	mov	r30, r0
  16:	cb 01       	movw	r24, r22
  18:	b7 01       	movw	r22, r14
  1a:	09 95       	icall
  return n;
}
  1c:	8c 01       	movw	r16, r24
  1e:	c7 01       	movw	r24, r14
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK9Printable>
  24:	08 0f       	add	r16, r24
  26:	19 1f       	adc	r17, r25
  28:	c8 01       	movw	r24, r16
  2a:	1f 91       	pop	r17
  2c:	0f 91       	pop	r16
  2e:	ff 90       	pop	r15
  30:	ef 90       	pop	r14
  32:	08 95       	ret
Disassembly of section .text._ZN5Print5writeEPKc:

00000000 <_ZN5Print5writeEPKc>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	61 15       	cp	r22, r1
   8:	71 05       	cpc	r23, r1
{
  size_t n = print(s);
   a:	01 f4       	brne	.+0      	; 0xc <_ZN5Print5writeEPKc+0xc>
   c:	20 e0       	ldi	r18, 0x00	; 0
   e:	30 e0       	ldi	r19, 0x00	; 0
  n += println();
  10:	00 c0       	rjmp	.+0      	; 0x12 <_ZN5Print5writeEPKc+0x12>
  12:	db 01       	movw	r26, r22
  14:	0d 90       	ld	r0, X+
  16:	00 20       	and	r0, r0
  18:	01 f4       	brne	.+0      	; 0x1a <_ZN5Print5writeEPKc+0x1a>
  1a:	11 97       	sbiw	r26, 0x01	; 1
  return n;
}
  1c:	a6 1b       	sub	r26, r22
  1e:	b7 0b       	sbc	r27, r23
  20:	e8 81       	ld	r30, Y
  22:	f9 81       	ldd	r31, Y+1	; 0x01
  24:	02 80       	ldd	r0, Z+2	; 0x02
  26:	f3 81       	ldd	r31, Z+3	; 0x03
  28:	e0 2d       	mov	r30, r0
  2a:	ad 01       	movw	r20, r26
  2c:	09 95       	icall
  2e:	9c 01       	movw	r18, r24
  30:	c9 01       	movw	r24, r18
  32:	df 91       	pop	r29
  34:	cf 91       	pop	r28
  36:	08 95       	ret
Disassembly of section .text._ZN5Print11printNumberEmh:

00000000 <_ZN5Print11printNumberEmh>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	4f 92       	push	r4
   2:	5f 92       	push	r5
   4:	7f 92       	push	r7
   6:	8f 92       	push	r8
   8:	9f 92       	push	r9
{
  size_t n = print(s);
   a:	af 92       	push	r10
   c:	bf 92       	push	r11
   e:	cf 92       	push	r12
  n += println();
  10:	df 92       	push	r13
  12:	ef 92       	push	r14
  14:	ff 92       	push	r15
  16:	0f 93       	push	r16
  18:	1f 93       	push	r17
  1a:	df 93       	push	r29
  return n;
}
  1c:	cf 93       	push	r28
  1e:	cd b7       	in	r28, 0x3d	; 61
  20:	de b7       	in	r29, 0x3e	; 62
  22:	a1 97       	sbiw	r28, 0x21	; 33
  24:	0f b6       	in	r0, 0x3f	; 63
  26:	f8 94       	cli
  28:	de bf       	out	0x3e, r29	; 62
  2a:	0f be       	out	0x3f, r0	; 63
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	2c 01       	movw	r4, r24
  30:	74 2e       	mov	r7, r20
  32:	cb 01       	movw	r24, r22
  34:	22 30       	cpi	r18, 0x02	; 2
  36:	00 f4       	brcc	.+0      	; 0x38 <_ZN5Print11printNumberEmh+0x38>
  38:	2a e0       	ldi	r18, 0x0A	; 10
  3a:	19 a2       	std	Y+33, r1	; 0x21
  3c:	31 e2       	ldi	r19, 0x21	; 33
  3e:	c3 2e       	mov	r12, r19
  40:	d1 2c       	mov	r13, r1
  42:	cc 0e       	add	r12, r28
  44:	dd 1e       	adc	r13, r29
  46:	82 2e       	mov	r8, r18
  48:	99 24       	eor	r9, r9
  4a:	aa 24       	eor	r10, r10
  4c:	bb 24       	eor	r11, r11
  4e:	67 2d       	mov	r22, r7
  50:	75 2f       	mov	r23, r21
  52:	a5 01       	movw	r20, r10
  54:	94 01       	movw	r18, r8
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print11printNumberEmh>
  5a:	79 01       	movw	r14, r18
  5c:	8a 01       	movw	r16, r20
  5e:	c8 01       	movw	r24, r16
  60:	b7 01       	movw	r22, r14
  62:	a5 01       	movw	r20, r10
  64:	94 01       	movw	r18, r8
  66:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print11printNumberEmh>
  6a:	47 2d       	mov	r20, r7
  6c:	46 1b       	sub	r20, r22
  6e:	08 94       	sec
  70:	c1 08       	sbc	r12, r1
  72:	d1 08       	sbc	r13, r1
  74:	4a 30       	cpi	r20, 0x0A	; 10
  76:	04 f4       	brge	.+0      	; 0x78 <_ZN5Print11printNumberEmh+0x78>
  78:	40 5d       	subi	r20, 0xD0	; 208
  7a:	00 c0       	rjmp	.+0      	; 0x7c <_ZN5Print11printNumberEmh+0x7c>
  7c:	49 5c       	subi	r20, 0xC9	; 201
  7e:	f6 01       	movw	r30, r12
  80:	40 83       	st	Z, r20
  82:	e1 14       	cp	r14, r1
  84:	f1 04       	cpc	r15, r1
  86:	01 05       	cpc	r16, r1
  88:	11 05       	cpc	r17, r1
  8a:	01 f0       	breq	.+0      	; 0x8c <_ZN5Print11printNumberEmh+0x8c>
  8c:	7e 2c       	mov	r7, r14
  8e:	5f 2d       	mov	r21, r15
  90:	c8 01       	movw	r24, r16
  92:	00 c0       	rjmp	.+0      	; 0x94 <_ZN5Print11printNumberEmh+0x94>
  94:	c2 01       	movw	r24, r4
  96:	b6 01       	movw	r22, r12
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print11printNumberEmh>
  9c:	a1 96       	adiw	r28, 0x21	; 33
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	f8 94       	cli
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	1f 91       	pop	r17
  ae:	0f 91       	pop	r16
  b0:	ff 90       	pop	r15
  b2:	ef 90       	pop	r14
  b4:	df 90       	pop	r13
  b6:	cf 90       	pop	r12
  b8:	bf 90       	pop	r11
  ba:	af 90       	pop	r10
  bc:	9f 90       	pop	r9
  be:	8f 90       	pop	r8
  c0:	7f 90       	pop	r7
  c2:	5f 90       	pop	r5
  c4:	4f 90       	pop	r4
  c6:	08 95       	ret
Disassembly of section .text._ZN5Print5printEmi:

00000000 <_ZN5Print5printEmi>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	dc 01       	movw	r26, r24
   2:	21 15       	cp	r18, r1
   4:	31 05       	cpc	r19, r1
   6:	01 f4       	brne	.+0      	; 0x8 <_ZN5Print5printEmi+0x8>
   8:	ed 91       	ld	r30, X+
{
  size_t n = print(s);
   a:	fc 91       	ld	r31, X
   c:	01 90       	ld	r0, Z+
   e:	f0 81       	ld	r31, Z
  n += println();
  10:	e0 2d       	mov	r30, r0
  12:	64 2f       	mov	r22, r20
  14:	09 95       	icall
  16:	08 95       	ret
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEmi>
  return n;
}
  1c:	08 95       	ret
Disassembly of section .text._ZN5Print7printlnEmi:

00000000 <_ZN5Print7printlnEmi>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
{
  size_t n = print(s);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEmi>
   e:	8c 01       	movw	r16, r24
  n += println();
  10:	c7 01       	movw	r24, r14
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEmi>
  16:	9c 01       	movw	r18, r24
  18:	20 0f       	add	r18, r16
  1a:	31 1f       	adc	r19, r17
  return n;
}
  1c:	c9 01       	movw	r24, r18
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	ff 90       	pop	r15
  24:	ef 90       	pop	r14
  26:	08 95       	ret
Disassembly of section .text._ZN5Print5printEji:

00000000 <_ZN5Print5printEji>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	9a 01       	movw	r18, r20
{
  size_t n = print(s);
   a:	7b 01       	movw	r14, r22
   c:	00 e0       	ldi	r16, 0x00	; 0
   e:	10 e0       	ldi	r17, 0x00	; 0
  n += println();
  10:	b8 01       	movw	r22, r16
  12:	a7 01       	movw	r20, r14
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEji>
  18:	1f 91       	pop	r17
  1a:	0f 91       	pop	r16
  return n;
}
  1c:	ff 90       	pop	r15
  1e:	ef 90       	pop	r14
  20:	08 95       	ret
Disassembly of section .text._ZN5Print7printlnEji:

00000000 <_ZN5Print7printlnEji>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
{
  size_t n = print(s);
   a:	1f 93       	push	r17
   c:	6c 01       	movw	r12, r24
   e:	7b 01       	movw	r14, r22
  n += println();
  10:	9a 01       	movw	r18, r20
  12:	00 e0       	ldi	r16, 0x00	; 0
  14:	10 e0       	ldi	r17, 0x00	; 0
  16:	b8 01       	movw	r22, r16
  18:	a7 01       	movw	r20, r14
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEji>
  return n;
}
  1e:	8c 01       	movw	r16, r24
  20:	c6 01       	movw	r24, r12
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEji>
  26:	08 0f       	add	r16, r24
  28:	19 1f       	adc	r17, r25
  2a:	c8 01       	movw	r24, r16
  2c:	1f 91       	pop	r17
  2e:	0f 91       	pop	r16
  30:	ff 90       	pop	r15
  32:	ef 90       	pop	r14
  34:	df 90       	pop	r13
  36:	cf 90       	pop	r12
  38:	08 95       	ret
Disassembly of section .text._ZN5Print5printEhi:

00000000 <_ZN5Print5printEhi>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	9a 01       	movw	r18, r20
{
  size_t n = print(s);
   a:	e6 2e       	mov	r14, r22
   c:	ff 24       	eor	r15, r15
   e:	00 e0       	ldi	r16, 0x00	; 0
  n += println();
  10:	10 e0       	ldi	r17, 0x00	; 0
  12:	b8 01       	movw	r22, r16
  14:	a7 01       	movw	r20, r14
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEhi>
  1a:	1f 91       	pop	r17
  return n;
}
  1c:	0f 91       	pop	r16
  1e:	ff 90       	pop	r15
  20:	ef 90       	pop	r14
  22:	08 95       	ret
Disassembly of section .text._ZN5Print7printlnEhi:

00000000 <_ZN5Print7printlnEhi>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
{
  size_t n = print(s);
   a:	1f 93       	push	r17
   c:	6c 01       	movw	r12, r24
   e:	e6 2e       	mov	r14, r22
  n += println();
  10:	9a 01       	movw	r18, r20
  12:	ff 24       	eor	r15, r15
  14:	00 e0       	ldi	r16, 0x00	; 0
  16:	10 e0       	ldi	r17, 0x00	; 0
  18:	b8 01       	movw	r22, r16
  1a:	a7 01       	movw	r20, r14
  return n;
}
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEhi>
  20:	8c 01       	movw	r16, r24
  22:	c6 01       	movw	r24, r12
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEhi>
  28:	08 0f       	add	r16, r24
  2a:	19 1f       	adc	r17, r25
  2c:	c8 01       	movw	r24, r16
  2e:	1f 91       	pop	r17
  30:	0f 91       	pop	r16
  32:	ff 90       	pop	r15
  34:	ef 90       	pop	r14
  36:	df 90       	pop	r13
  38:	cf 90       	pop	r12
  3a:	08 95       	ret
Disassembly of section .text._ZN5Print5printEli:

00000000 <_ZN5Print5printEli>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
{
  size_t n = print(s);
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  n += println();
  10:	ec 01       	movw	r28, r24
  12:	6a 01       	movw	r12, r20
  14:	7b 01       	movw	r14, r22
  16:	21 15       	cp	r18, r1
  18:	31 05       	cpc	r19, r1
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN5Print5printEli+0x1c>
  return n;
}
  1c:	e8 81       	ld	r30, Y
  1e:	f9 81       	ldd	r31, Y+1	; 0x01
  20:	01 90       	ld	r0, Z+
  22:	f0 81       	ld	r31, Z
  24:	e0 2d       	mov	r30, r0
  26:	64 2f       	mov	r22, r20
  28:	09 95       	icall
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN5Print5printEli+0x2c>
  2c:	2a 30       	cpi	r18, 0x0A	; 10
  2e:	31 05       	cpc	r19, r1
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN5Print5printEli+0x32>
  32:	77 ff       	sbrs	r23, 7
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN5Print5printEli+0x36>
  36:	e8 81       	ld	r30, Y
  38:	f9 81       	ldd	r31, Y+1	; 0x01
  3a:	01 90       	ld	r0, Z+
  3c:	f0 81       	ld	r31, Z
  3e:	e0 2d       	mov	r30, r0
  40:	6d e2       	ldi	r22, 0x2D	; 45
  42:	09 95       	icall
  44:	8c 01       	movw	r16, r24
  46:	44 27       	eor	r20, r20
  48:	55 27       	eor	r21, r21
  4a:	ba 01       	movw	r22, r20
  4c:	4c 19       	sub	r20, r12
  4e:	5d 09       	sbc	r21, r13
  50:	6e 09       	sbc	r22, r14
  52:	7f 09       	sbc	r23, r15
  54:	ce 01       	movw	r24, r28
  56:	2a e0       	ldi	r18, 0x0A	; 10
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEli>
  5c:	98 01       	movw	r18, r16
  5e:	28 0f       	add	r18, r24
  60:	39 1f       	adc	r19, r25
  62:	00 c0       	rjmp	.+0      	; 0x64 <_ZN5Print5printEli+0x64>
  64:	2a e0       	ldi	r18, 0x0A	; 10
  66:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEli>
  6a:	9c 01       	movw	r18, r24
  6c:	c9 01       	movw	r24, r18
  6e:	df 91       	pop	r29
  70:	cf 91       	pop	r28
  72:	1f 91       	pop	r17
  74:	0f 91       	pop	r16
  76:	ff 90       	pop	r15
  78:	ef 90       	pop	r14
  7a:	df 90       	pop	r13
  7c:	cf 90       	pop	r12
  7e:	08 95       	ret
Disassembly of section .text._ZN5Print7printlnEli:

00000000 <_ZN5Print7printlnEli>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
{
  size_t n = print(s);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEli>
   e:	8c 01       	movw	r16, r24
  n += println();
  10:	c7 01       	movw	r24, r14
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEli>
  16:	9c 01       	movw	r18, r24
  18:	20 0f       	add	r18, r16
  1a:	31 1f       	adc	r19, r17
  return n;
}
  1c:	c9 01       	movw	r24, r18
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	ff 90       	pop	r15
  24:	ef 90       	pop	r14
  26:	08 95       	ret
Disassembly of section .text._ZN5Print5printEii:

00000000 <_ZN5Print5printEii>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7b 01       	movw	r14, r22
{
  size_t n = print(s);
   a:	9a 01       	movw	r18, r20
   c:	00 27       	eor	r16, r16
   e:	f7 fc       	sbrc	r15, 7
  n += println();
  10:	00 95       	com	r16
  12:	10 2f       	mov	r17, r16
  14:	b8 01       	movw	r22, r16
  16:	a7 01       	movw	r20, r14
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEii>
  return n;
}
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	ff 90       	pop	r15
  22:	ef 90       	pop	r14
  24:	08 95       	ret
Disassembly of section .text._ZN5Print7printlnEii:

00000000 <_ZN5Print7printlnEii>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
{
  size_t n = print(s);
   a:	1f 93       	push	r17
   c:	6c 01       	movw	r12, r24
   e:	7b 01       	movw	r14, r22
  n += println();
  10:	9a 01       	movw	r18, r20
  12:	00 27       	eor	r16, r16
  14:	f7 fc       	sbrc	r15, 7
  16:	00 95       	com	r16
  18:	10 2f       	mov	r17, r16
  1a:	b8 01       	movw	r22, r16
  return n;
}
  1c:	a7 01       	movw	r20, r14
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEii>
  22:	8c 01       	movw	r16, r24
  24:	c6 01       	movw	r24, r12
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEii>
  2a:	08 0f       	add	r16, r24
  2c:	19 1f       	adc	r17, r25
  2e:	c8 01       	movw	r24, r16
  30:	1f 91       	pop	r17
  32:	0f 91       	pop	r16
  34:	ff 90       	pop	r15
  36:	ef 90       	pop	r14
  38:	df 90       	pop	r13
  3a:	cf 90       	pop	r12
  3c:	08 95       	ret
Disassembly of section .text._ZN5Print5printEPKc:

00000000 <_ZN5Print5printEPKc>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEPKc>
   4:	08 95       	ret
Disassembly of section .text._ZN5Print10printFloatEdh:

00000000 <_ZN5Print10printFloatEdh>:
   0:	7f 92       	push	r7
   2:	8f 92       	push	r8
   4:	9f 92       	push	r9
   6:	af 92       	push	r10
   8:	bf 92       	push	r11
{
  size_t n = print(s);
   a:	cf 92       	push	r12
   c:	df 92       	push	r13
   e:	ef 92       	push	r14
  n += println();
  10:	ff 92       	push	r15
  12:	0f 93       	push	r16
  14:	1f 93       	push	r17
  16:	cf 93       	push	r28
  18:	df 93       	push	r29
  1a:	4c 01       	movw	r8, r24
  return n;
}
  1c:	7a 01       	movw	r14, r20
  1e:	8b 01       	movw	r16, r22
  20:	72 2e       	mov	r7, r18
  22:	cb 01       	movw	r24, r22
  24:	ba 01       	movw	r22, r20
  26:	a8 01       	movw	r20, r16
  28:	97 01       	movw	r18, r14
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  2e:	88 23       	and	r24, r24
  30:	01 f0       	breq	.+0      	; 0x32 <_ZN5Print10printFloatEdh+0x32>
  32:	c4 01       	movw	r24, r8
  34:	60 e0       	ldi	r22, 0x00	; 0
  36:	70 e0       	ldi	r23, 0x00	; 0
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZN5Print10printFloatEdh+0x3a>
  3a:	c0 e0       	ldi	r28, 0x00	; 0
  3c:	d0 e0       	ldi	r29, 0x00	; 0
  3e:	57 01       	movw	r10, r14
  40:	68 01       	movw	r12, r16
  42:	e8 94       	clt
  44:	d7 f8       	bld	r13, 7
  46:	c6 01       	movw	r24, r12
  48:	b5 01       	movw	r22, r10
  4a:	2f ef       	ldi	r18, 0xFF	; 255
  4c:	3f ef       	ldi	r19, 0xFF	; 255
  4e:	4f e7       	ldi	r20, 0x7F	; 127
  50:	5f e7       	ldi	r21, 0x7F	; 127
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  56:	88 23       	and	r24, r24
  58:	01 f4       	brne	.+0      	; 0x5a <_ZN5Print10printFloatEdh+0x5a>
  5a:	c6 01       	movw	r24, r12
  5c:	b5 01       	movw	r22, r10
  5e:	2f ef       	ldi	r18, 0xFF	; 255
  60:	3f ef       	ldi	r19, 0xFF	; 255
  62:	4f e7       	ldi	r20, 0x7F	; 127
  64:	5f e7       	ldi	r21, 0x7F	; 127
  66:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  6a:	18 16       	cp	r1, r24
  6c:	04 f0       	brlt	.+0      	; 0x6e <_ZN5Print10printFloatEdh+0x6e>
  6e:	c1 e0       	ldi	r28, 0x01	; 1
  70:	d0 e0       	ldi	r29, 0x00	; 0
  72:	21 97       	sbiw	r28, 0x01	; 1
  74:	01 f0       	breq	.+0      	; 0x76 <_ZN5Print10printFloatEdh+0x76>
  76:	c4 01       	movw	r24, r8
  78:	60 e0       	ldi	r22, 0x00	; 0
  7a:	70 e0       	ldi	r23, 0x00	; 0
  7c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  80:	ec 01       	movw	r28, r24
  82:	00 c0       	rjmp	.+0      	; 0x84 <_ZN5Print10printFloatEdh+0x84>
  84:	c8 01       	movw	r24, r16
  86:	b7 01       	movw	r22, r14
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	3f ef       	ldi	r19, 0xFF	; 255
  8c:	4f e7       	ldi	r20, 0x7F	; 127
  8e:	5f e4       	ldi	r21, 0x4F	; 79
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  94:	18 16       	cp	r1, r24
  96:	04 f0       	brlt	.+0      	; 0x98 <_ZN5Print10printFloatEdh+0x98>
  98:	c8 01       	movw	r24, r16
  9a:	b7 01       	movw	r22, r14
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	3f ef       	ldi	r19, 0xFF	; 255
  a0:	4f e7       	ldi	r20, 0x7F	; 127
  a2:	5f ec       	ldi	r21, 0xCF	; 207
  a4:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  a8:	88 23       	and	r24, r24
  aa:	04 f4       	brge	.+0      	; 0xac <_ZN5Print10printFloatEdh+0xac>
  ac:	c4 01       	movw	r24, r8
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <_ZN5Print10printFloatEdh+0xb4>
  b4:	c8 01       	movw	r24, r16
  b6:	b7 01       	movw	r22, r14
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  c4:	87 fd       	sbrc	r24, 7
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <_ZN5Print10printFloatEdh+0xc8>
  c8:	c0 e0       	ldi	r28, 0x00	; 0
  ca:	d0 e0       	ldi	r29, 0x00	; 0
  cc:	00 c0       	rjmp	.+0      	; 0xce <_ZN5Print10printFloatEdh+0xce>
  ce:	d4 01       	movw	r26, r8
  d0:	ed 91       	ld	r30, X+
  d2:	fc 91       	ld	r31, X
  d4:	01 90       	ld	r0, Z+
  d6:	f0 81       	ld	r31, Z
  d8:	e0 2d       	mov	r30, r0
  da:	c4 01       	movw	r24, r8
  dc:	6d e2       	ldi	r22, 0x2D	; 45
  de:	09 95       	icall
  e0:	ec 01       	movw	r28, r24
  e2:	17 fb       	bst	r17, 7
  e4:	10 95       	com	r17
  e6:	17 f9       	bld	r17, 7
  e8:	10 95       	com	r17
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	5f e3       	ldi	r21, 0x3F	; 63
  f2:	dd 24       	eor	r13, r13
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <_ZN5Print10printFloatEdh+0xf6>
  f6:	ca 01       	movw	r24, r20
  f8:	b9 01       	movw	r22, r18
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	40 e2       	ldi	r20, 0x20	; 32
 100:	51 e4       	ldi	r21, 0x41	; 65
 102:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 106:	9b 01       	movw	r18, r22
 108:	ac 01       	movw	r20, r24
 10a:	d3 94       	inc	r13
 10c:	d7 14       	cp	r13, r7
 10e:	00 f0       	brcs	.+0      	; 0x110 <_ZN5Print10printFloatEdh+0x110>
 110:	c8 01       	movw	r24, r16
 112:	b7 01       	movw	r22, r14
 114:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 118:	5b 01       	movw	r10, r22
 11a:	6c 01       	movw	r12, r24
 11c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 120:	7b 01       	movw	r14, r22
 122:	8c 01       	movw	r16, r24
 124:	c4 01       	movw	r24, r8
 126:	b8 01       	movw	r22, r16
 128:	a7 01       	movw	r20, r14
 12a:	2a e0       	ldi	r18, 0x0A	; 10
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 132:	c8 0f       	add	r28, r24
 134:	d9 1f       	adc	r29, r25
 136:	77 20       	and	r7, r7
 138:	01 f0       	breq	.+0      	; 0x13a <_ZN5Print10printFloatEdh+0x13a>
 13a:	c4 01       	movw	r24, r8
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 144:	c8 0f       	add	r28, r24
 146:	d9 1f       	adc	r29, r25
 148:	c8 01       	movw	r24, r16
 14a:	b7 01       	movw	r22, r14
 14c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 150:	9b 01       	movw	r18, r22
 152:	ac 01       	movw	r20, r24
 154:	c6 01       	movw	r24, r12
 156:	b5 01       	movw	r22, r10
 158:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <_ZN5Print10printFloatEdh+0x15e>
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	40 e2       	ldi	r20, 0x20	; 32
 164:	51 e4       	ldi	r21, 0x41	; 65
 166:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 16a:	7b 01       	movw	r14, r22
 16c:	8c 01       	movw	r16, r24
 16e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 172:	5b 01       	movw	r10, r22
 174:	6c 01       	movw	r12, r24
 176:	cc 24       	eor	r12, r12
 178:	b7 fc       	sbrc	r11, 7
 17a:	c0 94       	com	r12
 17c:	dc 2c       	mov	r13, r12
 17e:	c4 01       	movw	r24, r8
 180:	b6 01       	movw	r22, r12
 182:	a5 01       	movw	r20, r10
 184:	2a e0       	ldi	r18, 0x0A	; 10
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 18c:	c8 0f       	add	r28, r24
 18e:	d9 1f       	adc	r29, r25
 190:	c6 01       	movw	r24, r12
 192:	b5 01       	movw	r22, r10
 194:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 198:	9b 01       	movw	r18, r22
 19a:	ac 01       	movw	r20, r24
 19c:	c8 01       	movw	r24, r16
 19e:	b7 01       	movw	r22, r14
 1a0:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 1a4:	7a 94       	dec	r7
 1a6:	77 20       	and	r7, r7
 1a8:	01 f4       	brne	.+0      	; 0x1aa <_ZN5Print10printFloatEdh+0x1aa>
 1aa:	ce 01       	movw	r24, r28
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	ff 90       	pop	r15
 1b6:	ef 90       	pop	r14
 1b8:	df 90       	pop	r13
 1ba:	cf 90       	pop	r12
 1bc:	bf 90       	pop	r11
 1be:	af 90       	pop	r10
 1c0:	9f 90       	pop	r9
 1c2:	8f 90       	pop	r8
 1c4:	7f 90       	pop	r7
 1c6:	08 95       	ret
Disassembly of section .text._ZN5Print5printEdi:

00000000 <_ZN5Print5printEdi>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEdi>
   4:	08 95       	ret
Disassembly of section .text._ZN5Print7printlnEdi:

00000000 <_ZN5Print7printlnEdi>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
{
  size_t n = print(s);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEdi>
   e:	8c 01       	movw	r16, r24
  n += println();
  10:	c7 01       	movw	r24, r14
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEdi>
  16:	08 0f       	add	r16, r24
  18:	19 1f       	adc	r17, r25
  1a:	c8 01       	movw	r24, r16
  return n;
}
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	ff 90       	pop	r15
  22:	ef 90       	pop	r14
  24:	08 95       	ret
Disassembly of section .text._ZN5Print7printlnEPKc:

00000000 <_ZN5Print7printlnEPKc>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
{
  size_t n = print(s);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPKc>
   e:	8c 01       	movw	r16, r24
  n += println();
  10:	c7 01       	movw	r24, r14
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPKc>
  16:	08 0f       	add	r16, r24
  18:	19 1f       	adc	r17, r25
  1a:	c8 01       	movw	r24, r16
  return n;
}
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	ff 90       	pop	r15
  22:	ef 90       	pop	r14
  24:	08 95       	ret
Disassembly of section .text._ZN5Print5printERK6String:

00000000 <_ZN5Print5printERK6String>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
{
  size_t n = print(s);
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  n += println();
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	5c 01       	movw	r10, r24
  16:	6b 01       	movw	r12, r22
  18:	ee 24       	eor	r14, r14
  1a:	ff 24       	eor	r15, r15
  return n;
}
  1c:	c0 e0       	ldi	r28, 0x00	; 0
  1e:	d0 e0       	ldi	r29, 0x00	; 0
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN5Print5printERK6String+0x22>
  22:	d5 01       	movw	r26, r10
  24:	ed 91       	ld	r30, X+
  26:	fc 91       	ld	r31, X
  28:	00 81       	ld	r16, Z
  2a:	11 81       	ldd	r17, Z+1	; 0x01
  2c:	c6 01       	movw	r24, r12
  2e:	be 01       	movw	r22, r28
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printERK6String>
  34:	68 2f       	mov	r22, r24
  36:	c5 01       	movw	r24, r10
  38:	f8 01       	movw	r30, r16
  3a:	09 95       	icall
  3c:	e8 0e       	add	r14, r24
  3e:	f9 1e       	adc	r15, r25
  40:	21 96       	adiw	r28, 0x01	; 1
  42:	f6 01       	movw	r30, r12
  44:	84 81       	ldd	r24, Z+4	; 0x04
  46:	95 81       	ldd	r25, Z+5	; 0x05
  48:	c8 17       	cp	r28, r24
  4a:	d9 07       	cpc	r29, r25
  4c:	00 f0       	brcs	.+0      	; 0x4e <_ZN5Print5printERK6String+0x4e>
  4e:	c7 01       	movw	r24, r14
  50:	df 91       	pop	r29
  52:	cf 91       	pop	r28
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	ff 90       	pop	r15
  5a:	ef 90       	pop	r14
  5c:	df 90       	pop	r13
  5e:	cf 90       	pop	r12
  60:	bf 90       	pop	r11
  62:	af 90       	pop	r10
  64:	08 95       	ret
Disassembly of section .text._ZN5Print7printlnERK6String:

00000000 <_ZN5Print7printlnERK6String>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
{
  size_t n = print(s);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK6String>
   e:	8c 01       	movw	r16, r24
  n += println();
  10:	c7 01       	movw	r24, r14
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK6String>
  16:	9c 01       	movw	r18, r24
  18:	20 0f       	add	r18, r16
  1a:	31 1f       	adc	r19, r17
  return n;
}
  1c:	c9 01       	movw	r24, r18
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	ff 90       	pop	r15
  24:	ef 90       	pop	r14
  26:	08 95       	ret

Stream.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000001  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000035  2**0
                  ALLOC
  3 .stab         00000ec4  00000000  00000000  00000038  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00003182  00000000  00000000  00000efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN6Stream10setTimeoutEm 0000000c  00000000  00000000  0000407e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text._ZN6Stream9timedPeekEv 00000058  00000000  00000000  0000408a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN6Stream13peekNextDigitEv 00000036  00000000  00000000  000040e2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN6Stream10parseFloatEc 00000142  00000000  00000000  00004118  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN6Stream10parseFloatEv 00000008  00000000  00000000  0000425a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN6Stream8parseIntEc 000000e0  00000000  00000000  00004262  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN6Stream8parseIntEv 00000008  00000000  00000000  00004342  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN6Stream9timedReadEv 00000058  00000000  00000000  0000434a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN6Stream15readStringUntilEc 0000005e  00000000  00000000  000043a2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN6Stream10readStringEv 0000003a  00000000  00000000  00004400  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN6Stream14readBytesUntilEcPcj 0000006a  00000000  00000000  0000443a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN6Stream9readBytesEPcj 00000048  00000000  00000000  000044a4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN6Stream9findUntilEPcjS0_j 000000c6  00000000  00000000  000044ec  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN6Stream9findUntilEPcS0_ 00000032  00000000  00000000  000045b2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN6Stream4findEPc 0000000a  00000000  00000000  000045e4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN6Stream4findEPcj 00000016  00000000  00000000  000045ee  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
Disassembly of section .text._ZN6Stream10setTimeoutEm:

00000000 <_ZN6Stream10setTimeoutEm>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	fc 01       	movw	r30, r24
   2:	44 83       	std	Z+4, r20	; 0x04
{
  return findUntil(target, length, NULL, 0);
   4:	55 83       	std	Z+5, r21	; 0x05
   6:	66 83       	std	Z+6, r22	; 0x06
   8:	77 83       	std	Z+7, r23	; 0x07
   a:	08 95       	ret
Disassembly of section .text._ZN6Stream9timedPeekEv:

00000000 <_ZN6Stream9timedPeekEv>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
{
  return findUntil(target, length, NULL, 0);
   4:	ec 01       	movw	r28, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedPeekEv>
   a:	68 87       	std	Y+8, r22	; 0x08
   c:	79 87       	std	Y+9, r23	; 0x09
   e:	8a 87       	std	Y+10, r24	; 0x0a
}
  10:	9b 87       	std	Y+11, r25	; 0x0b
  12:	e8 81       	ld	r30, Y
  14:	f9 81       	ldd	r31, Y+1	; 0x01
  16:	00 84       	ldd	r0, Z+8	; 0x08
  18:	f1 85       	ldd	r31, Z+9	; 0x09
  1a:	e0 2d       	mov	r30, r0
  1c:	ce 01       	movw	r24, r28
  1e:	09 95       	icall
  20:	9c 01       	movw	r18, r24
  22:	97 ff       	sbrs	r25, 7
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6Stream9timedPeekEv+0x26>
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedPeekEv>
  2a:	28 85       	ldd	r18, Y+8	; 0x08
  2c:	39 85       	ldd	r19, Y+9	; 0x09
  2e:	4a 85       	ldd	r20, Y+10	; 0x0a
  30:	5b 85       	ldd	r21, Y+11	; 0x0b
  32:	62 1b       	sub	r22, r18
  34:	73 0b       	sbc	r23, r19
  36:	84 0b       	sbc	r24, r20
  38:	95 0b       	sbc	r25, r21
  3a:	2c 81       	ldd	r18, Y+4	; 0x04
  3c:	3d 81       	ldd	r19, Y+5	; 0x05
  3e:	4e 81       	ldd	r20, Y+6	; 0x06
  40:	5f 81       	ldd	r21, Y+7	; 0x07
  42:	62 17       	cp	r22, r18
  44:	73 07       	cpc	r23, r19
  46:	84 07       	cpc	r24, r20
  48:	95 07       	cpc	r25, r21
  4a:	00 f0       	brcs	.+0      	; 0x4c <_ZN6Stream9timedPeekEv+0x4c>
  4c:	2f ef       	ldi	r18, 0xFF	; 255
  4e:	3f ef       	ldi	r19, 0xFF	; 255
  50:	c9 01       	movw	r24, r18
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	08 95       	ret
Disassembly of section .text._ZN6Stream13peekNextDigitEv:

00000000 <_ZN6Stream13peekNextDigitEv>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
{
  return findUntil(target, length, NULL, 0);
   4:	ec 01       	movw	r28, r24
   6:	ce 01       	movw	r24, r28
   8:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream13peekNextDigitEv>
   c:	9c 01       	movw	r18, r24
   e:	97 fd       	sbrc	r25, 7
}
  10:	00 c0       	rjmp	.+0      	; 0x12 <_ZN6Stream13peekNextDigitEv+0x12>
  12:	8d 32       	cpi	r24, 0x2D	; 45
  14:	91 05       	cpc	r25, r1
  16:	01 f0       	breq	.+0      	; 0x18 <_ZN6Stream13peekNextDigitEv+0x18>
  18:	c0 97       	sbiw	r24, 0x30	; 48
  1a:	0a 97       	sbiw	r24, 0x0a	; 10
  1c:	00 f0       	brcs	.+0      	; 0x1e <_ZN6Stream13peekNextDigitEv+0x1e>
  1e:	e8 81       	ld	r30, Y
  20:	f9 81       	ldd	r31, Y+1	; 0x01
  22:	06 80       	ldd	r0, Z+6	; 0x06
  24:	f7 81       	ldd	r31, Z+7	; 0x07
  26:	e0 2d       	mov	r30, r0
  28:	ce 01       	movw	r24, r28
  2a:	09 95       	icall
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN6Stream13peekNextDigitEv+0x2e>
  2e:	c9 01       	movw	r24, r18
  30:	df 91       	pop	r29
  32:	cf 91       	pop	r28
  34:	08 95       	ret
Disassembly of section .text._ZN6Stream10parseFloatEc:

00000000 <_ZN6Stream10parseFloatEc>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
{
  return findUntil(target, length, NULL, 0);
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
}
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  1a:	df 93       	push	r29
  1c:	ec 01       	movw	r28, r24
  1e:	66 2e       	mov	r6, r22
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  24:	d8 2e       	mov	r13, r24
  26:	87 ff       	sbrs	r24, 7
  28:	00 c0       	rjmp	.+0      	; 0x2a <_ZN6Stream10parseFloatEc+0x2a>
  2a:	60 e0       	ldi	r22, 0x00	; 0
  2c:	70 e0       	ldi	r23, 0x00	; 0
  2e:	80 e0       	ldi	r24, 0x00	; 0
  30:	90 e0       	ldi	r25, 0x00	; 0
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZN6Stream10parseFloatEc+0x34>
  34:	77 24       	eor	r7, r7
  36:	cc 24       	eor	r12, r12
  38:	ee 24       	eor	r14, r14
  3a:	ff 24       	eor	r15, r15
  3c:	87 01       	movw	r16, r14
  3e:	0f 2e       	mov	r0, r31
  40:	f0 e0       	ldi	r31, 0x00	; 0
  42:	8f 2e       	mov	r8, r31
  44:	f0 e0       	ldi	r31, 0x00	; 0
  46:	9f 2e       	mov	r9, r31
  48:	f0 e8       	ldi	r31, 0x80	; 128
  4a:	af 2e       	mov	r10, r31
  4c:	ff e3       	ldi	r31, 0x3F	; 63
  4e:	bf 2e       	mov	r11, r31
  50:	f0 2d       	mov	r31, r0
  52:	d6 14       	cp	r13, r6
  54:	01 f0       	breq	.+0      	; 0x56 <_ZN6Stream10parseFloatEc+0x56>
  56:	8d e2       	ldi	r24, 0x2D	; 45
  58:	d8 16       	cp	r13, r24
  5a:	01 f4       	brne	.+0      	; 0x5c <_ZN6Stream10parseFloatEc+0x5c>
  5c:	77 24       	eor	r7, r7
  5e:	73 94       	inc	r7
  60:	00 c0       	rjmp	.+0      	; 0x62 <_ZN6Stream10parseFloatEc+0x62>
  62:	9e e2       	ldi	r25, 0x2E	; 46
  64:	d9 16       	cp	r13, r25
  66:	01 f4       	brne	.+0      	; 0x68 <_ZN6Stream10parseFloatEc+0x68>
  68:	cc 24       	eor	r12, r12
  6a:	c3 94       	inc	r12
  6c:	00 c0       	rjmp	.+0      	; 0x6e <_ZN6Stream10parseFloatEc+0x6e>
  6e:	8d 2d       	mov	r24, r13
  70:	80 53       	subi	r24, 0x30	; 48
  72:	8a 30       	cpi	r24, 0x0A	; 10
  74:	00 f4       	brcc	.+0      	; 0x76 <_ZN6Stream10parseFloatEc+0x76>
  76:	c8 01       	movw	r24, r16
  78:	b7 01       	movw	r22, r14
  7a:	2a e0       	ldi	r18, 0x0A	; 10
  7c:	30 e0       	ldi	r19, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	50 e0       	ldi	r21, 0x00	; 0
  82:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  86:	7b 01       	movw	r14, r22
  88:	8c 01       	movw	r16, r24
  8a:	8d 2d       	mov	r24, r13
  8c:	99 27       	eor	r25, r25
  8e:	87 fd       	sbrc	r24, 7
  90:	90 95       	com	r25
  92:	a9 2f       	mov	r26, r25
  94:	b9 2f       	mov	r27, r25
  96:	e8 0e       	add	r14, r24
  98:	f9 1e       	adc	r15, r25
  9a:	0a 1f       	adc	r16, r26
  9c:	1b 1f       	adc	r17, r27
  9e:	80 ed       	ldi	r24, 0xD0	; 208
  a0:	9f ef       	ldi	r25, 0xFF	; 255
  a2:	af ef       	ldi	r26, 0xFF	; 255
  a4:	bf ef       	ldi	r27, 0xFF	; 255
  a6:	e8 0e       	add	r14, r24
  a8:	f9 1e       	adc	r15, r25
  aa:	0a 1f       	adc	r16, r26
  ac:	1b 1f       	adc	r17, r27
  ae:	cc 20       	and	r12, r12
  b0:	01 f0       	breq	.+0      	; 0xb2 <_ZN6Stream10parseFloatEc+0xb2>
  b2:	c5 01       	movw	r24, r10
  b4:	b4 01       	movw	r22, r8
  b6:	2d ec       	ldi	r18, 0xCD	; 205
  b8:	3c ec       	ldi	r19, 0xCC	; 204
  ba:	4c ec       	ldi	r20, 0xCC	; 204
  bc:	5d e3       	ldi	r21, 0x3D	; 61
  be:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  c2:	4b 01       	movw	r8, r22
  c4:	5c 01       	movw	r10, r24
  c6:	e8 81       	ld	r30, Y
  c8:	f9 81       	ldd	r31, Y+1	; 0x01
  ca:	06 80       	ldd	r0, Z+6	; 0x06
  cc:	f7 81       	ldd	r31, Z+7	; 0x07
  ce:	e0 2d       	mov	r30, r0
  d0:	ce 01       	movw	r24, r28
  d2:	09 95       	icall
  d4:	ce 01       	movw	r24, r28
  d6:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  da:	98 2f       	mov	r25, r24
  dc:	d8 2e       	mov	r13, r24
  de:	80 53       	subi	r24, 0x30	; 48
  e0:	8a 30       	cpi	r24, 0x0A	; 10
  e2:	00 f4       	brcc	.+0      	; 0xe4 <_ZN6Stream10parseFloatEc+0xe4>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <_ZN6Stream10parseFloatEc+0xe6>
  e6:	9e 32       	cpi	r25, 0x2E	; 46
  e8:	01 f4       	brne	.+0      	; 0xea <_ZN6Stream10parseFloatEc+0xea>
  ea:	00 c0       	rjmp	.+0      	; 0xec <_ZN6Stream10parseFloatEc+0xec>
  ec:	96 15       	cp	r25, r6
  ee:	01 f4       	brne	.+0      	; 0xf0 <_ZN6Stream10parseFloatEc+0xf0>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <_ZN6Stream10parseFloatEc+0xf2>
  f2:	77 20       	and	r7, r7
  f4:	01 f0       	breq	.+0      	; 0xf6 <_ZN6Stream10parseFloatEc+0xf6>
  f6:	10 95       	com	r17
  f8:	00 95       	com	r16
  fa:	f0 94       	com	r15
  fc:	e0 94       	com	r14
  fe:	e1 1c       	adc	r14, r1
 100:	f1 1c       	adc	r15, r1
 102:	01 1d       	adc	r16, r1
 104:	11 1d       	adc	r17, r1
 106:	cc 20       	and	r12, r12
 108:	01 f0       	breq	.+0      	; 0x10a <_ZN6Stream10parseFloatEc+0x10a>
 10a:	c8 01       	movw	r24, r16
 10c:	b7 01       	movw	r22, r14
 10e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
 112:	a5 01       	movw	r20, r10
 114:	94 01       	movw	r18, r8
 116:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <_ZN6Stream10parseFloatEc+0x11c>
 11c:	c8 01       	movw	r24, r16
 11e:	b7 01       	movw	r22, r14
 120:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	1f 91       	pop	r17
 12a:	0f 91       	pop	r16
 12c:	ff 90       	pop	r15
 12e:	ef 90       	pop	r14
 130:	df 90       	pop	r13
 132:	cf 90       	pop	r12
 134:	bf 90       	pop	r11
 136:	af 90       	pop	r10
 138:	9f 90       	pop	r9
 13a:	8f 90       	pop	r8
 13c:	7f 90       	pop	r7
 13e:	6f 90       	pop	r6
 140:	08 95       	ret
Disassembly of section .text._ZN6Stream10parseFloatEv:

00000000 <_ZN6Stream10parseFloatEv>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	61 e0       	ldi	r22, 0x01	; 1
   2:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEv>
{
  return findUntil(target, length, NULL, 0);
   6:	08 95       	ret
Disassembly of section .text._ZN6Stream8parseIntEc:

00000000 <_ZN6Stream8parseIntEc>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	9f 92       	push	r9
   2:	af 92       	push	r10
{
  return findUntil(target, length, NULL, 0);
   4:	bf 92       	push	r11
   6:	cf 92       	push	r12
   8:	df 92       	push	r13
   a:	ef 92       	push	r14
   c:	ff 92       	push	r15
   e:	0f 93       	push	r16
}
  10:	1f 93       	push	r17
  12:	cf 93       	push	r28
  14:	df 93       	push	r29
  16:	6c 01       	movw	r12, r24
  18:	b6 2e       	mov	r11, r22
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEc>
  1e:	ec 01       	movw	r28, r24
  20:	97 ff       	sbrs	r25, 7
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN6Stream8parseIntEc+0x24>
  24:	ee 24       	eor	r14, r14
  26:	ff 24       	eor	r15, r15
  28:	87 01       	movw	r16, r14
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN6Stream8parseIntEc+0x2c>
  2c:	99 24       	eor	r9, r9
  2e:	ee 24       	eor	r14, r14
  30:	ff 24       	eor	r15, r15
  32:	87 01       	movw	r16, r14
  34:	ab 2c       	mov	r10, r11
  36:	bb 24       	eor	r11, r11
  38:	a7 fc       	sbrc	r10, 7
  3a:	b0 94       	com	r11
  3c:	ca 15       	cp	r28, r10
  3e:	db 05       	cpc	r29, r11
  40:	01 f0       	breq	.+0      	; 0x42 <_ZN6Stream8parseIntEc+0x42>
  42:	cd 32       	cpi	r28, 0x2D	; 45
  44:	d1 05       	cpc	r29, r1
  46:	01 f4       	brne	.+0      	; 0x48 <_ZN6Stream8parseIntEc+0x48>
  48:	99 24       	eor	r9, r9
  4a:	93 94       	inc	r9
  4c:	00 c0       	rjmp	.+0      	; 0x4e <_ZN6Stream8parseIntEc+0x4e>
  4e:	ce 01       	movw	r24, r28
  50:	c0 97       	sbiw	r24, 0x30	; 48
  52:	0a 97       	sbiw	r24, 0x0a	; 10
  54:	00 f4       	brcc	.+0      	; 0x56 <_ZN6Stream8parseIntEc+0x56>
  56:	c8 01       	movw	r24, r16
  58:	b7 01       	movw	r22, r14
  5a:	2a e0       	ldi	r18, 0x0A	; 10
  5c:	30 e0       	ldi	r19, 0x00	; 0
  5e:	40 e0       	ldi	r20, 0x00	; 0
  60:	50 e0       	ldi	r21, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEc>
  66:	7b 01       	movw	r14, r22
  68:	8c 01       	movw	r16, r24
  6a:	ce 01       	movw	r24, r28
  6c:	aa 27       	eor	r26, r26
  6e:	97 fd       	sbrc	r25, 7
  70:	a0 95       	com	r26
  72:	ba 2f       	mov	r27, r26
  74:	e8 0e       	add	r14, r24
  76:	f9 1e       	adc	r15, r25
  78:	0a 1f       	adc	r16, r26
  7a:	1b 1f       	adc	r17, r27
  7c:	80 ed       	ldi	r24, 0xD0	; 208
  7e:	9f ef       	ldi	r25, 0xFF	; 255
  80:	af ef       	ldi	r26, 0xFF	; 255
  82:	bf ef       	ldi	r27, 0xFF	; 255
  84:	e8 0e       	add	r14, r24
  86:	f9 1e       	adc	r15, r25
  88:	0a 1f       	adc	r16, r26
  8a:	1b 1f       	adc	r17, r27
  8c:	d6 01       	movw	r26, r12
  8e:	ed 91       	ld	r30, X+
  90:	fc 91       	ld	r31, X
  92:	06 80       	ldd	r0, Z+6	; 0x06
  94:	f7 81       	ldd	r31, Z+7	; 0x07
  96:	e0 2d       	mov	r30, r0
  98:	c6 01       	movw	r24, r12
  9a:	09 95       	icall
  9c:	c6 01       	movw	r24, r12
  9e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEc>
  a2:	ec 01       	movw	r28, r24
  a4:	c0 97       	sbiw	r24, 0x30	; 48
  a6:	0a 97       	sbiw	r24, 0x0a	; 10
  a8:	00 f0       	brcs	.+0      	; 0xaa <_ZN6Stream8parseIntEc+0xaa>
  aa:	ca 15       	cp	r28, r10
  ac:	db 05       	cpc	r29, r11
  ae:	01 f0       	breq	.+0      	; 0xb0 <_ZN6Stream8parseIntEc+0xb0>
  b0:	99 20       	and	r9, r9
  b2:	01 f0       	breq	.+0      	; 0xb4 <_ZN6Stream8parseIntEc+0xb4>
  b4:	10 95       	com	r17
  b6:	00 95       	com	r16
  b8:	f0 94       	com	r15
  ba:	e0 94       	com	r14
  bc:	e1 1c       	adc	r14, r1
  be:	f1 1c       	adc	r15, r1
  c0:	01 1d       	adc	r16, r1
  c2:	11 1d       	adc	r17, r1
  c4:	b7 01       	movw	r22, r14
  c6:	c8 01       	movw	r24, r16
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	1f 91       	pop	r17
  ce:	0f 91       	pop	r16
  d0:	ff 90       	pop	r15
  d2:	ef 90       	pop	r14
  d4:	df 90       	pop	r13
  d6:	cf 90       	pop	r12
  d8:	bf 90       	pop	r11
  da:	af 90       	pop	r10
  dc:	9f 90       	pop	r9
  de:	08 95       	ret
Disassembly of section .text._ZN6Stream8parseIntEv:

00000000 <_ZN6Stream8parseIntEv>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	61 e0       	ldi	r22, 0x01	; 1
   2:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEv>
{
  return findUntil(target, length, NULL, 0);
   6:	08 95       	ret
Disassembly of section .text._ZN6Stream9timedReadEv:

00000000 <_ZN6Stream9timedReadEv>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
{
  return findUntil(target, length, NULL, 0);
   4:	ec 01       	movw	r28, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
   a:	68 87       	std	Y+8, r22	; 0x08
   c:	79 87       	std	Y+9, r23	; 0x09
   e:	8a 87       	std	Y+10, r24	; 0x0a
}
  10:	9b 87       	std	Y+11, r25	; 0x0b
  12:	e8 81       	ld	r30, Y
  14:	f9 81       	ldd	r31, Y+1	; 0x01
  16:	06 80       	ldd	r0, Z+6	; 0x06
  18:	f7 81       	ldd	r31, Z+7	; 0x07
  1a:	e0 2d       	mov	r30, r0
  1c:	ce 01       	movw	r24, r28
  1e:	09 95       	icall
  20:	9c 01       	movw	r18, r24
  22:	97 ff       	sbrs	r25, 7
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6Stream9timedReadEv+0x26>
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
  2a:	28 85       	ldd	r18, Y+8	; 0x08
  2c:	39 85       	ldd	r19, Y+9	; 0x09
  2e:	4a 85       	ldd	r20, Y+10	; 0x0a
  30:	5b 85       	ldd	r21, Y+11	; 0x0b
  32:	62 1b       	sub	r22, r18
  34:	73 0b       	sbc	r23, r19
  36:	84 0b       	sbc	r24, r20
  38:	95 0b       	sbc	r25, r21
  3a:	2c 81       	ldd	r18, Y+4	; 0x04
  3c:	3d 81       	ldd	r19, Y+5	; 0x05
  3e:	4e 81       	ldd	r20, Y+6	; 0x06
  40:	5f 81       	ldd	r21, Y+7	; 0x07
  42:	62 17       	cp	r22, r18
  44:	73 07       	cpc	r23, r19
  46:	84 07       	cpc	r24, r20
  48:	95 07       	cpc	r25, r21
  4a:	00 f0       	brcs	.+0      	; 0x4c <_ZN6Stream9timedReadEv+0x4c>
  4c:	2f ef       	ldi	r18, 0xFF	; 255
  4e:	3f ef       	ldi	r19, 0xFF	; 255
  50:	c9 01       	movw	r24, r18
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	08 95       	ret
Disassembly of section .text._ZN6Stream15readStringUntilEc:

00000000 <_ZN6Stream15readStringUntilEc>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
{
  return findUntil(target, length, NULL, 0);
   4:	ff 92       	push	r15
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	08 2f       	mov	r16, r24
}
  10:	f9 2e       	mov	r15, r25
  12:	6b 01       	movw	r12, r22
  14:	14 2f       	mov	r17, r20
  16:	60 e0       	ldi	r22, 0x00	; 0
  18:	70 e0       	ldi	r23, 0x00	; 0
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  1e:	c6 01       	movw	r24, r12
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  24:	bc 01       	movw	r22, r24
  26:	c1 2f       	mov	r28, r17
  28:	dd 27       	eor	r29, r29
  2a:	c7 fd       	sbrc	r28, 7
  2c:	d0 95       	com	r29
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZN6Stream15readStringUntilEc+0x30>
  30:	80 2f       	mov	r24, r16
  32:	9f 2d       	mov	r25, r15
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  38:	c6 01       	movw	r24, r12
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  3e:	bc 01       	movw	r22, r24
  40:	77 fd       	sbrc	r23, 7
  42:	00 c0       	rjmp	.+0      	; 0x44 <_ZN6Stream15readStringUntilEc+0x44>
  44:	6c 17       	cp	r22, r28
  46:	7d 07       	cpc	r23, r29
  48:	01 f4       	brne	.+0      	; 0x4a <_ZN6Stream15readStringUntilEc+0x4a>
  4a:	80 2f       	mov	r24, r16
  4c:	9f 2d       	mov	r25, r15
  4e:	df 91       	pop	r29
  50:	cf 91       	pop	r28
  52:	1f 91       	pop	r17
  54:	0f 91       	pop	r16
  56:	ff 90       	pop	r15
  58:	df 90       	pop	r13
  5a:	cf 90       	pop	r12
  5c:	08 95       	ret
Disassembly of section .text._ZN6Stream10readStringEv:

00000000 <_ZN6Stream10readStringEv>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
{
  return findUntil(target, length, NULL, 0);
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	18 2f       	mov	r17, r24
   a:	09 2f       	mov	r16, r25
   c:	eb 01       	movw	r28, r22
   e:	60 e0       	ldi	r22, 0x00	; 0
}
  10:	70 e0       	ldi	r23, 0x00	; 0
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10readStringEv>
  16:	00 c0       	rjmp	.+0      	; 0x18 <_ZN6Stream10readStringEv+0x18>
  18:	81 2f       	mov	r24, r17
  1a:	90 2f       	mov	r25, r16
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10readStringEv>
  20:	ce 01       	movw	r24, r28
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10readStringEv>
  26:	bc 01       	movw	r22, r24
  28:	97 ff       	sbrs	r25, 7
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN6Stream10readStringEv+0x2c>
  2c:	81 2f       	mov	r24, r17
  2e:	90 2f       	mov	r25, r16
  30:	df 91       	pop	r29
  32:	cf 91       	pop	r28
  34:	1f 91       	pop	r17
  36:	0f 91       	pop	r16
  38:	08 95       	ret
Disassembly of section .text._ZN6Stream14readBytesUntilEcPcj:

00000000 <_ZN6Stream14readBytesUntilEcPcj>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
{
  return findUntil(target, length, NULL, 0);
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
}
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	5c 01       	movw	r10, r24
  16:	7a 01       	movw	r14, r20
  18:	89 01       	movw	r16, r18
  1a:	21 15       	cp	r18, r1
  1c:	31 05       	cpc	r19, r1
  1e:	01 f4       	brne	.+0      	; 0x20 <_ZN6Stream14readBytesUntilEcPcj+0x20>
  20:	c0 e0       	ldi	r28, 0x00	; 0
  22:	d0 e0       	ldi	r29, 0x00	; 0
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6Stream14readBytesUntilEcPcj+0x26>
  26:	c0 e0       	ldi	r28, 0x00	; 0
  28:	d0 e0       	ldi	r29, 0x00	; 0
  2a:	c6 2e       	mov	r12, r22
  2c:	dd 24       	eor	r13, r13
  2e:	c7 fc       	sbrc	r12, 7
  30:	d0 94       	com	r13
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZN6Stream14readBytesUntilEcPcj+0x34>
  34:	c5 01       	movw	r24, r10
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream14readBytesUntilEcPcj>
  3a:	97 fd       	sbrc	r25, 7
  3c:	00 c0       	rjmp	.+0      	; 0x3e <_ZN6Stream14readBytesUntilEcPcj+0x3e>
  3e:	8c 15       	cp	r24, r12
  40:	9d 05       	cpc	r25, r13
  42:	01 f0       	breq	.+0      	; 0x44 <_ZN6Stream14readBytesUntilEcPcj+0x44>
  44:	f7 01       	movw	r30, r14
  46:	81 93       	st	Z+, r24
  48:	7f 01       	movw	r14, r30
  4a:	21 96       	adiw	r28, 0x01	; 1
  4c:	c0 17       	cp	r28, r16
  4e:	d1 07       	cpc	r29, r17
  50:	00 f0       	brcs	.+0      	; 0x52 <_ZN6Stream14readBytesUntilEcPcj+0x52>
  52:	ce 01       	movw	r24, r28
  54:	df 91       	pop	r29
  56:	cf 91       	pop	r28
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	df 90       	pop	r13
  62:	cf 90       	pop	r12
  64:	bf 90       	pop	r11
  66:	af 90       	pop	r10
  68:	08 95       	ret
Disassembly of section .text._ZN6Stream9readBytesEPcj:

00000000 <_ZN6Stream9readBytesEPcj>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
{
  return findUntil(target, length, NULL, 0);
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
}
  10:	6c 01       	movw	r12, r24
  12:	8b 01       	movw	r16, r22
  14:	7a 01       	movw	r14, r20
  16:	c0 e0       	ldi	r28, 0x00	; 0
  18:	d0 e0       	ldi	r29, 0x00	; 0
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN6Stream9readBytesEPcj+0x1c>
  1c:	c6 01       	movw	r24, r12
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9readBytesEPcj>
  22:	97 fd       	sbrc	r25, 7
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6Stream9readBytesEPcj+0x26>
  26:	f8 01       	movw	r30, r16
  28:	81 93       	st	Z+, r24
  2a:	8f 01       	movw	r16, r30
  2c:	21 96       	adiw	r28, 0x01	; 1
  2e:	ce 15       	cp	r28, r14
  30:	df 05       	cpc	r29, r15
  32:	00 f0       	brcs	.+0      	; 0x34 <_ZN6Stream9readBytesEPcj+0x34>
  34:	ce 01       	movw	r24, r28
  36:	df 91       	pop	r29
  38:	cf 91       	pop	r28
  3a:	1f 91       	pop	r17
  3c:	0f 91       	pop	r16
  3e:	ff 90       	pop	r15
  40:	ef 90       	pop	r14
  42:	df 90       	pop	r13
  44:	cf 90       	pop	r12
  46:	08 95       	ret
Disassembly of section .text._ZN6Stream9findUntilEPcjS0_j:

00000000 <_ZN6Stream9findUntilEPcjS0_j>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
{
  return findUntil(target, length, NULL, 0);
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
}
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  1a:	df 93       	push	r29
  1c:	3c 01       	movw	r6, r24
  1e:	7b 01       	movw	r14, r22
  20:	4a 01       	movw	r8, r20
  22:	59 01       	movw	r10, r18
  24:	68 01       	movw	r12, r16
  26:	fb 01       	movw	r30, r22
  28:	80 81       	ld	r24, Z
  2a:	88 23       	and	r24, r24
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN6Stream9findUntilEPcjS0_j+0x2e>
  2e:	c0 e0       	ldi	r28, 0x00	; 0
  30:	d0 e0       	ldi	r29, 0x00	; 0
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZN6Stream9findUntilEPcjS0_j+0x34>
  34:	f7 01       	movw	r30, r14
  36:	ec 0f       	add	r30, r28
  38:	fd 1f       	adc	r31, r29
  3a:	80 81       	ld	r24, Z
  3c:	99 27       	eor	r25, r25
  3e:	87 fd       	sbrc	r24, 7
  40:	90 95       	com	r25
  42:	28 17       	cp	r18, r24
  44:	39 07       	cpc	r19, r25
  46:	01 f0       	breq	.+0      	; 0x48 <_ZN6Stream9findUntilEPcjS0_j+0x48>
  48:	c0 e0       	ldi	r28, 0x00	; 0
  4a:	d0 e0       	ldi	r29, 0x00	; 0
  4c:	f7 01       	movw	r30, r14
  4e:	ec 0f       	add	r30, r28
  50:	fd 1f       	adc	r31, r29
  52:	80 81       	ld	r24, Z
  54:	99 27       	eor	r25, r25
  56:	87 fd       	sbrc	r24, 7
  58:	90 95       	com	r25
  5a:	28 17       	cp	r18, r24
  5c:	39 07       	cpc	r19, r25
  5e:	01 f4       	brne	.+0      	; 0x60 <_ZN6Stream9findUntilEPcjS0_j+0x60>
  60:	21 96       	adiw	r28, 0x01	; 1
  62:	c8 15       	cp	r28, r8
  64:	d9 05       	cpc	r29, r9
  66:	00 f4       	brcc	.+0      	; 0x68 <_ZN6Stream9findUntilEPcjS0_j+0x68>
  68:	c1 14       	cp	r12, r1
  6a:	d1 04       	cpc	r13, r1
  6c:	01 f0       	breq	.+0      	; 0x6e <_ZN6Stream9findUntilEPcjS0_j+0x6e>
  6e:	f5 01       	movw	r30, r10
  70:	e0 0f       	add	r30, r16
  72:	f1 1f       	adc	r31, r17
  74:	80 81       	ld	r24, Z
  76:	99 27       	eor	r25, r25
  78:	87 fd       	sbrc	r24, 7
  7a:	90 95       	com	r25
  7c:	28 17       	cp	r18, r24
  7e:	39 07       	cpc	r19, r25
  80:	01 f4       	brne	.+0      	; 0x82 <_ZN6Stream9findUntilEPcjS0_j+0x82>
  82:	0f 5f       	subi	r16, 0xFF	; 255
  84:	1f 4f       	sbci	r17, 0xFF	; 255
  86:	0c 15       	cp	r16, r12
  88:	1d 05       	cpc	r17, r13
  8a:	00 f0       	brcs	.+0      	; 0x8c <_ZN6Stream9findUntilEPcjS0_j+0x8c>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <_ZN6Stream9findUntilEPcjS0_j+0x8e>
  8e:	00 e0       	ldi	r16, 0x00	; 0
  90:	10 e0       	ldi	r17, 0x00	; 0
  92:	c3 01       	movw	r24, r6
  94:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9findUntilEPcjS0_j>
  98:	9c 01       	movw	r18, r24
  9a:	18 16       	cp	r1, r24
  9c:	19 06       	cpc	r1, r25
  9e:	04 f0       	brlt	.+0      	; 0xa0 <_ZN6Stream9findUntilEPcjS0_j+0xa0>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <_ZN6Stream9findUntilEPcjS0_j+0xa2>
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <_ZN6Stream9findUntilEPcjS0_j+0xa6>
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	1f 91       	pop	r17
  ae:	0f 91       	pop	r16
  b0:	ff 90       	pop	r15
  b2:	ef 90       	pop	r14
  b4:	df 90       	pop	r13
  b6:	cf 90       	pop	r12
  b8:	bf 90       	pop	r11
  ba:	af 90       	pop	r10
  bc:	9f 90       	pop	r9
  be:	8f 90       	pop	r8
  c0:	7f 90       	pop	r7
  c2:	6f 90       	pop	r6
  c4:	08 95       	ret
Disassembly of section .text._ZN6Stream9findUntilEPcS0_:

00000000 <_ZN6Stream9findUntilEPcS0_>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
{
  return findUntil(target, length, NULL, 0);
   4:	9a 01       	movw	r18, r20
   6:	db 01       	movw	r26, r22
   8:	0d 90       	ld	r0, X+
   a:	00 20       	and	r0, r0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6Stream9findUntilEPcS0_+0xe>
   e:	ad 01       	movw	r20, r26
}
  10:	41 50       	subi	r20, 0x01	; 1
  12:	50 40       	sbci	r21, 0x00	; 0
  14:	46 1b       	sub	r20, r22
  16:	57 0b       	sbc	r21, r23
  18:	d9 01       	movw	r26, r18
  1a:	0d 90       	ld	r0, X+
  1c:	00 20       	and	r0, r0
  1e:	01 f4       	brne	.+0      	; 0x20 <_ZN6Stream9findUntilEPcS0_+0x20>
  20:	11 97       	sbiw	r26, 0x01	; 1
  22:	a2 1b       	sub	r26, r18
  24:	b3 0b       	sbc	r27, r19
  26:	8d 01       	movw	r16, r26
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9findUntilEPcS0_>
  2c:	1f 91       	pop	r17
  2e:	0f 91       	pop	r16
  30:	08 95       	ret
Disassembly of section .text._ZN6Stream4findEPc:

00000000 <_ZN6Stream4findEPc>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	40 e0       	ldi	r20, 0x00	; 0
   2:	50 e0       	ldi	r21, 0x00	; 0
{
  return findUntil(target, length, NULL, 0);
   4:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream4findEPc>
   8:	08 95       	ret
Disassembly of section .text._ZN6Stream4findEPcj:

00000000 <_ZN6Stream4findEPcj>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
{
  return findUntil(target, length, NULL, 0);
   4:	20 e0       	ldi	r18, 0x00	; 0
   6:	30 e0       	ldi	r19, 0x00	; 0
   8:	00 e0       	ldi	r16, 0x00	; 0
   a:	10 e0       	ldi	r17, 0x00	; 0
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream4findEPcj>
}
  10:	1f 91       	pop	r17
  12:	0f 91       	pop	r16
  14:	08 95       	ret

Tone.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002eac  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Z12disableTimerh 00000042  00000000  00000000  00003978  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Z6noToneh 0000002e  00000000  00000000  000039ba  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.__vector_7 000000b8  00000000  00000000  000039e8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._Z4tonehjm 0000042a  00000000  00000000  00003aa0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .bss.timer0_toggle_count 00000004  00000000  00000000  00003eca  2**0
                  ALLOC
 10 .bss.timer0_pin_port 00000002  00000000  00000000  00003eca  2**0
                  ALLOC
 11 .bss.timer0_pin_mask 00000001  00000000  00000000  00003eca  2**0
                  ALLOC
 12 .bss.timer1_toggle_count 00000004  00000000  00000000  00003eca  2**0
                  ALLOC
 13 .bss.timer1_pin_port 00000002  00000000  00000000  00003eca  2**0
                  ALLOC
 14 .bss.timer1_pin_mask 00000001  00000000  00000000  00003eca  2**0
                  ALLOC
 15 .bss.timer2_toggle_count 00000004  00000000  00000000  00003eca  2**0
                  ALLOC
 16 .bss.timer2_pin_port 00000002  00000000  00000000  00003eca  2**0
                  ALLOC
 17 .bss.timer2_pin_mask 00000001  00000000  00000000  00003eca  2**0
                  ALLOC
 18 .data._ZL9tone_pins 00000001  00000000  00000000  00003eca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 19 .progmem.data 00000001  00000000  00000000  00003ecb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
Disassembly of section .text._Z12disableTimerh:

00000000 <_Z12disableTimerh>:



// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
   0:	81 30       	cpi	r24, 0x01	; 1
   2:	01 f0       	breq	.+0      	; 0x4 <_Z12disableTimerh+0x4>
   4:	81 30       	cpi	r24, 0x01	; 1
   6:	00 f0       	brcs	.+0      	; 0x8 <_Z12disableTimerh+0x8>
   8:	82 30       	cpi	r24, 0x02	; 2
   a:	01 f4       	brne	.+0      	; 0xc <_Z12disableTimerh+0xc>
   c:	00 c0       	rjmp	.+0      	; 0xe <_Z12disableTimerh+0xe>
   e:	10 92 6e 00 	sts	0x006E, r1
  12:	08 95       	ret
  14:	80 91 6f 00 	lds	r24, 0x006F
  18:	8d 7f       	andi	r24, 0xFD	; 253
  1a:	80 93 6f 00 	sts	0x006F, r24
  1e:	08 95       	ret
  20:	80 91 70 00 	lds	r24, 0x0070
  24:	8d 7f       	andi	r24, 0xFD	; 253
  26:	80 93 70 00 	sts	0x0070, r24
  2a:	81 e0       	ldi	r24, 0x01	; 1
  2c:	80 93 b0 00 	sts	0x00B0, r24
  30:	80 91 b1 00 	lds	r24, 0x00B1
  34:	88 7f       	andi	r24, 0xF8	; 248
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
  36:	84 60       	ori	r24, 0x04	; 4
  38:	80 93 b1 00 	sts	0x00B1, r24
  3c:	10 92 b3 00 	sts	0x00B3, r1
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
  40:	08 95       	ret
Disassembly of section .text._Z6noToneh:

00000000 <_Z6noToneh>:



// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
   0:	1f 93       	push	r17
   2:	18 2f       	mov	r17, r24
   4:	80 91 00 00 	lds	r24, 0x0000
   8:	81 17       	cp	r24, r17
   a:	01 f0       	breq	.+0      	; 0xc <_Z6noToneh+0xc>
   c:	9f ef       	ldi	r25, 0xFF	; 255
   e:	00 c0       	rjmp	.+0      	; 0x10 <_Z6noToneh+0x10>
  10:	e0 e0       	ldi	r30, 0x00	; 0
  12:	f0 e0       	ldi	r31, 0x00	; 0
  14:	94 91       	lpm	r25, Z+
  16:	8f ef       	ldi	r24, 0xFF	; 255
  18:	80 93 00 00 	sts	0x0000, r24
  1c:	89 2f       	mov	r24, r25
  1e:	0e 94 00 00 	call	0	; 0x0 <_Z6noToneh>
  22:	81 2f       	mov	r24, r17
  24:	60 e0       	ldi	r22, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <_Z6noToneh>
  2a:	1f 91       	pop	r17
  2c:	08 95       	ret
Disassembly of section .text.__vector_7:

00000000 <__vector_7>:
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  22:	80 91 00 00 	lds	r24, 0x0000
  26:	90 91 00 00 	lds	r25, 0x0000
  2a:	a0 91 00 00 	lds	r26, 0x0000
  2e:	b0 91 00 00 	lds	r27, 0x0000
  32:	00 97       	sbiw	r24, 0x00	; 0
  34:	a1 05       	cpc	r26, r1
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
  36:	b1 05       	cpc	r27, r1
  38:	01 f0       	breq	.+0      	; 0x3a <__vector_7+0x3a>
  3a:	e0 91 00 00 	lds	r30, 0x0000
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
  3e:	f0 91 00 00 	lds	r31, 0x0000
  42:	80 81       	ld	r24, Z
  44:	90 91 00 00 	lds	r25, 0x0000
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
  48:	89 27       	eor	r24, r25
  4a:	80 83       	st	Z, r24
      tone_pins[i] = _pin;
  4c:	80 91 00 00 	lds	r24, 0x0000
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
  50:	90 91 00 00 	lds	r25, 0x0000
  54:	a0 91 00 00 	lds	r26, 0x0000
      break;
    }
  }
  
  if (_timer != -1)
  58:	b0 91 00 00 	lds	r27, 0x0000
  5c:	18 16       	cp	r1, r24
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
  5e:	19 06       	cpc	r1, r25
  60:	1a 06       	cpc	r1, r26
  62:	1b 06       	cpc	r1, r27
  64:	04 f4       	brge	.+0      	; 0x66 <__vector_7+0x66>
  66:	80 91 00 00 	lds	r24, 0x0000
  6a:	90 91 00 00 	lds	r25, 0x0000
  6e:	a0 91 00 00 	lds	r26, 0x0000
    {
      #if defined(TCCR0A) && defined(TCCR0B)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
  72:	b0 91 00 00 	lds	r27, 0x0000
        TCCR0B = 0;
        bitWrite(TCCR0A, WGM01, 1);
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	a1 09       	sbc	r26, r1
  7a:	b1 09       	sbc	r27, r1
        bitWrite(TCCR0B, CS00, 1);
  7c:	80 93 00 00 	sts	0x0000, r24
  80:	90 93 00 00 	sts	0x0000, r25
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
  84:	a0 93 00 00 	sts	0x0000, r26
  88:	b0 93 00 00 	sts	0x0000, r27
  8c:	00 c0       	rjmp	.+0      	; 0x8e <__vector_7+0x8e>
  8e:	80 91 00 00 	lds	r24, 0x0000
  92:	0e 94 00 00 	call	0	; 0x0 <__vector_7>
  96:	ff 91       	pop	r31
  98:	ef 91       	pop	r30
  9a:	bf 91       	pop	r27
  9c:	af 91       	pop	r26
  9e:	9f 91       	pop	r25
  a0:	8f 91       	pop	r24
  a2:	7f 91       	pop	r23
        timer0_pin_mask = digitalPinToBitMask(_pin);
  a4:	6f 91       	pop	r22
  a6:	5f 91       	pop	r21
  a8:	4f 91       	pop	r20
  aa:	3f 91       	pop	r19
  ac:	2f 91       	pop	r18
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
        TCCR1B = 0;
  b6:	18 95       	reti
Disassembly of section .text._Z4tonehjm:

00000000 <_Z4tonehjm>:



// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	5f 92       	push	r5
   6:	6f 92       	push	r6
   8:	7f 92       	push	r7
   a:	8f 92       	push	r8
   c:	9f 92       	push	r9
   e:	af 92       	push	r10
  10:	bf 92       	push	r11
  12:	cf 92       	push	r12
  14:	df 92       	push	r13
  16:	ef 92       	push	r14
  18:	ff 92       	push	r15
  1a:	0f 93       	push	r16
  1c:	1f 93       	push	r17
  1e:	df 93       	push	r29
  20:	cf 93       	push	r28
  22:	00 d0       	rcall	.+0      	; 0x24 <_Z4tonehjm+0x24>
  24:	00 d0       	rcall	.+0      	; 0x26 <_Z4tonehjm+0x26>
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	de b7       	in	r29, 0x3e	; 62
  2a:	a8 2f       	mov	r26, r24
  2c:	1b 01       	movw	r2, r22
  2e:	29 83       	std	Y+1, r18	; 0x01
  30:	3a 83       	std	Y+2, r19	; 0x02
  32:	4b 83       	std	Y+3, r20	; 0x03
  34:	5c 83       	std	Y+4, r21	; 0x04
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
  36:	80 91 00 00 	lds	r24, 0x0000
  3a:	8a 17       	cp	r24, r26
  3c:	01 f4       	brne	.+0      	; 0x3e <_Z4tonehjm+0x3e>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
  3e:	e0 e0       	ldi	r30, 0x00	; 0
  40:	f0 e0       	ldi	r31, 0x00	; 0
  42:	54 90       	lpm	r5, Z+
  44:	00 c0       	rjmp	.+0      	; 0x46 <_Z4tonehjm+0x46>
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
  46:	8f 3f       	cpi	r24, 0xFF	; 255
  48:	01 f0       	breq	.+0      	; 0x4a <_Z4tonehjm+0x4a>
  4a:	00 c0       	rjmp	.+0      	; 0x4c <_Z4tonehjm+0x4c>
      tone_pins[i] = _pin;
  4c:	a0 93 00 00 	sts	0x0000, r26
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
  50:	e0 e0       	ldi	r30, 0x00	; 0
  52:	f0 e0       	ldi	r31, 0x00	; 0
  54:	54 90       	lpm	r5, Z+
      break;
    }
  }
  
  if (_timer != -1)
  56:	2f ef       	ldi	r18, 0xFF	; 255
  58:	52 16       	cp	r5, r18
  5a:	01 f4       	brne	.+0      	; 0x5c <_Z4tonehjm+0x5c>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <_Z4tonehjm+0x5e>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
  5e:	81 e0       	ldi	r24, 0x01	; 1
  60:	58 16       	cp	r5, r24
  62:	01 f0       	breq	.+0      	; 0x64 <_Z4tonehjm+0x64>
  64:	92 e0       	ldi	r25, 0x02	; 2
  66:	59 16       	cp	r5, r25
  68:	01 f4       	brne	.+0      	; 0x6a <_Z4tonehjm+0x6a>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <_Z4tonehjm+0x6c>
  6c:	55 20       	and	r5, r5
  6e:	01 f0       	breq	.+0      	; 0x70 <_Z4tonehjm+0x70>
  70:	00 c0       	rjmp	.+0      	; 0x72 <_Z4tonehjm+0x72>
    {
      #if defined(TCCR0A) && defined(TCCR0B)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
  72:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0;
  74:	15 bc       	out	0x25, r1	; 37
        bitWrite(TCCR0A, WGM01, 1);
  76:	84 b5       	in	r24, 0x24	; 36
  78:	82 60       	ori	r24, 0x02	; 2
  7a:	84 bd       	out	0x24, r24	; 36
        bitWrite(TCCR0B, CS00, 1);
  7c:	85 b5       	in	r24, 0x25	; 37
  7e:	81 60       	ori	r24, 0x01	; 1
  80:	85 bd       	out	0x25, r24	; 37
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
  82:	2a 2f       	mov	r18, r26
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	f9 01       	movw	r30, r18
  88:	e0 50       	subi	r30, 0x00	; 0
  8a:	f0 40       	sbci	r31, 0x00	; 0
  8c:	e4 91       	lpm	r30, Z+
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	ee 0f       	add	r30, r30
  92:	ff 1f       	adc	r31, r31
  94:	e0 50       	subi	r30, 0x00	; 0
  96:	f0 40       	sbci	r31, 0x00	; 0
  98:	85 91       	lpm	r24, Z+
  9a:	94 91       	lpm	r25, Z+
  9c:	90 93 00 00 	sts	0x0000, r25
  a0:	80 93 00 00 	sts	0x0000, r24
        timer0_pin_mask = digitalPinToBitMask(_pin);
  a4:	20 50       	subi	r18, 0x00	; 0
  a6:	30 40       	sbci	r19, 0x00	; 0
  a8:	f9 01       	movw	r30, r18
  aa:	84 91       	lpm	r24, Z+
  ac:	80 93 00 00 	sts	0x0000, r24
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <_Z4tonehjm+0xb2>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
  b2:	10 92 80 00 	sts	0x0080, r1
        TCCR1B = 0;
  b6:	10 92 81 00 	sts	0x0081, r1
        bitWrite(TCCR1B, WGM12, 1);
  ba:	80 91 81 00 	lds	r24, 0x0081
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	80 93 81 00 	sts	0x0081, r24
        bitWrite(TCCR1B, CS10, 1);
  c4:	80 91 81 00 	lds	r24, 0x0081
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 93 81 00 	sts	0x0081, r24
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
  ce:	2a 2f       	mov	r18, r26
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	f9 01       	movw	r30, r18
  d4:	e0 50       	subi	r30, 0x00	; 0
  d6:	f0 40       	sbci	r31, 0x00	; 0
  d8:	e4 91       	lpm	r30, Z+
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	e0 50       	subi	r30, 0x00	; 0
  e2:	f0 40       	sbci	r31, 0x00	; 0
  e4:	85 91       	lpm	r24, Z+
  e6:	94 91       	lpm	r25, Z+
  e8:	90 93 00 00 	sts	0x0000, r25
  ec:	80 93 00 00 	sts	0x0000, r24
        timer1_pin_mask = digitalPinToBitMask(_pin);
  f0:	20 50       	subi	r18, 0x00	; 0
  f2:	30 40       	sbci	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	84 91       	lpm	r24, Z+
  f8:	80 93 00 00 	sts	0x0000, r24
  fc:	00 c0       	rjmp	.+0      	; 0xfe <_Z4tonehjm+0xfe>
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
  fe:	10 92 b0 00 	sts	0x00B0, r1
        TCCR2B = 0;
 102:	10 92 b1 00 	sts	0x00B1, r1
        bitWrite(TCCR2A, WGM21, 1);
 106:	80 91 b0 00 	lds	r24, 0x00B0
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	80 93 b0 00 	sts	0x00B0, r24
        bitWrite(TCCR2B, CS20, 1);
 110:	80 91 b1 00 	lds	r24, 0x00B1
 114:	81 60       	ori	r24, 0x01	; 1
 116:	80 93 b1 00 	sts	0x00B1, r24
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
 11a:	2a 2f       	mov	r18, r26
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	f9 01       	movw	r30, r18
 120:	e0 50       	subi	r30, 0x00	; 0
 122:	f0 40       	sbci	r31, 0x00	; 0
 124:	e4 91       	lpm	r30, Z+
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	e0 50       	subi	r30, 0x00	; 0
 12e:	f0 40       	sbci	r31, 0x00	; 0
 130:	85 91       	lpm	r24, Z+
 132:	94 91       	lpm	r25, Z+
 134:	90 93 00 00 	sts	0x0000, r25
 138:	80 93 00 00 	sts	0x0000, r24
        timer2_pin_mask = digitalPinToBitMask(_pin);
 13c:	20 50       	subi	r18, 0x00	; 0
 13e:	30 40       	sbci	r19, 0x00	; 0
 140:	f9 01       	movw	r30, r18
 142:	84 91       	lpm	r24, Z+
 144:	80 93 00 00 	sts	0x0000, r24
 148:	00 c0       	rjmp	.+0      	; 0x14a <_Z4tonehjm+0x14a>
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
 14a:	57 fc       	sbrc	r5, 7
 14c:	00 c0       	rjmp	.+0      	; 0x14e <_Z4tonehjm+0x14e>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
 14e:	8a 2f       	mov	r24, r26
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
 156:	55 20       	and	r5, r5
 158:	01 f0       	breq	.+0      	; 0x15a <_Z4tonehjm+0x15a>
 15a:	f2 e0       	ldi	r31, 0x02	; 2
 15c:	5f 16       	cp	r5, r31
 15e:	01 f0       	breq	.+0      	; 0x160 <_Z4tonehjm+0x160>
 160:	00 c0       	rjmp	.+0      	; 0x162 <_Z4tonehjm+0x162>
    {
      ocr = F_CPU / frequency / 2 - 1;
 162:	31 01       	movw	r6, r2
 164:	88 24       	eor	r8, r8
 166:	99 24       	eor	r9, r9
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	79 e0       	ldi	r23, 0x09	; 9
 16c:	8d e3       	ldi	r24, 0x3D	; 61
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	a4 01       	movw	r20, r8
 172:	93 01       	movw	r18, r6
 174:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 178:	59 01       	movw	r10, r18
 17a:	6a 01       	movw	r12, r20
 17c:	86 01       	movw	r16, r12
 17e:	75 01       	movw	r14, r10
 180:	08 94       	sec
 182:	e1 08       	sbc	r14, r1
 184:	f1 08       	sbc	r15, r1
 186:	01 09       	sbc	r16, r1
 188:	11 09       	sbc	r17, r1
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	e2 16       	cp	r14, r18
 18e:	f1 04       	cpc	r15, r1
 190:	01 05       	cpc	r16, r1
 192:	11 05       	cpc	r17, r1
 194:	01 f0       	breq	.+0      	; 0x196 <_Z4tonehjm+0x196>
 196:	00 f4       	brcc	.+0      	; 0x198 <_Z4tonehjm+0x198>
 198:	00 c0       	rjmp	.+0      	; 0x19a <_Z4tonehjm+0x19a>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
 19a:	60 e2       	ldi	r22, 0x20	; 32
 19c:	71 ea       	ldi	r23, 0xA1	; 161
 19e:	87 e0       	ldi	r24, 0x07	; 7
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	a4 01       	movw	r20, r8
 1a4:	93 01       	movw	r18, r6
 1a6:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 1aa:	79 01       	movw	r14, r18
 1ac:	8a 01       	movw	r16, r20
 1ae:	08 94       	sec
 1b0:	e1 08       	sbc	r14, r1
 1b2:	f1 08       	sbc	r15, r1
 1b4:	01 09       	sbc	r16, r1
 1b6:	11 09       	sbc	r17, r1
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	58 16       	cp	r5, r24
 1bc:	01 f4       	brne	.+0      	; 0x1be <_Z4tonehjm+0x1be>
 1be:	9f ef       	ldi	r25, 0xFF	; 255
 1c0:	e9 16       	cp	r14, r25
 1c2:	f1 04       	cpc	r15, r1
 1c4:	01 05       	cpc	r16, r1
 1c6:	11 05       	cpc	r17, r1
 1c8:	01 f0       	breq	.+0      	; 0x1ca <_Z4tonehjm+0x1ca>
 1ca:	00 f4       	brcc	.+0      	; 0x1cc <_Z4tonehjm+0x1cc>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <_Z4tonehjm+0x1ce>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
 1ce:	68 e4       	ldi	r22, 0x48	; 72
 1d0:	78 ee       	ldi	r23, 0xE8	; 232
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	a4 01       	movw	r20, r8
 1d8:	93 01       	movw	r18, r6
 1da:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 1de:	79 01       	movw	r14, r18
 1e0:	8a 01       	movw	r16, r20
 1e2:	08 94       	sec
 1e4:	e1 08       	sbc	r14, r1
 1e6:	f1 08       	sbc	r15, r1
 1e8:	01 09       	sbc	r16, r1
 1ea:	11 09       	sbc	r17, r1
 1ec:	83 e0       	ldi	r24, 0x03	; 3
          prescalarbits = 0b011;
        }

        if (ocr > 255)
 1ee:	af ef       	ldi	r26, 0xFF	; 255
 1f0:	ea 16       	cp	r14, r26
 1f2:	f1 04       	cpc	r15, r1
 1f4:	01 05       	cpc	r16, r1
 1f6:	11 05       	cpc	r17, r1
 1f8:	01 f0       	breq	.+0      	; 0x1fa <_Z4tonehjm+0x1fa>
 1fa:	00 f4       	brcc	.+0      	; 0x1fc <_Z4tonehjm+0x1fc>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <_Z4tonehjm+0x1fe>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
 1fe:	64 e2       	ldi	r22, 0x24	; 36
 200:	74 ef       	ldi	r23, 0xF4	; 244
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	a4 01       	movw	r20, r8
 208:	93 01       	movw	r18, r6
 20a:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 20e:	79 01       	movw	r14, r18
 210:	8a 01       	movw	r16, r20
 212:	08 94       	sec
 214:	e1 08       	sbc	r14, r1
 216:	f1 08       	sbc	r15, r1
 218:	01 09       	sbc	r16, r1
 21a:	11 09       	sbc	r17, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
 21c:	55 20       	and	r5, r5
 21e:	01 f4       	brne	.+0      	; 0x220 <_Z4tonehjm+0x220>
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	00 c0       	rjmp	.+0      	; 0x224 <_Z4tonehjm+0x224>

          if (_timer == 2 && ocr > 255)
 224:	b2 e0       	ldi	r27, 0x02	; 2
 226:	5b 16       	cp	r5, r27
 228:	01 f0       	breq	.+0      	; 0x22a <_Z4tonehjm+0x22a>
 22a:	84 e0       	ldi	r24, 0x04	; 4
 22c:	00 c0       	rjmp	.+0      	; 0x22e <_Z4tonehjm+0x22e>
 22e:	ef ef       	ldi	r30, 0xFF	; 255
 230:	ee 16       	cp	r14, r30
 232:	f1 04       	cpc	r15, r1
 234:	01 05       	cpc	r16, r1
 236:	11 05       	cpc	r17, r1
 238:	01 f0       	breq	.+0      	; 0x23a <_Z4tonehjm+0x23a>
 23a:	00 f4       	brcc	.+0      	; 0x23c <_Z4tonehjm+0x23c>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <_Z4tonehjm+0x23e>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
 23e:	62 e1       	ldi	r22, 0x12	; 18
 240:	7a e7       	ldi	r23, 0x7A	; 122
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	a4 01       	movw	r20, r8
 248:	93 01       	movw	r18, r6
 24a:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 24e:	79 01       	movw	r14, r18
 250:	8a 01       	movw	r16, r20
 252:	08 94       	sec
 254:	e1 08       	sbc	r14, r1
 256:	f1 08       	sbc	r15, r1
 258:	01 09       	sbc	r16, r1
 25a:	11 09       	sbc	r17, r1
 25c:	85 e0       	ldi	r24, 0x05	; 5
            prescalarbits = 0b101;
          }

          if (ocr > 255)
 25e:	ff ef       	ldi	r31, 0xFF	; 255
 260:	ef 16       	cp	r14, r31
 262:	f1 04       	cpc	r15, r1
 264:	01 05       	cpc	r16, r1
 266:	11 05       	cpc	r17, r1
 268:	01 f0       	breq	.+0      	; 0x26a <_Z4tonehjm+0x26a>
 26a:	00 f0       	brcs	.+0      	; 0x26c <_Z4tonehjm+0x26c>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
 26c:	69 e0       	ldi	r22, 0x09	; 9
 26e:	7d e3       	ldi	r23, 0x3D	; 61
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	a4 01       	movw	r20, r8
 276:	93 01       	movw	r18, r6
 278:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 27c:	79 01       	movw	r14, r18
 27e:	8a 01       	movw	r16, r20
 280:	08 94       	sec
 282:	e1 08       	sbc	r14, r1
 284:	f1 08       	sbc	r15, r1
 286:	01 09       	sbc	r16, r1
 288:	11 09       	sbc	r17, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
 28a:	55 20       	and	r5, r5
 28c:	01 f0       	breq	.+0      	; 0x28e <_Z4tonehjm+0x28e>
 28e:	86 e0       	ldi	r24, 0x06	; 6
 290:	00 c0       	rjmp	.+0      	; 0x292 <_Z4tonehjm+0x292>
 292:	84 e0       	ldi	r24, 0x04	; 4
            if (ocr > 255)
 294:	2f ef       	ldi	r18, 0xFF	; 255
 296:	e2 16       	cp	r14, r18
 298:	f1 04       	cpc	r15, r1
 29a:	01 05       	cpc	r16, r1
 29c:	11 05       	cpc	r17, r1
 29e:	01 f0       	breq	.+0      	; 0x2a0 <_Z4tonehjm+0x2a0>
 2a0:	00 f0       	brcs	.+0      	; 0x2a2 <_Z4tonehjm+0x2a2>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
 2a2:	86 01       	movw	r16, r12
 2a4:	75 01       	movw	r14, r10
 2a6:	9a e0       	ldi	r25, 0x0A	; 10
 2a8:	16 95       	lsr	r17
 2aa:	07 95       	ror	r16
 2ac:	f7 94       	ror	r15
 2ae:	e7 94       	ror	r14
 2b0:	9a 95       	dec	r25
 2b2:	01 f4       	brne	.+0      	; 0x2b4 <_Z4tonehjm+0x2b4>
 2b4:	08 94       	sec
 2b6:	e1 08       	sbc	r14, r1
 2b8:	f1 08       	sbc	r15, r1
 2ba:	01 09       	sbc	r16, r1
 2bc:	11 09       	sbc	r17, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
 2be:	55 20       	and	r5, r5
 2c0:	01 f0       	breq	.+0      	; 0x2c2 <_Z4tonehjm+0x2c2>
 2c2:	87 e0       	ldi	r24, 0x07	; 7
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <_Z4tonehjm+0x2c6>
 2c6:	85 e0       	ldi	r24, 0x05	; 5
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <_Z4tonehjm+0x2ca>
 2ca:	81 e0       	ldi	r24, 0x01	; 1
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
 2cc:	55 20       	and	r5, r5
 2ce:	01 f4       	brne	.+0      	; 0x2d0 <_Z4tonehjm+0x2d0>
      {
        TCCR0B = prescalarbits;
 2d0:	85 bd       	out	0x25, r24	; 37
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <_Z4tonehjm+0x2d4>
 2d4:	82 e0       	ldi	r24, 0x02	; 2
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = prescalarbits;
 2d6:	80 93 b1 00 	sts	0x00B1, r24
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <_Z4tonehjm+0x2dc>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
 2dc:	51 01       	movw	r10, r2
 2de:	cc 24       	eor	r12, r12
 2e0:	dd 24       	eor	r13, r13
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	79 e0       	ldi	r23, 0x09	; 9
 2e6:	8d e3       	ldi	r24, 0x3D	; 61
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	a6 01       	movw	r20, r12
 2ec:	95 01       	movw	r18, r10
 2ee:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 2f2:	79 01       	movw	r14, r18
 2f4:	8a 01       	movw	r16, r20
 2f6:	08 94       	sec
 2f8:	e1 08       	sbc	r14, r1
 2fa:	f1 08       	sbc	r15, r1
 2fc:	01 09       	sbc	r16, r1
 2fe:	11 09       	sbc	r17, r1

      prescalarbits = 0b001;
      if (ocr > 0xffff)
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	e8 16       	cp	r14, r24
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	f8 06       	cpc	r15, r24
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	08 07       	cpc	r16, r24
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	18 07       	cpc	r17, r24
 310:	00 f4       	brcc	.+0      	; 0x312 <_Z4tonehjm+0x312>
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	00 c0       	rjmp	.+0      	; 0x316 <_Z4tonehjm+0x316>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
 316:	64 e2       	ldi	r22, 0x24	; 36
 318:	74 ef       	ldi	r23, 0xF4	; 244
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	a6 01       	movw	r20, r12
 320:	95 01       	movw	r18, r10
 322:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 326:	79 01       	movw	r14, r18
 328:	8a 01       	movw	r16, r20
 32a:	08 94       	sec
 32c:	e1 08       	sbc	r14, r1
 32e:	f1 08       	sbc	r15, r1
 330:	01 09       	sbc	r16, r1
 332:	11 09       	sbc	r17, r1
 334:	93 e0       	ldi	r25, 0x03	; 3
        prescalarbits = 0b011;
      }

      if (_timer == 1)
 336:	a1 e0       	ldi	r26, 0x01	; 1
 338:	5a 16       	cp	r5, r26
 33a:	01 f4       	brne	.+0      	; 0x33c <_Z4tonehjm+0x33c>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
 33c:	80 91 81 00 	lds	r24, 0x0081
 340:	88 7f       	andi	r24, 0xF8	; 248
 342:	98 2b       	or	r25, r24
 344:	90 93 81 00 	sts	0x0081, r25

    }
    

    // Calculate the toggle count
    if (duration > 0)
 348:	89 81       	ldd	r24, Y+1	; 0x01
 34a:	9a 81       	ldd	r25, Y+2	; 0x02
 34c:	ab 81       	ldd	r26, Y+3	; 0x03
 34e:	bc 81       	ldd	r27, Y+4	; 0x04
 350:	00 97       	sbiw	r24, 0x00	; 0
 352:	a1 05       	cpc	r26, r1
 354:	b1 05       	cpc	r27, r1
 356:	01 f4       	brne	.+0      	; 0x358 <_Z4tonehjm+0x358>
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	9f ef       	ldi	r25, 0xFF	; 255
 35c:	af ef       	ldi	r26, 0xFF	; 255
 35e:	bf ef       	ldi	r27, 0xFF	; 255
 360:	00 c0       	rjmp	.+0      	; 0x362 <_Z4tonehjm+0x362>
    {
      toggle_count = 2 * frequency * duration / 1000;
 362:	22 0c       	add	r2, r2
 364:	33 1c       	adc	r3, r3
 366:	b1 01       	movw	r22, r2
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	29 81       	ldd	r18, Y+1	; 0x01
 36e:	3a 81       	ldd	r19, Y+2	; 0x02
 370:	4b 81       	ldd	r20, Y+3	; 0x03
 372:	5c 81       	ldd	r21, Y+4	; 0x04
 374:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 378:	28 ee       	ldi	r18, 0xE8	; 232
 37a:	33 e0       	ldi	r19, 0x03	; 3
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	50 e0       	ldi	r21, 0x00	; 0
 380:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 384:	c9 01       	movw	r24, r18
 386:	da 01       	movw	r26, r20
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
 388:	e1 e0       	ldi	r30, 0x01	; 1
 38a:	5e 16       	cp	r5, r30
 38c:	01 f0       	breq	.+0      	; 0x38e <_Z4tonehjm+0x38e>
 38e:	f2 e0       	ldi	r31, 0x02	; 2
 390:	5f 16       	cp	r5, r31
 392:	01 f0       	breq	.+0      	; 0x394 <_Z4tonehjm+0x394>
 394:	55 20       	and	r5, r5
 396:	01 f4       	brne	.+0      	; 0x398 <_Z4tonehjm+0x398>
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
 398:	e7 bc       	out	0x27, r14	; 39
        timer0_toggle_count = toggle_count;
 39a:	80 93 00 00 	sts	0x0000, r24
 39e:	90 93 00 00 	sts	0x0000, r25
 3a2:	a0 93 00 00 	sts	0x0000, r26
 3a6:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK0, OCIE0A, 1);
 3aa:	80 91 6e 00 	lds	r24, 0x006E
 3ae:	82 60       	ori	r24, 0x02	; 2
 3b0:	80 93 6e 00 	sts	0x006E, r24
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <_Z4tonehjm+0x3b6>
        break;
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
 3b6:	f0 92 89 00 	sts	0x0089, r15
 3ba:	e0 92 88 00 	sts	0x0088, r14
        timer1_toggle_count = toggle_count;
 3be:	80 93 00 00 	sts	0x0000, r24
 3c2:	90 93 00 00 	sts	0x0000, r25
 3c6:	a0 93 00 00 	sts	0x0000, r26
 3ca:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK1, OCIE1A, 1);
 3ce:	80 91 6f 00 	lds	r24, 0x006F
 3d2:	82 60       	ori	r24, 0x02	; 2
 3d4:	80 93 6f 00 	sts	0x006F, r24
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <_Z4tonehjm+0x3da>
#endif
        break;

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
 3da:	e0 92 b3 00 	sts	0x00B3, r14
        timer2_toggle_count = toggle_count;
 3de:	80 93 00 00 	sts	0x0000, r24
 3e2:	90 93 00 00 	sts	0x0000, r25
 3e6:	a0 93 00 00 	sts	0x0000, r26
 3ea:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK2, OCIE2A, 1);
 3ee:	80 91 70 00 	lds	r24, 0x0070
 3f2:	82 60       	ori	r24, 0x02	; 2
 3f4:	80 93 70 00 	sts	0x0070, r24
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <_Z4tonehjm+0x3fa>
        break;
#endif

    }
  }
}
 3fa:	84 e0       	ldi	r24, 0x04	; 4
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <_Z4tonehjm+0x3fe>
 3fe:	0f 90       	pop	r0
 400:	0f 90       	pop	r0
 402:	0f 90       	pop	r0
 404:	0f 90       	pop	r0
 406:	cf 91       	pop	r28
 408:	df 91       	pop	r29
 40a:	1f 91       	pop	r17
 40c:	0f 91       	pop	r16
 40e:	ff 90       	pop	r15
 410:	ef 90       	pop	r14
 412:	df 90       	pop	r13
 414:	cf 90       	pop	r12
 416:	bf 90       	pop	r11
 418:	af 90       	pop	r10
 41a:	9f 90       	pop	r9
 41c:	8f 90       	pop	r8
 41e:	7f 90       	pop	r7
 420:	6f 90       	pop	r6
 422:	5f 90       	pop	r5
 424:	3f 90       	pop	r3
 426:	2f 90       	pop	r2
 428:	08 95       	ret

USBCore.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000528  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002cf0  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING

WInterrupts.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000f76  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.attachInterrupt 00000046  00000000  00000000  000016fa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.detachInterrupt 00000026  00000000  00000000  00001740  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.__vector_1 0000005a  00000000  00000000  00001766  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__vector_2 0000005a  00000000  00000000  000017c0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .bss.intFunc  00000004  00000000  00000000  0000181a  2**0
                  ALLOC
Disassembly of section .text.attachInterrupt:

00000000 <attachInterrupt>:
ISR(INT0_vect) {
  if(intFunc[EXTERNAL_INT_0])
    intFunc[EXTERNAL_INT_0]();
}

ISR(INT1_vect) {
   0:	82 30       	cpi	r24, 0x02	; 2
   2:	00 f4       	brcc	.+0      	; 0x4 <attachInterrupt+0x4>
   4:	e8 2f       	mov	r30, r24
   6:	f0 e0       	ldi	r31, 0x00	; 0
   8:	ee 0f       	add	r30, r30
   a:	ff 1f       	adc	r31, r31
   c:	e0 50       	subi	r30, 0x00	; 0
   e:	f0 40       	sbci	r31, 0x00	; 0
  10:	71 83       	std	Z+1, r23	; 0x01
  12:	60 83       	st	Z, r22
  14:	88 23       	and	r24, r24
  16:	01 f0       	breq	.+0      	; 0x18 <attachInterrupt+0x18>
  18:	81 30       	cpi	r24, 0x01	; 1
  1a:	01 f4       	brne	.+0      	; 0x1c <attachInterrupt+0x1c>
  1c:	00 c0       	rjmp	.+0      	; 0x1e <attachInterrupt+0x1e>
  1e:	80 91 69 00 	lds	r24, 0x0069
  if(intFunc[EXTERNAL_INT_1])
  22:	8c 7f       	andi	r24, 0xFC	; 252
  24:	84 2b       	or	r24, r20
  26:	80 93 69 00 	sts	0x0069, r24
  2a:	e8 9a       	sbi	0x1d, 0	; 29
  2c:	08 95       	ret
    intFunc[EXTERNAL_INT_1]();
  2e:	80 91 69 00 	lds	r24, 0x0069
  32:	44 0f       	add	r20, r20
  34:	55 1f       	adc	r21, r21
  36:	44 0f       	add	r20, r20
}
  38:	55 1f       	adc	r21, r21
  3a:	83 7f       	andi	r24, 0xF3	; 243
  3c:	84 2b       	or	r24, r20
  3e:	80 93 69 00 	sts	0x0069, r24
  42:	e9 9a       	sbi	0x1d, 1	; 29
  44:	08 95       	ret
Disassembly of section .text.detachInterrupt:

00000000 <detachInterrupt>:
ISR(INT0_vect) {
  if(intFunc[EXTERNAL_INT_0])
    intFunc[EXTERNAL_INT_0]();
}

ISR(INT1_vect) {
   0:	82 30       	cpi	r24, 0x02	; 2
   2:	00 f4       	brcc	.+0      	; 0x4 <detachInterrupt+0x4>
   4:	88 23       	and	r24, r24
   6:	01 f0       	breq	.+0      	; 0x8 <detachInterrupt+0x8>
   8:	81 30       	cpi	r24, 0x01	; 1
   a:	01 f4       	brne	.+0      	; 0xc <detachInterrupt+0xc>
   c:	00 c0       	rjmp	.+0      	; 0xe <detachInterrupt+0xe>
   e:	e8 98       	cbi	0x1d, 0	; 29
  10:	00 c0       	rjmp	.+0      	; 0x12 <detachInterrupt+0x12>
  12:	e9 98       	cbi	0x1d, 1	; 29
  14:	e8 2f       	mov	r30, r24
  16:	f0 e0       	ldi	r31, 0x00	; 0
  18:	ee 0f       	add	r30, r30
  1a:	ff 1f       	adc	r31, r31
  1c:	e0 50       	subi	r30, 0x00	; 0
  1e:	f0 40       	sbci	r31, 0x00	; 0
  20:	11 82       	std	Z+1, r1	; 0x01
  if(intFunc[EXTERNAL_INT_1])
  22:	10 82       	st	Z, r1
  24:	08 95       	ret
Disassembly of section .text.__vector_1:

00000000 <__vector_1>:
ISR(INT0_vect) {
  if(intFunc[EXTERNAL_INT_0])
    intFunc[EXTERNAL_INT_0]();
}

ISR(INT1_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
  22:	80 91 00 00 	lds	r24, 0x0000
  26:	90 91 00 00 	lds	r25, 0x0000
  2a:	89 2b       	or	r24, r25
  2c:	01 f0       	breq	.+0      	; 0x2e <__vector_1+0x2e>
    intFunc[EXTERNAL_INT_1]();
  2e:	e0 91 00 00 	lds	r30, 0x0000
  32:	f0 91 00 00 	lds	r31, 0x0000
  36:	09 95       	icall
}
  38:	ff 91       	pop	r31
  3a:	ef 91       	pop	r30
  3c:	bf 91       	pop	r27
  3e:	af 91       	pop	r26
  40:	9f 91       	pop	r25
  42:	8f 91       	pop	r24
  44:	7f 91       	pop	r23
  46:	6f 91       	pop	r22
  48:	5f 91       	pop	r21
  4a:	4f 91       	pop	r20
  4c:	3f 91       	pop	r19
  4e:	2f 91       	pop	r18
  50:	0f 90       	pop	r0
  52:	0f be       	out	0x3f, r0	; 63
  54:	0f 90       	pop	r0
  56:	1f 90       	pop	r1
  58:	18 95       	reti
Disassembly of section .text.__vector_2:

00000000 <__vector_2>:
ISR(INT0_vect) {
  if(intFunc[EXTERNAL_INT_0])
    intFunc[EXTERNAL_INT_0]();
}

ISR(INT1_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
  22:	80 91 00 00 	lds	r24, 0x0000
  26:	90 91 00 00 	lds	r25, 0x0000
  2a:	89 2b       	or	r24, r25
  2c:	01 f0       	breq	.+0      	; 0x2e <__vector_2+0x2e>
    intFunc[EXTERNAL_INT_1]();
  2e:	e0 91 00 00 	lds	r30, 0x0000
  32:	f0 91 00 00 	lds	r31, 0x0000
  36:	09 95       	icall
}
  38:	ff 91       	pop	r31
  3a:	ef 91       	pop	r30
  3c:	bf 91       	pop	r27
  3e:	af 91       	pop	r26
  40:	9f 91       	pop	r25
  42:	8f 91       	pop	r24
  44:	7f 91       	pop	r23
  46:	6f 91       	pop	r22
  48:	5f 91       	pop	r21
  4a:	4f 91       	pop	r20
  4c:	3f 91       	pop	r19
  4e:	2f 91       	pop	r18
  50:	0f 90       	pop	r0
  52:	0f be       	out	0x3f, r0	; 63
  54:	0f 90       	pop	r0
  56:	1f 90       	pop	r1
  58:	18 95       	reti

WMath.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000450  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000680  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Z3maplllll 00000092  00000000  00000000  00000b04  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Z8makeWordj 00000002  00000000  00000000  00000b96  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text._Z8makeWordhh 0000000e  00000000  00000000  00000b98  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text._Z6randoml 00000044  00000000  00000000  00000ba6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._Z6randomll 0000003c  00000000  00000000  00000bea  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._Z10randomSeedj 00000010  00000000  00000000  00000c26  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
Disassembly of section .text._Z3maplllll:

00000000 <_Z3maplllll>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
    srandom(seed);
   4:	4f 92       	push	r4
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
   e:	9f 92       	push	r9
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	cf 92       	push	r12
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  1e:	1f 93       	push	r17
  20:	df 93       	push	r29
  22:	cf 93       	push	r28
  24:	cd b7       	in	r28, 0x3d	; 61
  26:	de b7       	in	r29, 0x3e	; 62
  28:	3b 01       	movw	r6, r22
  2a:	4c 01       	movw	r8, r24
  2c:	19 01       	movw	r2, r18
  2e:	2a 01       	movw	r4, r20
  30:	6d 89       	ldd	r22, Y+21	; 0x15
  32:	7e 89       	ldd	r23, Y+22	; 0x16
  34:	8f 89       	ldd	r24, Y+23	; 0x17
  36:	98 8d       	ldd	r25, Y+24	; 0x18
  38:	6a 19       	sub	r22, r10
  3a:	7b 09       	sbc	r23, r11
  3c:	8c 09       	sbc	r24, r12
  3e:	9d 09       	sbc	r25, r13
  40:	62 1a       	sub	r6, r18
  42:	73 0a       	sbc	r7, r19
  44:	84 0a       	sbc	r8, r20
  46:	95 0a       	sbc	r9, r21
  48:	a4 01       	movw	r20, r8
  4a:	93 01       	movw	r18, r6
  4c:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  50:	e2 18       	sub	r14, r2
  52:	f3 08       	sbc	r15, r3
  54:	04 09       	sbc	r16, r4
  56:	15 09       	sbc	r17, r5
  58:	a8 01       	movw	r20, r16
  5a:	97 01       	movw	r18, r14
  5c:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  60:	2a 0d       	add	r18, r10
  62:	3b 1d       	adc	r19, r11
  64:	4c 1d       	adc	r20, r12
  66:	5d 1d       	adc	r21, r13
  68:	b9 01       	movw	r22, r18
  6a:	ca 01       	movw	r24, r20
  6c:	cf 91       	pop	r28
  6e:	df 91       	pop	r29
  70:	1f 91       	pop	r17
  72:	0f 91       	pop	r16
  74:	ff 90       	pop	r15
  76:	ef 90       	pop	r14
  78:	df 90       	pop	r13
  7a:	cf 90       	pop	r12
  7c:	bf 90       	pop	r11
  7e:	af 90       	pop	r10
  80:	9f 90       	pop	r9
  82:	8f 90       	pop	r8
  84:	7f 90       	pop	r7
  86:	6f 90       	pop	r6
  88:	5f 90       	pop	r5
  8a:	4f 90       	pop	r4
  8c:	3f 90       	pop	r3
  8e:	2f 90       	pop	r2
  90:	08 95       	ret
Disassembly of section .text._Z8makeWordj:

00000000 <_Z8makeWordj>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
   0:	08 95       	ret
Disassembly of section .text._Z8makeWordhh:

00000000 <_Z8makeWordhh>:
   0:	70 e0       	ldi	r23, 0x00	; 0
   2:	38 2f       	mov	r19, r24
    srandom(seed);
   4:	20 e0       	ldi	r18, 0x00	; 0
   6:	62 2b       	or	r22, r18
   8:	73 2b       	or	r23, r19
   a:	cb 01       	movw	r24, r22
   c:	08 95       	ret
Disassembly of section .text._Z6randoml:

00000000 <_Z6randoml>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
    srandom(seed);
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7b 01       	movw	r14, r22
   a:	8c 01       	movw	r16, r24
   c:	61 15       	cp	r22, r1
   e:	71 05       	cpc	r23, r1
  10:	81 05       	cpc	r24, r1
  12:	91 05       	cpc	r25, r1
  14:	01 f4       	brne	.+0      	; 0x16 <_Z6randoml+0x16>
  16:	20 e0       	ldi	r18, 0x00	; 0
  18:	30 e0       	ldi	r19, 0x00	; 0
  1a:	40 e0       	ldi	r20, 0x00	; 0
  1c:	50 e0       	ldi	r21, 0x00	; 0
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_Z6randoml+0x20>
  20:	0e 94 00 00 	call	0	; 0x0 <_Z6randoml>
  24:	a8 01       	movw	r20, r16
  26:	97 01       	movw	r18, r14
  28:	0e 94 00 00 	call	0	; 0x0 <_Z6randoml>
  2c:	ac 01       	movw	r20, r24
  2e:	cb 01       	movw	r24, r22
  30:	da 01       	movw	r26, r20
  32:	9c 01       	movw	r18, r24
  34:	ad 01       	movw	r20, r26
  36:	b9 01       	movw	r22, r18
  38:	ca 01       	movw	r24, r20
  3a:	1f 91       	pop	r17
  3c:	0f 91       	pop	r16
  3e:	ff 90       	pop	r15
  40:	ef 90       	pop	r14
  42:	08 95       	ret
Disassembly of section .text._Z6randomll:

00000000 <_Z6randomll>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
    srandom(seed);
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7b 01       	movw	r14, r22
   a:	8c 01       	movw	r16, r24
   c:	62 17       	cp	r22, r18
   e:	73 07       	cpc	r23, r19
  10:	84 07       	cpc	r24, r20
  12:	95 07       	cpc	r25, r21
  14:	04 f4       	brge	.+0      	; 0x16 <_Z6randomll+0x16>
  16:	26 1b       	sub	r18, r22
  18:	37 0b       	sbc	r19, r23
  1a:	48 0b       	sbc	r20, r24
  1c:	59 0b       	sbc	r21, r25
  1e:	ca 01       	movw	r24, r20
  20:	b9 01       	movw	r22, r18
  22:	0e 94 00 00 	call	0	; 0x0 <_Z6randomll>
  26:	e6 0e       	add	r14, r22
  28:	f7 1e       	adc	r15, r23
  2a:	08 1f       	adc	r16, r24
  2c:	19 1f       	adc	r17, r25
  2e:	b7 01       	movw	r22, r14
  30:	c8 01       	movw	r24, r16
  32:	1f 91       	pop	r17
  34:	0f 91       	pop	r16
  36:	ff 90       	pop	r15
  38:	ef 90       	pop	r14
  3a:	08 95       	ret
Disassembly of section .text._Z10randomSeedj:

00000000 <_Z10randomSeedj>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
   0:	00 97       	sbiw	r24, 0x00	; 0
   2:	01 f0       	breq	.+0      	; 0x4 <_Z10randomSeedj+0x4>
    srandom(seed);
   4:	bc 01       	movw	r22, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	0e 94 00 00 	call	0	; 0x0 <_Z10randomSeedj>
   e:	08 95       	ret

WString.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000001  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000035  2**0
                  ALLOC
  3 .stab         00002c28  00000000  00000000  00000038  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000346a  00000000  00000000  00002c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZNK6String6charAtEj 00000022  00000000  00000000  000060ca  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN6String9setCharAtEjc 0000001a  00000000  00000000  000060ec  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN6StringixEj 0000002a  00000000  00000000  00006106  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZNK6StringixEj 00000022  00000000  00000000  00006130  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN6String7replaceEcc 0000001e  00000000  00000000  00006152  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZNK6String5toIntEv 00000022  00000000  00000000  00006170  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN6String4trimEv 000000b6  00000000  00000000  00006192  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN6String11toUpperCaseEv 00000028  00000000  00000000  00006248  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN6String11toLowerCaseEv 00000028  00000000  00000000  00006270  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZNK6String16equalsIgnoreCaseERKS_ 00000078  00000000  00000000  00006298  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZNK6String11lastIndexOfERKS_j 0000009c  00000000  00000000  00006310  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZNK6String11lastIndexOfERKS_ 0000001c  00000000  00000000  000063ac  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZNK6String7indexOfERKS_j 0000003c  00000000  00000000  000063c8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZNK6String7indexOfERKS_ 0000000a  00000000  00000000  00006404  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZNK6String11lastIndexOfEcj 0000006e  00000000  00000000  0000640e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZNK6String11lastIndexOfEc 00000010  00000000  00000000  0000647c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZNK6String7indexOfEcj 0000003c  00000000  00000000  0000648c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZNK6String7indexOfEc 0000000a  00000000  00000000  000064c8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZNK6String8getBytesEPhjj 0000005a  00000000  00000000  000064d2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZNK6String8endsWithERKS_ 00000044  00000000  00000000  0000652c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZNK6String6equalsEPKc 00000046  00000000  00000000  00006570  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZNK6String9compareToERKS_ 00000066  00000000  00000000  000065b6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZNK6StringgeERKS_ 00000010  00000000  00000000  0000661c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZNK6StringleERKS_ 00000012  00000000  00000000  0000662c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZNK6StringgtERKS_ 00000012  00000000  00000000  0000663e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZNK6StringltERKS_ 0000000e  00000000  00000000  00006650  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text._ZNK6String6equalsERKS_ 0000002c  00000000  00000000  0000665e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text._ZNK6String10startsWithERKS_j 00000046  00000000  00000000  0000668a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .text._ZNK6String10startsWithERKS_ 00000026  00000000  00000000  000066d0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 34 .text._ZN6String12changeBufferEj 00000034  00000000  00000000  000066f6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 35 .text._ZN6String7replaceERKS_S1_ 0000020a  00000000  00000000  0000672a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 36 .text._ZN6String7reserveEj 00000038  00000000  00000000  00006934  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 37 .text._ZN6String6concatEPKcj 0000005a  00000000  00000000  0000696c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 38 .text._ZN6String6concatEm 00000064  00000000  00000000  000069c6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 39 .text._ZN6String6concatEl 00000064  00000000  00000000  00006a2a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 40 .text._ZN6String6concatEj 0000005c  00000000  00000000  00006a8e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 41 .text._ZN6String6concatEi 00000062  00000000  00000000  00006aea  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 42 .text._ZN6String6concatEh 00000058  00000000  00000000  00006b4c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 43 .text._ZN6String6concatEc 00000026  00000000  00000000  00006ba4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 44 .text._ZN6String6concatEPKc 00000020  00000000  00000000  00006bca  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 45 .text._ZN6String6concatERKS_ 00000010  00000000  00000000  00006bea  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 46 .text._ZN6String10invalidateEv 00000024  00000000  00000000  00006bfa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 47 .text._ZplRK15StringSumHelperm 00000022  00000000  00000000  00006c1e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 48 .text._ZplRK15StringSumHelperl 00000022  00000000  00000000  00006c40  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 49 .text._ZplRK15StringSumHelperj 00000022  00000000  00000000  00006c62  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 50 .text._ZplRK15StringSumHelperi 00000022  00000000  00000000  00006c84  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 51 .text._ZplRK15StringSumHelperh 00000022  00000000  00000000  00006ca6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 52 .text._ZplRK15StringSumHelperc 00000022  00000000  00000000  00006cc8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 53 .text._ZplRK15StringSumHelperPKc 00000038  00000000  00000000  00006cea  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 54 .text._ZplRK15StringSumHelperRK6String 0000002c  00000000  00000000  00006d22  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 55 .text._ZN6String4copyEPKcj 00000042  00000000  00000000  00006d4e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 56 .text._ZN6StringC1EPKc 00000034  00000000  00000000  00006d90  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 57 .text._ZN6StringC2EPKc 00000034  00000000  00000000  00006dc4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 58 .text._ZN6StringaSEPKc 00000032  00000000  00000000  00006df8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 59 .text._ZN6StringC1Emh 00000064  00000000  00000000  00006e2a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 60 .text._ZN6StringC2Emh 00000064  00000000  00000000  00006e8e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 61 .text._ZN6StringC1Elh 00000064  00000000  00000000  00006ef2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 62 .text._ZN6StringC2Elh 00000064  00000000  00000000  00006f56  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 63 .text._ZN6StringC1Ejh 00000062  00000000  00000000  00006fba  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 64 .text._ZN6StringC2Ejh 00000062  00000000  00000000  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 65 .text._ZN6StringC1Eih 00000062  00000000  00000000  0000707e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 66 .text._ZN6StringC2Eih 00000062  00000000  00000000  000070e0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 67 .text._ZN6StringC1Ehh 00000064  00000000  00000000  00007142  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 68 .text._ZN6StringC2Ehh 00000064  00000000  00000000  000071a6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 69 .text._ZN6StringC1Ec 00000032  00000000  00000000  0000720a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 70 .text._ZN6StringC2Ec 00000032  00000000  00000000  0000723c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 71 .text._ZNK6String9substringEjj 0000008e  00000000  00000000  0000726e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 72 .text._ZNK6String9substringEj 00000018  00000000  00000000  000072fc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 73 .text._ZN6StringaSERKS_ 0000002e  00000000  00000000  00007314  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 74 .text._ZN6StringC1ERKS_ 00000016  00000000  00000000  00007342  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 75 .text._ZN6StringC2ERKS_ 00000016  00000000  00000000  00007358  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 76 .text._ZN6StringD1Ev 0000000c  00000000  00000000  0000736e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 77 .text._ZN6StringD2Ev 0000000c  00000000  00000000  0000737a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 78 .bss._ZZN6StringixEjE19dummy_writable_char 00000001  00000000  00000000  00007386  2**0
                  ALLOC
Disassembly of section .text._ZNK6String6charAtEj:

00000000 <_ZNK6String6charAtEj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	fc 01       	movw	r30, r24
{
	free(buffer);
   2:	84 81       	ldd	r24, Z+4	; 0x04
   4:	95 81       	ldd	r25, Z+5	; 0x05
   6:	68 17       	cp	r22, r24
   8:	79 07       	cpc	r23, r25
}
   a:	00 f4       	brcc	.+0      	; 0xc <_ZNK6String6charAtEj+0xc>
   c:	01 90       	ld	r0, Z+
   e:	f0 81       	ld	r31, Z
  10:	e0 2d       	mov	r30, r0
  12:	30 97       	sbiw	r30, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZNK6String6charAtEj+0x16>
  16:	e6 0f       	add	r30, r22
  18:	f7 1f       	adc	r31, r23
  1a:	80 81       	ld	r24, Z
  1c:	08 95       	ret
  1e:	80 e0       	ldi	r24, 0x00	; 0
  20:	08 95       	ret
Disassembly of section .text._ZN6String9setCharAtEjc:

00000000 <_ZN6String9setCharAtEjc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	fc 01       	movw	r30, r24
{
	free(buffer);
   2:	84 81       	ldd	r24, Z+4	; 0x04
   4:	95 81       	ldd	r25, Z+5	; 0x05
   6:	68 17       	cp	r22, r24
   8:	79 07       	cpc	r23, r25
}
   a:	00 f4       	brcc	.+0      	; 0xc <_ZN6String9setCharAtEjc+0xc>
   c:	01 90       	ld	r0, Z+
   e:	f0 81       	ld	r31, Z
  10:	e0 2d       	mov	r30, r0
  12:	e6 0f       	add	r30, r22
  14:	f7 1f       	adc	r31, r23
  16:	40 83       	st	Z, r20
  18:	08 95       	ret
Disassembly of section .text._ZN6StringixEj:

00000000 <_ZN6StringixEj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	fc 01       	movw	r30, r24
{
	free(buffer);
   2:	9b 01       	movw	r18, r22
   4:	84 81       	ldd	r24, Z+4	; 0x04
   6:	95 81       	ldd	r25, Z+5	; 0x05
   8:	68 17       	cp	r22, r24
}
   a:	79 07       	cpc	r23, r25
   c:	00 f4       	brcc	.+0      	; 0xe <_ZN6StringixEj+0xe>
   e:	60 81       	ld	r22, Z
  10:	71 81       	ldd	r23, Z+1	; 0x01
  12:	61 15       	cp	r22, r1
  14:	71 05       	cpc	r23, r1
  16:	01 f4       	brne	.+0      	; 0x18 <_ZN6StringixEj+0x18>
  18:	10 92 00 00 	sts	0x0000, r1
  1c:	60 e0       	ldi	r22, 0x00	; 0
  1e:	70 e0       	ldi	r23, 0x00	; 0
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN6StringixEj+0x22>
  22:	62 0f       	add	r22, r18
  24:	73 1f       	adc	r23, r19
  26:	cb 01       	movw	r24, r22
  28:	08 95       	ret
Disassembly of section .text._ZNK6StringixEj:

00000000 <_ZNK6StringixEj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	fc 01       	movw	r30, r24
{
	free(buffer);
   2:	84 81       	ldd	r24, Z+4	; 0x04
   4:	95 81       	ldd	r25, Z+5	; 0x05
   6:	68 17       	cp	r22, r24
   8:	79 07       	cpc	r23, r25
}
   a:	00 f4       	brcc	.+0      	; 0xc <_ZNK6StringixEj+0xc>
   c:	01 90       	ld	r0, Z+
   e:	f0 81       	ld	r31, Z
  10:	e0 2d       	mov	r30, r0
  12:	30 97       	sbiw	r30, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZNK6StringixEj+0x16>
  16:	e6 0f       	add	r30, r22
  18:	f7 1f       	adc	r31, r23
  1a:	80 81       	ld	r24, Z
  1c:	08 95       	ret
  1e:	80 e0       	ldi	r24, 0x00	; 0
  20:	08 95       	ret
Disassembly of section .text._ZN6String7replaceEcc:

00000000 <_ZN6String7replaceEcc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	fc 01       	movw	r30, r24
{
	free(buffer);
   2:	01 90       	ld	r0, Z+
   4:	f0 81       	ld	r31, Z
   6:	e0 2d       	mov	r30, r0
   8:	30 97       	sbiw	r30, 0x00	; 0
}
   a:	01 f4       	brne	.+0      	; 0xc <_ZN6String7replaceEcc+0xc>
   c:	08 95       	ret
   e:	86 17       	cp	r24, r22
  10:	01 f4       	brne	.+0      	; 0x12 <_ZN6String7replaceEcc+0x12>
  12:	40 83       	st	Z, r20
  14:	31 96       	adiw	r30, 0x01	; 1
  16:	80 81       	ld	r24, Z
  18:	88 23       	and	r24, r24
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN6String7replaceEcc+0x1c>
  1c:	08 95       	ret
Disassembly of section .text._ZNK6String5toIntEv:

00000000 <_ZNK6String5toIntEv>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	fc 01       	movw	r30, r24
{
	free(buffer);
   2:	80 81       	ld	r24, Z
   4:	91 81       	ldd	r25, Z+1	; 0x01
   6:	00 97       	sbiw	r24, 0x00	; 0
   8:	01 f4       	brne	.+0      	; 0xa <_ZNK6String5toIntEv+0xa>
}
   a:	20 e0       	ldi	r18, 0x00	; 0
   c:	30 e0       	ldi	r19, 0x00	; 0
   e:	40 e0       	ldi	r20, 0x00	; 0
  10:	50 e0       	ldi	r21, 0x00	; 0
  12:	00 c0       	rjmp	.+0      	; 0x14 <_ZNK6String5toIntEv+0x14>
  14:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String5toIntEv>
  18:	9b 01       	movw	r18, r22
  1a:	ac 01       	movw	r20, r24
  1c:	b9 01       	movw	r22, r18
  1e:	ca 01       	movw	r24, r20
  20:	08 95       	ret
Disassembly of section .text._ZN6String4trimEv:

00000000 <_ZN6String4trimEv>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	cf 92       	push	r12
{
	free(buffer);
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
}
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	6c 01       	movw	r12, r24
  12:	dc 01       	movw	r26, r24
  14:	ed 90       	ld	r14, X+
  16:	fc 90       	ld	r15, X
  18:	11 97       	sbiw	r26, 0x01	; 1
  1a:	e1 14       	cp	r14, r1
  1c:	f1 04       	cpc	r15, r1
  1e:	01 f4       	brne	.+0      	; 0x20 <_ZN6String4trimEv+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN6String4trimEv+0x22>
  22:	14 96       	adiw	r26, 0x04	; 4
  24:	cd 91       	ld	r28, X+
  26:	dc 91       	ld	r29, X
  28:	15 97       	sbiw	r26, 0x05	; 5
  2a:	20 97       	sbiw	r28, 0x00	; 0
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN6String4trimEv+0x2e>
  2e:	87 01       	movw	r16, r14
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZN6String4trimEv+0x32>
  32:	0f 5f       	subi	r16, 0xFF	; 255
  34:	1f 4f       	sbci	r17, 0xFF	; 255
  36:	f8 01       	movw	r30, r16
  38:	80 81       	ld	r24, Z
  3a:	99 27       	eor	r25, r25
  3c:	87 fd       	sbrc	r24, 7
  3e:	90 95       	com	r25
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
  44:	89 2b       	or	r24, r25
  46:	01 f4       	brne	.+0      	; 0x48 <_ZN6String4trimEv+0x48>
  48:	21 97       	sbiw	r28, 0x01	; 1
  4a:	ce 0d       	add	r28, r14
  4c:	df 1d       	adc	r29, r15
  4e:	00 c0       	rjmp	.+0      	; 0x50 <_ZN6String4trimEv+0x50>
  50:	21 97       	sbiw	r28, 0x01	; 1
  52:	88 81       	ld	r24, Y
  54:	99 27       	eor	r25, r25
  56:	87 fd       	sbrc	r24, 7
  58:	90 95       	com	r25
  5a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
  5e:	89 2b       	or	r24, r25
  60:	01 f0       	breq	.+0      	; 0x62 <_ZN6String4trimEv+0x62>
  62:	c0 17       	cp	r28, r16
  64:	d1 07       	cpc	r29, r17
  66:	00 f4       	brcc	.+0      	; 0x68 <_ZN6String4trimEv+0x68>
  68:	fe 01       	movw	r30, r28
  6a:	31 96       	adiw	r30, 0x01	; 1
  6c:	e0 1b       	sub	r30, r16
  6e:	f1 0b       	sbc	r31, r17
  70:	d6 01       	movw	r26, r12
  72:	15 96       	adiw	r26, 0x05	; 5
  74:	fc 93       	st	X, r31
  76:	ee 93       	st	-X, r30
  78:	14 97       	sbiw	r26, 0x04	; 4
  7a:	2d 91       	ld	r18, X+
  7c:	3c 91       	ld	r19, X
  7e:	20 17       	cp	r18, r16
  80:	31 07       	cpc	r19, r17
  82:	00 f4       	brcc	.+0      	; 0x84 <_ZN6String4trimEv+0x84>
  84:	c9 01       	movw	r24, r18
  86:	b8 01       	movw	r22, r16
  88:	af 01       	movw	r20, r30
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
  8e:	d6 01       	movw	r26, r12
  90:	ed 91       	ld	r30, X+
  92:	fc 91       	ld	r31, X
  94:	11 97       	sbiw	r26, 0x01	; 1
  96:	14 96       	adiw	r26, 0x04	; 4
  98:	8d 91       	ld	r24, X+
  9a:	9c 91       	ld	r25, X
  9c:	15 97       	sbiw	r26, 0x05	; 5
  9e:	e8 0f       	add	r30, r24
  a0:	f9 1f       	adc	r31, r25
  a2:	10 82       	st	Z, r1
  a4:	df 91       	pop	r29
  a6:	cf 91       	pop	r28
  a8:	1f 91       	pop	r17
  aa:	0f 91       	pop	r16
  ac:	ff 90       	pop	r15
  ae:	ef 90       	pop	r14
  b0:	df 90       	pop	r13
  b2:	cf 90       	pop	r12
  b4:	08 95       	ret
Disassembly of section .text._ZN6String11toUpperCaseEv:

00000000 <_ZN6String11toUpperCaseEv>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	cf 93       	push	r28
{
	free(buffer);
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	c0 81       	ld	r28, Z
   8:	d1 81       	ldd	r29, Z+1	; 0x01
}
   a:	20 97       	sbiw	r28, 0x00	; 0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6String11toUpperCaseEv+0xe>
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZN6String11toUpperCaseEv+0x10>
  10:	99 27       	eor	r25, r25
  12:	87 fd       	sbrc	r24, 7
  14:	90 95       	com	r25
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6String11toUpperCaseEv>
  1a:	89 93       	st	Y+, r24
  1c:	88 81       	ld	r24, Y
  1e:	88 23       	and	r24, r24
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN6String11toUpperCaseEv+0x22>
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	08 95       	ret
Disassembly of section .text._ZN6String11toLowerCaseEv:

00000000 <_ZN6String11toLowerCaseEv>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	cf 93       	push	r28
{
	free(buffer);
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	c0 81       	ld	r28, Z
   8:	d1 81       	ldd	r29, Z+1	; 0x01
}
   a:	20 97       	sbiw	r28, 0x00	; 0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6String11toLowerCaseEv+0xe>
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZN6String11toLowerCaseEv+0x10>
  10:	99 27       	eor	r25, r25
  12:	87 fd       	sbrc	r24, 7
  14:	90 95       	com	r25
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6String11toLowerCaseEv>
  1a:	89 93       	st	Y+, r24
  1c:	88 81       	ld	r24, Y
  1e:	88 23       	and	r24, r24
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN6String11toLowerCaseEv+0x22>
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	08 95       	ret
Disassembly of section .text._ZNK6String16equalsIgnoreCaseERKS_:

00000000 <_ZNK6String16equalsIgnoreCaseERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	ef 92       	push	r14
{
	free(buffer);
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
}
   a:	df 93       	push	r29
   c:	fc 01       	movw	r30, r24
   e:	db 01       	movw	r26, r22
  10:	86 17       	cp	r24, r22
  12:	97 07       	cpc	r25, r23
  14:	01 f0       	breq	.+0      	; 0x16 <_ZNK6String16equalsIgnoreCaseERKS_+0x16>
  16:	24 81       	ldd	r18, Z+4	; 0x04
  18:	35 81       	ldd	r19, Z+5	; 0x05
  1a:	14 96       	adiw	r26, 0x04	; 4
  1c:	8d 91       	ld	r24, X+
  1e:	9c 91       	ld	r25, X
  20:	15 97       	sbiw	r26, 0x05	; 5
  22:	28 17       	cp	r18, r24
  24:	39 07       	cpc	r19, r25
  26:	01 f4       	brne	.+0      	; 0x28 <_ZNK6String16equalsIgnoreCaseERKS_+0x28>
  28:	23 2b       	or	r18, r19
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZNK6String16equalsIgnoreCaseERKS_+0x2c>
  2c:	e0 80       	ld	r14, Z
  2e:	f1 80       	ldd	r15, Z+1	; 0x01
  30:	cd 91       	ld	r28, X+
  32:	dc 91       	ld	r29, X
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZNK6String16equalsIgnoreCaseERKS_+0x36>
  36:	99 27       	eor	r25, r25
  38:	87 fd       	sbrc	r24, 7
  3a:	90 95       	com	r25
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String16equalsIgnoreCaseERKS_>
  40:	8c 01       	movw	r16, r24
  42:	88 81       	ld	r24, Y
  44:	99 27       	eor	r25, r25
  46:	87 fd       	sbrc	r24, 7
  48:	90 95       	com	r25
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String16equalsIgnoreCaseERKS_>
  4e:	08 17       	cp	r16, r24
  50:	19 07       	cpc	r17, r25
  52:	01 f4       	brne	.+0      	; 0x54 <_ZNK6String16equalsIgnoreCaseERKS_+0x54>
  54:	08 94       	sec
  56:	e1 1c       	adc	r14, r1
  58:	f1 1c       	adc	r15, r1
  5a:	21 96       	adiw	r28, 0x01	; 1
  5c:	f7 01       	movw	r30, r14
  5e:	80 81       	ld	r24, Z
  60:	88 23       	and	r24, r24
  62:	01 f4       	brne	.+0      	; 0x64 <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
  64:	81 e0       	ldi	r24, 0x01	; 1
  66:	00 c0       	rjmp	.+0      	; 0x68 <_ZNK6String16equalsIgnoreCaseERKS_+0x68>
  68:	80 e0       	ldi	r24, 0x00	; 0
  6a:	df 91       	pop	r29
  6c:	cf 91       	pop	r28
  6e:	1f 91       	pop	r17
  70:	0f 91       	pop	r16
  72:	ff 90       	pop	r15
  74:	ef 90       	pop	r14
  76:	08 95       	ret
Disassembly of section .text._ZNK6String11lastIndexOfERKS_j:

00000000 <_ZNK6String11lastIndexOfERKS_j>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	af 92       	push	r10
{
	free(buffer);
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
}
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	fc 01       	movw	r30, r24
  16:	5b 01       	movw	r10, r22
  18:	7a 01       	movw	r14, r20
  1a:	db 01       	movw	r26, r22
  1c:	14 96       	adiw	r26, 0x04	; 4
  1e:	2d 91       	ld	r18, X+
  20:	3c 91       	ld	r19, X
  22:	15 97       	sbiw	r26, 0x05	; 5
  24:	21 15       	cp	r18, r1
  26:	31 05       	cpc	r19, r1
  28:	01 f0       	breq	.+0      	; 0x2a <_ZNK6String11lastIndexOfERKS_j+0x2a>
  2a:	84 81       	ldd	r24, Z+4	; 0x04
  2c:	95 81       	ldd	r25, Z+5	; 0x05
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <_ZNK6String11lastIndexOfERKS_j+0x32>
  32:	82 17       	cp	r24, r18
  34:	93 07       	cpc	r25, r19
  36:	00 f0       	brcs	.+0      	; 0x38 <_ZNK6String11lastIndexOfERKS_j+0x38>
  38:	48 17       	cp	r20, r24
  3a:	59 07       	cpc	r21, r25
  3c:	00 f0       	brcs	.+0      	; 0x3e <_ZNK6String11lastIndexOfERKS_j+0x3e>
  3e:	7c 01       	movw	r14, r24
  40:	08 94       	sec
  42:	e1 08       	sbc	r14, r1
  44:	f1 08       	sbc	r15, r1
  46:	00 81       	ld	r16, Z
  48:	11 81       	ldd	r17, Z+1	; 0x01
  4a:	c8 01       	movw	r24, r16
  4c:	cf ef       	ldi	r28, 0xFF	; 255
  4e:	df ef       	ldi	r29, 0xFF	; 255
  50:	68 01       	movw	r12, r16
  52:	ce 0c       	add	r12, r14
  54:	df 1c       	adc	r13, r15
  56:	00 c0       	rjmp	.+0      	; 0x58 <_ZNK6String11lastIndexOfERKS_j+0x58>
  58:	f5 01       	movw	r30, r10
  5a:	60 81       	ld	r22, Z
  5c:	71 81       	ldd	r23, Z+1	; 0x01
  5e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfERKS_j>
  62:	9c 01       	movw	r18, r24
  64:	00 97       	sbiw	r24, 0x00	; 0
  66:	01 f0       	breq	.+0      	; 0x68 <_ZNK6String11lastIndexOfERKS_j+0x68>
  68:	80 1b       	sub	r24, r16
  6a:	91 0b       	sbc	r25, r17
  6c:	e8 16       	cp	r14, r24
  6e:	f9 06       	cpc	r15, r25
  70:	00 f0       	brcs	.+0      	; 0x72 <_ZNK6String11lastIndexOfERKS_j+0x72>
  72:	ec 01       	movw	r28, r24
  74:	c9 01       	movw	r24, r18
  76:	01 96       	adiw	r24, 0x01	; 1
  78:	c8 16       	cp	r12, r24
  7a:	d9 06       	cpc	r13, r25
  7c:	00 f4       	brcc	.+0      	; 0x7e <_ZNK6String11lastIndexOfERKS_j+0x7e>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <_ZNK6String11lastIndexOfERKS_j+0x80>
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	df ef       	ldi	r29, 0xFF	; 255
  84:	ce 01       	movw	r24, r28
  86:	df 91       	pop	r29
  88:	cf 91       	pop	r28
  8a:	1f 91       	pop	r17
  8c:	0f 91       	pop	r16
  8e:	ff 90       	pop	r15
  90:	ef 90       	pop	r14
  92:	df 90       	pop	r13
  94:	cf 90       	pop	r12
  96:	bf 90       	pop	r11
  98:	af 90       	pop	r10
  9a:	08 95       	ret
Disassembly of section .text._ZNK6String11lastIndexOfERKS_:

00000000 <_ZNK6String11lastIndexOfERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	fc 01       	movw	r30, r24
{
	free(buffer);
   2:	db 01       	movw	r26, r22
   4:	44 81       	ldd	r20, Z+4	; 0x04
   6:	55 81       	ldd	r21, Z+5	; 0x05
   8:	14 96       	adiw	r26, 0x04	; 4
}
   a:	8d 91       	ld	r24, X+
   c:	9c 91       	ld	r25, X
   e:	15 97       	sbiw	r26, 0x05	; 5
  10:	48 1b       	sub	r20, r24
  12:	59 0b       	sbc	r21, r25
  14:	cf 01       	movw	r24, r30
  16:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfERKS_>
  1a:	08 95       	ret
Disassembly of section .text._ZNK6String7indexOfERKS_j:

00000000 <_ZNK6String7indexOfERKS_j>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	cf 93       	push	r28
{
	free(buffer);
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	db 01       	movw	r26, r22
   8:	84 81       	ldd	r24, Z+4	; 0x04
}
   a:	95 81       	ldd	r25, Z+5	; 0x05
   c:	48 17       	cp	r20, r24
   e:	59 07       	cpc	r21, r25
  10:	00 f4       	brcc	.+0      	; 0x12 <_ZNK6String7indexOfERKS_j+0x12>
  12:	c0 81       	ld	r28, Z
  14:	d1 81       	ldd	r29, Z+1	; 0x01
  16:	6d 91       	ld	r22, X+
  18:	7c 91       	ld	r23, X
  1a:	ce 01       	movw	r24, r28
  1c:	84 0f       	add	r24, r20
  1e:	95 1f       	adc	r25, r21
  20:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfERKS_j>
  24:	9c 01       	movw	r18, r24
  26:	00 97       	sbiw	r24, 0x00	; 0
  28:	01 f4       	brne	.+0      	; 0x2a <_ZNK6String7indexOfERKS_j+0x2a>
  2a:	2f ef       	ldi	r18, 0xFF	; 255
  2c:	3f ef       	ldi	r19, 0xFF	; 255
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZNK6String7indexOfERKS_j+0x30>
  30:	2c 1b       	sub	r18, r28
  32:	3d 0b       	sbc	r19, r29
  34:	c9 01       	movw	r24, r18
  36:	df 91       	pop	r29
  38:	cf 91       	pop	r28
  3a:	08 95       	ret
Disassembly of section .text._ZNK6String7indexOfERKS_:

00000000 <_ZNK6String7indexOfERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	40 e0       	ldi	r20, 0x00	; 0
{
	free(buffer);
   2:	50 e0       	ldi	r21, 0x00	; 0
   4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfERKS_>
   8:	08 95       	ret
Disassembly of section .text._ZNK6String11lastIndexOfEcj:

00000000 <_ZNK6String11lastIndexOfEcj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 92       	push	r13
{
	free(buffer);
   2:	ef 92       	push	r14
   4:	ff 92       	push	r15
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
}
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	ec 01       	movw	r28, r24
  10:	8c 81       	ldd	r24, Y+4	; 0x04
  12:	9d 81       	ldd	r25, Y+5	; 0x05
  14:	48 17       	cp	r20, r24
  16:	59 07       	cpc	r21, r25
  18:	00 f4       	brcc	.+0      	; 0x1a <_ZNK6String11lastIndexOfEcj+0x1a>
  1a:	7a 01       	movw	r14, r20
  1c:	08 94       	sec
  1e:	e1 1c       	adc	r14, r1
  20:	f1 1c       	adc	r15, r1
  22:	e8 81       	ld	r30, Y
  24:	f9 81       	ldd	r31, Y+1	; 0x01
  26:	ee 0d       	add	r30, r14
  28:	ff 1d       	adc	r31, r15
  2a:	d0 80       	ld	r13, Z
  2c:	10 82       	st	Z, r1
  2e:	08 81       	ld	r16, Y
  30:	19 81       	ldd	r17, Y+1	; 0x01
  32:	77 27       	eor	r23, r23
  34:	67 fd       	sbrc	r22, 7
  36:	70 95       	com	r23
  38:	c8 01       	movw	r24, r16
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfEcj>
  3e:	9c 01       	movw	r18, r24
  40:	0e 0d       	add	r16, r14
  42:	1f 1d       	adc	r17, r15
  44:	f8 01       	movw	r30, r16
  46:	d0 82       	st	Z, r13
  48:	00 97       	sbiw	r24, 0x00	; 0
  4a:	01 f4       	brne	.+0      	; 0x4c <_ZNK6String11lastIndexOfEcj+0x4c>
  4c:	ef ef       	ldi	r30, 0xFF	; 255
  4e:	ff ef       	ldi	r31, 0xFF	; 255
  50:	00 c0       	rjmp	.+0      	; 0x52 <_ZNK6String11lastIndexOfEcj+0x52>
  52:	88 81       	ld	r24, Y
  54:	99 81       	ldd	r25, Y+1	; 0x01
  56:	f9 01       	movw	r30, r18
  58:	e8 1b       	sub	r30, r24
  5a:	f9 0b       	sbc	r31, r25
  5c:	cf 01       	movw	r24, r30
  5e:	df 91       	pop	r29
  60:	cf 91       	pop	r28
  62:	1f 91       	pop	r17
  64:	0f 91       	pop	r16
  66:	ff 90       	pop	r15
  68:	ef 90       	pop	r14
  6a:	df 90       	pop	r13
  6c:	08 95       	ret
Disassembly of section .text._ZNK6String11lastIndexOfEc:

00000000 <_ZNK6String11lastIndexOfEc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	fc 01       	movw	r30, r24
{
	free(buffer);
   2:	44 81       	ldd	r20, Z+4	; 0x04
   4:	55 81       	ldd	r21, Z+5	; 0x05
   6:	41 50       	subi	r20, 0x01	; 1
   8:	50 40       	sbci	r21, 0x00	; 0
}
   a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfEc>
   e:	08 95       	ret
Disassembly of section .text._ZNK6String7indexOfEcj:

00000000 <_ZNK6String7indexOfEcj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	cf 93       	push	r28
{
	free(buffer);
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	84 81       	ldd	r24, Z+4	; 0x04
   8:	95 81       	ldd	r25, Z+5	; 0x05
}
   a:	48 17       	cp	r20, r24
   c:	59 07       	cpc	r21, r25
   e:	00 f4       	brcc	.+0      	; 0x10 <_ZNK6String7indexOfEcj+0x10>
  10:	c0 81       	ld	r28, Z
  12:	d1 81       	ldd	r29, Z+1	; 0x01
  14:	77 27       	eor	r23, r23
  16:	67 fd       	sbrc	r22, 7
  18:	70 95       	com	r23
  1a:	ce 01       	movw	r24, r28
  1c:	84 0f       	add	r24, r20
  1e:	95 1f       	adc	r25, r21
  20:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfEcj>
  24:	9c 01       	movw	r18, r24
  26:	00 97       	sbiw	r24, 0x00	; 0
  28:	01 f4       	brne	.+0      	; 0x2a <_ZNK6String7indexOfEcj+0x2a>
  2a:	2f ef       	ldi	r18, 0xFF	; 255
  2c:	3f ef       	ldi	r19, 0xFF	; 255
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZNK6String7indexOfEcj+0x30>
  30:	2c 1b       	sub	r18, r28
  32:	3d 0b       	sbc	r19, r29
  34:	c9 01       	movw	r24, r18
  36:	df 91       	pop	r29
  38:	cf 91       	pop	r28
  3a:	08 95       	ret
Disassembly of section .text._ZNK6String7indexOfEc:

00000000 <_ZNK6String7indexOfEc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	40 e0       	ldi	r20, 0x00	; 0
{
	free(buffer);
   2:	50 e0       	ldi	r21, 0x00	; 0
   4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfEc>
   8:	08 95       	ret
Disassembly of section .text._ZNK6String8getBytesEPhjj:

00000000 <_ZNK6String8getBytesEPhjj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	0f 93       	push	r16
{
	free(buffer);
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	fc 01       	movw	r30, r24
}
   a:	8b 01       	movw	r16, r22
   c:	41 15       	cp	r20, r1
   e:	51 05       	cpc	r21, r1
  10:	01 f0       	breq	.+0      	; 0x12 <_ZNK6String8getBytesEPhjj+0x12>
  12:	61 15       	cp	r22, r1
  14:	71 05       	cpc	r23, r1
  16:	01 f0       	breq	.+0      	; 0x18 <_ZNK6String8getBytesEPhjj+0x18>
  18:	84 81       	ldd	r24, Z+4	; 0x04
  1a:	95 81       	ldd	r25, Z+5	; 0x05
  1c:	28 17       	cp	r18, r24
  1e:	39 07       	cpc	r19, r25
  20:	00 f0       	brcs	.+0      	; 0x22 <_ZNK6String8getBytesEPhjj+0x22>
  22:	fb 01       	movw	r30, r22
  24:	10 82       	st	Z, r1
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZNK6String8getBytesEPhjj+0x28>
  28:	41 50       	subi	r20, 0x01	; 1
  2a:	50 40       	sbci	r21, 0x00	; 0
  2c:	ec 01       	movw	r28, r24
  2e:	c2 1b       	sub	r28, r18
  30:	d3 0b       	sbc	r29, r19
  32:	4c 17       	cp	r20, r28
  34:	5d 07       	cpc	r21, r29
  36:	00 f4       	brcc	.+0      	; 0x38 <_ZNK6String8getBytesEPhjj+0x38>
  38:	ea 01       	movw	r28, r20
  3a:	60 81       	ld	r22, Z
  3c:	71 81       	ldd	r23, Z+1	; 0x01
  3e:	62 0f       	add	r22, r18
  40:	73 1f       	adc	r23, r19
  42:	c8 01       	movw	r24, r16
  44:	ae 01       	movw	r20, r28
  46:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String8getBytesEPhjj>
  4a:	c0 0f       	add	r28, r16
  4c:	d1 1f       	adc	r29, r17
  4e:	18 82       	st	Y, r1
  50:	df 91       	pop	r29
  52:	cf 91       	pop	r28
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	08 95       	ret
Disassembly of section .text._ZNK6String8endsWithERKS_:

00000000 <_ZNK6String8endsWithERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	fc 01       	movw	r30, r24
{
	free(buffer);
   2:	db 01       	movw	r26, r22
   4:	24 81       	ldd	r18, Z+4	; 0x04
   6:	35 81       	ldd	r19, Z+5	; 0x05
   8:	14 96       	adiw	r26, 0x04	; 4
}
   a:	4d 91       	ld	r20, X+
   c:	5c 91       	ld	r21, X
   e:	15 97       	sbiw	r26, 0x05	; 5
  10:	24 17       	cp	r18, r20
  12:	35 07       	cpc	r19, r21
  14:	00 f0       	brcs	.+0      	; 0x16 <_ZNK6String8endsWithERKS_+0x16>
  16:	80 81       	ld	r24, Z
  18:	91 81       	ldd	r25, Z+1	; 0x01
  1a:	00 97       	sbiw	r24, 0x00	; 0
  1c:	01 f0       	breq	.+0      	; 0x1e <_ZNK6String8endsWithERKS_+0x1e>
  1e:	6d 91       	ld	r22, X+
  20:	7c 91       	ld	r23, X
  22:	61 15       	cp	r22, r1
  24:	71 05       	cpc	r23, r1
  26:	01 f0       	breq	.+0      	; 0x28 <_ZNK6String8endsWithERKS_+0x28>
  28:	24 1b       	sub	r18, r20
  2a:	35 0b       	sbc	r19, r21
  2c:	82 0f       	add	r24, r18
  2e:	93 1f       	adc	r25, r19
  30:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String8endsWithERKS_>
  34:	9c 01       	movw	r18, r24
  36:	80 e0       	ldi	r24, 0x00	; 0
  38:	23 2b       	or	r18, r19
  3a:	01 f4       	brne	.+0      	; 0x3c <_ZNK6String8endsWithERKS_+0x3c>
  3c:	81 e0       	ldi	r24, 0x01	; 1
  3e:	08 95       	ret
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	08 95       	ret
Disassembly of section .text._ZNK6String6equalsEPKc:

00000000 <_ZNK6String6equalsEPKc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	dc 01       	movw	r26, r24
{
	free(buffer);
   2:	fb 01       	movw	r30, r22
   4:	14 96       	adiw	r26, 0x04	; 4
   6:	8d 91       	ld	r24, X+
   8:	9c 91       	ld	r25, X
}
   a:	15 97       	sbiw	r26, 0x05	; 5
   c:	89 2b       	or	r24, r25
   e:	01 f4       	brne	.+0      	; 0x10 <_ZNK6String6equalsEPKc+0x10>
  10:	61 15       	cp	r22, r1
  12:	71 05       	cpc	r23, r1
  14:	01 f0       	breq	.+0      	; 0x16 <_ZNK6String6equalsEPKc+0x16>
  16:	90 e0       	ldi	r25, 0x00	; 0
  18:	80 81       	ld	r24, Z
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZNK6String6equalsEPKc+0x1c>
  1c:	0d 90       	ld	r0, X+
  1e:	bc 91       	ld	r27, X
  20:	a0 2d       	mov	r26, r0
  22:	61 15       	cp	r22, r1
  24:	71 05       	cpc	r23, r1
  26:	01 f4       	brne	.+0      	; 0x28 <_ZNK6String6equalsEPKc+0x28>
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	8c 91       	ld	r24, X
  2c:	88 23       	and	r24, r24
  2e:	01 f4       	brne	.+0      	; 0x30 <_ZNK6String6equalsEPKc+0x30>
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZNK6String6equalsEPKc+0x32>
  32:	cd 01       	movw	r24, r26
  34:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6equalsEPKc>
  38:	9c 01       	movw	r18, r24
  3a:	90 e0       	ldi	r25, 0x00	; 0
  3c:	23 2b       	or	r18, r19
  3e:	01 f4       	brne	.+0      	; 0x40 <_ZNK6String6equalsEPKc+0x40>
  40:	91 e0       	ldi	r25, 0x01	; 1
  42:	89 2f       	mov	r24, r25
  44:	08 95       	ret
Disassembly of section .text._ZNK6String9compareToERKS_:

00000000 <_ZNK6String9compareToERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	cf 93       	push	r28
{
	free(buffer);
   2:	df 93       	push	r29
   4:	9c 01       	movw	r18, r24
   6:	fb 01       	movw	r30, r22
   8:	ec 01       	movw	r28, r24
}
   a:	a8 81       	ld	r26, Y
   c:	b9 81       	ldd	r27, Y+1	; 0x01
   e:	10 97       	sbiw	r26, 0x00	; 0
  10:	01 f0       	breq	.+0      	; 0x12 <_ZNK6String9compareToERKS_+0x12>
  12:	60 81       	ld	r22, Z
  14:	71 81       	ldd	r23, Z+1	; 0x01
  16:	61 15       	cp	r22, r1
  18:	71 05       	cpc	r23, r1
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZNK6String9compareToERKS_+0x1c>
  1c:	c0 81       	ld	r28, Z
  1e:	d1 81       	ldd	r29, Z+1	; 0x01
  20:	20 97       	sbiw	r28, 0x00	; 0
  22:	01 f0       	breq	.+0      	; 0x24 <_ZNK6String9compareToERKS_+0x24>
  24:	84 81       	ldd	r24, Z+4	; 0x04
  26:	95 81       	ldd	r25, Z+5	; 0x05
  28:	89 2b       	or	r24, r25
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZNK6String9compareToERKS_+0x2c>
  2c:	88 81       	ld	r24, Y
  2e:	90 e0       	ldi	r25, 0x00	; 0
  30:	22 27       	eor	r18, r18
  32:	33 27       	eor	r19, r19
  34:	28 1b       	sub	r18, r24
  36:	39 0b       	sbc	r19, r25
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZNK6String9compareToERKS_+0x3a>
  3a:	10 97       	sbiw	r26, 0x00	; 0
  3c:	01 f0       	breq	.+0      	; 0x3e <_ZNK6String9compareToERKS_+0x3e>
  3e:	f9 01       	movw	r30, r18
  40:	84 81       	ldd	r24, Z+4	; 0x04
  42:	95 81       	ldd	r25, Z+5	; 0x05
  44:	89 2b       	or	r24, r25
  46:	01 f0       	breq	.+0      	; 0x48 <_ZNK6String9compareToERKS_+0x48>
  48:	8c 91       	ld	r24, X
  4a:	28 2f       	mov	r18, r24
  4c:	30 e0       	ldi	r19, 0x00	; 0
  4e:	00 c0       	rjmp	.+0      	; 0x50 <_ZNK6String9compareToERKS_+0x50>
  50:	cd 01       	movw	r24, r26
  52:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9compareToERKS_>
  56:	9c 01       	movw	r18, r24
  58:	00 c0       	rjmp	.+0      	; 0x5a <_ZNK6String9compareToERKS_+0x5a>
  5a:	20 e0       	ldi	r18, 0x00	; 0
  5c:	30 e0       	ldi	r19, 0x00	; 0
  5e:	c9 01       	movw	r24, r18
  60:	df 91       	pop	r29
  62:	cf 91       	pop	r28
  64:	08 95       	ret
Disassembly of section .text._ZNK6StringgeERKS_:

00000000 <_ZNK6StringgeERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringgeERKS_>
{
	free(buffer);
   4:	89 2f       	mov	r24, r25
   6:	80 95       	com	r24
   8:	88 1f       	adc	r24, r24
}
   a:	88 27       	eor	r24, r24
   c:	88 1f       	adc	r24, r24
   e:	08 95       	ret
Disassembly of section .text._ZNK6StringleERKS_:

00000000 <_ZNK6StringleERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringleERKS_>
{
	free(buffer);
   4:	20 e0       	ldi	r18, 0x00	; 0
   6:	18 16       	cp	r1, r24
   8:	19 06       	cpc	r1, r25
}
   a:	04 f0       	brlt	.+0      	; 0xc <_ZNK6StringleERKS_+0xc>
   c:	21 e0       	ldi	r18, 0x01	; 1
   e:	82 2f       	mov	r24, r18
  10:	08 95       	ret
Disassembly of section .text._ZNK6StringgtERKS_:

00000000 <_ZNK6StringgtERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringgtERKS_>
{
	free(buffer);
   4:	20 e0       	ldi	r18, 0x00	; 0
   6:	18 16       	cp	r1, r24
   8:	19 06       	cpc	r1, r25
}
   a:	04 f4       	brge	.+0      	; 0xc <_ZNK6StringgtERKS_+0xc>
   c:	21 e0       	ldi	r18, 0x01	; 1
   e:	82 2f       	mov	r24, r18
  10:	08 95       	ret
Disassembly of section .text._ZNK6StringltERKS_:

00000000 <_ZNK6StringltERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringltERKS_>
{
	free(buffer);
   4:	89 2f       	mov	r24, r25
   6:	88 1f       	adc	r24, r24
   8:	88 27       	eor	r24, r24
}
   a:	88 1f       	adc	r24, r24
   c:	08 95       	ret
Disassembly of section .text._ZNK6String6equalsERKS_:

00000000 <_ZNK6String6equalsERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	fc 01       	movw	r30, r24
{
	free(buffer);
   2:	db 01       	movw	r26, r22
   4:	24 81       	ldd	r18, Z+4	; 0x04
   6:	35 81       	ldd	r19, Z+5	; 0x05
   8:	14 96       	adiw	r26, 0x04	; 4
}
   a:	8d 91       	ld	r24, X+
   c:	9c 91       	ld	r25, X
   e:	15 97       	sbiw	r26, 0x05	; 5
  10:	28 17       	cp	r18, r24
  12:	39 07       	cpc	r19, r25
  14:	01 f0       	breq	.+0      	; 0x16 <_ZNK6String6equalsERKS_+0x16>
  16:	20 e0       	ldi	r18, 0x00	; 0
  18:	00 c0       	rjmp	.+0      	; 0x1a <_ZNK6String6equalsERKS_+0x1a>
  1a:	cf 01       	movw	r24, r30
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6equalsERKS_>
  20:	20 e0       	ldi	r18, 0x00	; 0
  22:	89 2b       	or	r24, r25
  24:	01 f4       	brne	.+0      	; 0x26 <_ZNK6String6equalsERKS_+0x26>
  26:	21 e0       	ldi	r18, 0x01	; 1
  28:	82 2f       	mov	r24, r18
  2a:	08 95       	ret
Disassembly of section .text._ZNK6String10startsWithERKS_j:

00000000 <_ZNK6String10startsWithERKS_j>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	fc 01       	movw	r30, r24
{
	free(buffer);
   2:	db 01       	movw	r26, r22
   4:	14 96       	adiw	r26, 0x04	; 4
   6:	2d 91       	ld	r18, X+
   8:	3c 91       	ld	r19, X
}
   a:	15 97       	sbiw	r26, 0x05	; 5
   c:	84 81       	ldd	r24, Z+4	; 0x04
   e:	95 81       	ldd	r25, Z+5	; 0x05
  10:	82 1b       	sub	r24, r18
  12:	93 0b       	sbc	r25, r19
  14:	84 17       	cp	r24, r20
  16:	95 07       	cpc	r25, r21
  18:	00 f0       	brcs	.+0      	; 0x1a <_ZNK6String10startsWithERKS_j+0x1a>
  1a:	80 81       	ld	r24, Z
  1c:	91 81       	ldd	r25, Z+1	; 0x01
  1e:	00 97       	sbiw	r24, 0x00	; 0
  20:	01 f0       	breq	.+0      	; 0x22 <_ZNK6String10startsWithERKS_j+0x22>
  22:	6d 91       	ld	r22, X+
  24:	7c 91       	ld	r23, X
  26:	61 15       	cp	r22, r1
  28:	71 05       	cpc	r23, r1
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZNK6String10startsWithERKS_j+0x2c>
  2c:	84 0f       	add	r24, r20
  2e:	95 1f       	adc	r25, r21
  30:	a9 01       	movw	r20, r18
  32:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String10startsWithERKS_j>
  36:	9c 01       	movw	r18, r24
  38:	80 e0       	ldi	r24, 0x00	; 0
  3a:	23 2b       	or	r18, r19
  3c:	01 f4       	brne	.+0      	; 0x3e <_ZNK6String10startsWithERKS_j+0x3e>
  3e:	81 e0       	ldi	r24, 0x01	; 1
  40:	08 95       	ret
  42:	80 e0       	ldi	r24, 0x00	; 0
  44:	08 95       	ret
Disassembly of section .text._ZNK6String10startsWithERKS_:

00000000 <_ZNK6String10startsWithERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	fc 01       	movw	r30, r24
{
	free(buffer);
   2:	db 01       	movw	r26, r22
   4:	24 81       	ldd	r18, Z+4	; 0x04
   6:	35 81       	ldd	r19, Z+5	; 0x05
   8:	14 96       	adiw	r26, 0x04	; 4
}
   a:	8d 91       	ld	r24, X+
   c:	9c 91       	ld	r25, X
   e:	15 97       	sbiw	r26, 0x05	; 5
  10:	28 17       	cp	r18, r24
  12:	39 07       	cpc	r19, r25
  14:	00 f4       	brcc	.+0      	; 0x16 <_ZNK6String10startsWithERKS_+0x16>
  16:	80 e0       	ldi	r24, 0x00	; 0
  18:	08 95       	ret
  1a:	cf 01       	movw	r24, r30
  1c:	40 e0       	ldi	r20, 0x00	; 0
  1e:	50 e0       	ldi	r21, 0x00	; 0
  20:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String10startsWithERKS_>
  24:	08 95       	ret
Disassembly of section .text._ZN6String12changeBufferEj:

00000000 <_ZN6String12changeBufferEj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	0f 93       	push	r16
{
	free(buffer);
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
}
   a:	8b 01       	movw	r16, r22
   c:	6f 5f       	subi	r22, 0xFF	; 255
   e:	7f 4f       	sbci	r23, 0xFF	; 255
  10:	88 81       	ld	r24, Y
  12:	99 81       	ldd	r25, Y+1	; 0x01
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN6String12changeBufferEj>
  18:	00 97       	sbiw	r24, 0x00	; 0
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN6String12changeBufferEj+0x1c>
  1c:	80 e0       	ldi	r24, 0x00	; 0
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_ZN6String12changeBufferEj+0x20>
  20:	99 83       	std	Y+1, r25	; 0x01
  22:	88 83       	st	Y, r24
  24:	1b 83       	std	Y+3, r17	; 0x03
  26:	0a 83       	std	Y+2, r16	; 0x02
  28:	81 e0       	ldi	r24, 0x01	; 1
  2a:	df 91       	pop	r29
  2c:	cf 91       	pop	r28
  2e:	1f 91       	pop	r17
  30:	0f 91       	pop	r16
  32:	08 95       	ret
Disassembly of section .text._ZN6String7replaceERKS_S1_:

00000000 <_ZN6String7replaceERKS_S1_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	2f 92       	push	r2
{
	free(buffer);
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
}
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
   e:	9f 92       	push	r9
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	cf 92       	push	r12
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  1e:	1f 93       	push	r17
  20:	cf 93       	push	r28
  22:	df 93       	push	r29
  24:	5c 01       	movw	r10, r24
  26:	2b 01       	movw	r4, r22
  28:	4a 01       	movw	r8, r20
  2a:	dc 01       	movw	r26, r24
  2c:	14 96       	adiw	r26, 0x04	; 4
  2e:	0d 91       	ld	r16, X+
  30:	1c 91       	ld	r17, X
  32:	15 97       	sbiw	r26, 0x05	; 5
  34:	01 15       	cp	r16, r1
  36:	11 05       	cpc	r17, r1
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6String7replaceERKS_S1_+0x3a>
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZN6String7replaceERKS_S1_+0x3c>
  3c:	fb 01       	movw	r30, r22
  3e:	c4 80       	ldd	r12, Z+4	; 0x04
  40:	d5 80       	ldd	r13, Z+5	; 0x05
  42:	c1 14       	cp	r12, r1
  44:	d1 04       	cpc	r13, r1
  46:	01 f4       	brne	.+0      	; 0x48 <_ZN6String7replaceERKS_S1_+0x48>
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN6String7replaceERKS_S1_+0x4a>
  4a:	da 01       	movw	r26, r20
  4c:	14 96       	adiw	r26, 0x04	; 4
  4e:	6d 90       	ld	r6, X+
  50:	7c 90       	ld	r7, X
  52:	15 97       	sbiw	r26, 0x05	; 5
  54:	6c 18       	sub	r6, r12
  56:	7d 08       	sbc	r7, r13
  58:	fc 01       	movw	r30, r24
  5a:	e0 80       	ld	r14, Z
  5c:	f1 80       	ldd	r15, Z+1	; 0x01
  5e:	61 14       	cp	r6, r1
  60:	71 04       	cpc	r7, r1
  62:	01 f0       	breq	.+0      	; 0x64 <_ZN6String7replaceERKS_S1_+0x64>
  64:	00 c0       	rjmp	.+0      	; 0x66 <_ZN6String7replaceERKS_S1_+0x66>
  66:	d4 01       	movw	r26, r8
  68:	6c 91       	ld	r22, X
  6a:	11 96       	adiw	r26, 0x01	; 1
  6c:	7c 91       	ld	r23, X
  6e:	11 97       	sbiw	r26, 0x01	; 1
  70:	14 96       	adiw	r26, 0x04	; 4
  72:	4d 91       	ld	r20, X+
  74:	5c 91       	ld	r21, X
  76:	15 97       	sbiw	r26, 0x05	; 5
  78:	8c 2f       	mov	r24, r28
  7a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  7e:	f4 01       	movw	r30, r8
  80:	e4 80       	ldd	r14, Z+4	; 0x04
  82:	f5 80       	ldd	r15, Z+5	; 0x05
  84:	ec 0e       	add	r14, r28
  86:	fd 1e       	adc	r15, r29
  88:	d2 01       	movw	r26, r4
  8a:	6d 91       	ld	r22, X+
  8c:	7c 91       	ld	r23, X
  8e:	c7 01       	movw	r24, r14
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  94:	ec 01       	movw	r28, r24
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	01 f4       	brne	.+0      	; 0x9a <_ZN6String7replaceERKS_S1_+0x9a>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <_ZN6String7replaceERKS_S1_+0x9c>
  9c:	77 fe       	sbrs	r7, 7
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <_ZN6String7replaceERKS_S1_+0xa0>
  a0:	67 01       	movw	r12, r14
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_ZN6String7replaceERKS_S1_+0xa4>
  a4:	fb 01       	movw	r30, r22
  a6:	20 80       	ld	r2, Z
  a8:	31 80       	ldd	r3, Z+1	; 0x01
  aa:	e8 01       	movw	r28, r16
  ac:	00 c0       	rjmp	.+0      	; 0xae <_ZN6String7replaceERKS_S1_+0xae>
  ae:	8e 01       	movw	r16, r28
  b0:	0e 19       	sub	r16, r14
  b2:	1f 09       	sbc	r17, r15
  b4:	c6 01       	movw	r24, r12
  b6:	b7 01       	movw	r22, r14
  b8:	a8 01       	movw	r20, r16
  ba:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  be:	0c 0d       	add	r16, r12
  c0:	1d 1d       	adc	r17, r13
  c2:	d4 01       	movw	r26, r8
  c4:	6c 91       	ld	r22, X
  c6:	11 96       	adiw	r26, 0x01	; 1
  c8:	7c 91       	ld	r23, X
  ca:	11 97       	sbiw	r26, 0x01	; 1
  cc:	14 96       	adiw	r26, 0x04	; 4
  ce:	4d 91       	ld	r20, X+
  d0:	5c 91       	ld	r21, X
  d2:	15 97       	sbiw	r26, 0x05	; 5
  d4:	c8 01       	movw	r24, r16
  d6:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  da:	f4 01       	movw	r30, r8
  dc:	c4 80       	ldd	r12, Z+4	; 0x04
  de:	d5 80       	ldd	r13, Z+5	; 0x05
  e0:	c0 0e       	add	r12, r16
  e2:	d1 1e       	adc	r13, r17
  e4:	d2 01       	movw	r26, r4
  e6:	14 96       	adiw	r26, 0x04	; 4
  e8:	ed 90       	ld	r14, X+
  ea:	fc 90       	ld	r15, X
  ec:	15 97       	sbiw	r26, 0x05	; 5
  ee:	ec 0e       	add	r14, r28
  f0:	fd 1e       	adc	r15, r29
  f2:	f5 01       	movw	r30, r10
  f4:	84 81       	ldd	r24, Z+4	; 0x04
  f6:	95 81       	ldd	r25, Z+5	; 0x05
  f8:	86 0d       	add	r24, r6
  fa:	97 1d       	adc	r25, r7
  fc:	95 83       	std	Z+5, r25	; 0x05
  fe:	84 83       	std	Z+4, r24	; 0x04
 100:	d2 01       	movw	r26, r4
 102:	6d 91       	ld	r22, X+
 104:	7c 91       	ld	r23, X
 106:	c7 01       	movw	r24, r14
 108:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 10c:	ec 01       	movw	r28, r24
 10e:	00 97       	sbiw	r24, 0x00	; 0
 110:	01 f4       	brne	.+0      	; 0x112 <_ZN6String7replaceERKS_S1_+0x112>
 112:	c6 01       	movw	r24, r12
 114:	b7 01       	movw	r22, r14
 116:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <_ZN6String7replaceERKS_S1_+0x11c>
 11c:	7b 01       	movw	r14, r22
 11e:	ec 0c       	add	r14, r12
 120:	fd 1c       	adc	r15, r13
 122:	c6 0d       	add	r28, r6
 124:	d7 1d       	adc	r29, r7
 126:	c7 01       	movw	r24, r14
 128:	b1 01       	movw	r22, r2
 12a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 12e:	bc 01       	movw	r22, r24
 130:	00 97       	sbiw	r24, 0x00	; 0
 132:	01 f4       	brne	.+0      	; 0x134 <_ZN6String7replaceERKS_S1_+0x134>
 134:	c0 17       	cp	r28, r16
 136:	d1 07       	cpc	r29, r17
 138:	01 f4       	brne	.+0      	; 0x13a <_ZN6String7replaceERKS_S1_+0x13a>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <_ZN6String7replaceERKS_S1_+0x13c>
 13c:	f5 01       	movw	r30, r10
 13e:	82 81       	ldd	r24, Z+2	; 0x02
 140:	93 81       	ldd	r25, Z+3	; 0x03
 142:	8c 17       	cp	r24, r28
 144:	9d 07       	cpc	r25, r29
 146:	00 f0       	brcs	.+0      	; 0x148 <_ZN6String7replaceERKS_S1_+0x148>
 148:	00 c0       	rjmp	.+0      	; 0x14a <_ZN6String7replaceERKS_S1_+0x14a>
 14a:	c5 01       	movw	r24, r10
 14c:	be 01       	movw	r22, r28
 14e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 152:	88 23       	and	r24, r24
 154:	01 f4       	brne	.+0      	; 0x156 <_ZN6String7replaceERKS_S1_+0x156>
 156:	00 c0       	rjmp	.+0      	; 0x158 <_ZN6String7replaceERKS_S1_+0x158>
 158:	c5 01       	movw	r24, r10
 15a:	b2 01       	movw	r22, r4
 15c:	a9 01       	movw	r20, r18
 15e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 162:	ec 01       	movw	r28, r24
 164:	97 fd       	sbrc	r25, 7
 166:	00 c0       	rjmp	.+0      	; 0x168 <_ZN6String7replaceERKS_S1_+0x168>
 168:	d5 01       	movw	r26, r10
 16a:	6d 91       	ld	r22, X+
 16c:	7c 91       	ld	r23, X
 16e:	11 97       	sbiw	r26, 0x01	; 1
 170:	f2 01       	movw	r30, r4
 172:	84 81       	ldd	r24, Z+4	; 0x04
 174:	95 81       	ldd	r25, Z+5	; 0x05
 176:	8c 0f       	add	r24, r28
 178:	9d 1f       	adc	r25, r29
 17a:	68 0f       	add	r22, r24
 17c:	79 1f       	adc	r23, r25
 17e:	14 96       	adiw	r26, 0x04	; 4
 180:	4d 91       	ld	r20, X+
 182:	5c 91       	ld	r21, X
 184:	15 97       	sbiw	r26, 0x05	; 5
 186:	48 1b       	sub	r20, r24
 188:	59 0b       	sbc	r21, r25
 18a:	cb 01       	movw	r24, r22
 18c:	86 0d       	add	r24, r6
 18e:	97 1d       	adc	r25, r7
 190:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 194:	d5 01       	movw	r26, r10
 196:	14 96       	adiw	r26, 0x04	; 4
 198:	8d 91       	ld	r24, X+
 19a:	9c 91       	ld	r25, X
 19c:	15 97       	sbiw	r26, 0x05	; 5
 19e:	86 0d       	add	r24, r6
 1a0:	97 1d       	adc	r25, r7
 1a2:	15 96       	adiw	r26, 0x05	; 5
 1a4:	9c 93       	st	X, r25
 1a6:	8e 93       	st	-X, r24
 1a8:	14 97       	sbiw	r26, 0x04	; 4
 1aa:	ed 91       	ld	r30, X+
 1ac:	fc 91       	ld	r31, X
 1ae:	11 97       	sbiw	r26, 0x01	; 1
 1b0:	e8 0f       	add	r30, r24
 1b2:	f9 1f       	adc	r31, r25
 1b4:	10 82       	st	Z, r1
 1b6:	2d 91       	ld	r18, X+
 1b8:	3c 91       	ld	r19, X
 1ba:	2c 0f       	add	r18, r28
 1bc:	3d 1f       	adc	r19, r29
 1be:	f4 01       	movw	r30, r8
 1c0:	60 81       	ld	r22, Z
 1c2:	71 81       	ldd	r23, Z+1	; 0x01
 1c4:	44 81       	ldd	r20, Z+4	; 0x04
 1c6:	55 81       	ldd	r21, Z+5	; 0x05
 1c8:	c9 01       	movw	r24, r18
 1ca:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 1ce:	9e 01       	movw	r18, r28
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <_ZN6String7replaceERKS_S1_+0x1d2>
 1d2:	d5 01       	movw	r26, r10
 1d4:	14 96       	adiw	r26, 0x04	; 4
 1d6:	2d 91       	ld	r18, X+
 1d8:	3c 91       	ld	r19, X
 1da:	15 97       	sbiw	r26, 0x05	; 5
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	30 40       	sbci	r19, 0x00	; 0
 1e0:	37 ff       	sbrs	r19, 7
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <_ZN6String7replaceERKS_S1_+0x1e4>
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	1f 91       	pop	r17
 1ea:	0f 91       	pop	r16
 1ec:	ff 90       	pop	r15
 1ee:	ef 90       	pop	r14
 1f0:	df 90       	pop	r13
 1f2:	cf 90       	pop	r12
 1f4:	bf 90       	pop	r11
 1f6:	af 90       	pop	r10
 1f8:	9f 90       	pop	r9
 1fa:	8f 90       	pop	r8
 1fc:	7f 90       	pop	r7
 1fe:	6f 90       	pop	r6
 200:	5f 90       	pop	r5
 202:	4f 90       	pop	r4
 204:	3f 90       	pop	r3
 206:	2f 90       	pop	r2
 208:	08 95       	ret
Disassembly of section .text._ZN6String7reserveEj:

00000000 <_ZN6String7reserveEj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	cf 93       	push	r28
{
	free(buffer);
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	88 81       	ld	r24, Y
   8:	99 81       	ldd	r25, Y+1	; 0x01
}
   a:	89 2b       	or	r24, r25
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6String7reserveEj+0xe>
   e:	8a 81       	ldd	r24, Y+2	; 0x02
  10:	9b 81       	ldd	r25, Y+3	; 0x03
  12:	86 17       	cp	r24, r22
  14:	97 07       	cpc	r25, r23
  16:	00 f4       	brcc	.+0      	; 0x18 <_ZN6String7reserveEj+0x18>
  18:	ce 01       	movw	r24, r28
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7reserveEj>
  1e:	88 23       	and	r24, r24
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN6String7reserveEj+0x22>
  22:	8c 81       	ldd	r24, Y+4	; 0x04
  24:	9d 81       	ldd	r25, Y+5	; 0x05
  26:	89 2b       	or	r24, r25
  28:	01 f4       	brne	.+0      	; 0x2a <_ZN6String7reserveEj+0x2a>
  2a:	e8 81       	ld	r30, Y
  2c:	f9 81       	ldd	r31, Y+1	; 0x01
  2e:	10 82       	st	Z, r1
  30:	81 e0       	ldi	r24, 0x01	; 1
  32:	df 91       	pop	r29
  34:	cf 91       	pop	r28
  36:	08 95       	ret
Disassembly of section .text._ZN6String6concatEPKcj:

00000000 <_ZN6String6concatEPKcj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	ef 92       	push	r14
{
	free(buffer);
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
}
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	7b 01       	movw	r14, r22
  10:	6c 81       	ldd	r22, Y+4	; 0x04
  12:	7d 81       	ldd	r23, Y+5	; 0x05
  14:	e1 14       	cp	r14, r1
  16:	f1 04       	cpc	r15, r1
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN6String6concatEPKcj+0x1a>
  1a:	41 15       	cp	r20, r1
  1c:	51 05       	cpc	r21, r1
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN6String6concatEPKcj+0x20>
  20:	8a 01       	movw	r16, r20
  22:	06 0f       	add	r16, r22
  24:	17 1f       	adc	r17, r23
  26:	b8 01       	movw	r22, r16
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKcj>
  2c:	88 23       	and	r24, r24
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZN6String6concatEPKcj+0x30>
  30:	88 81       	ld	r24, Y
  32:	99 81       	ldd	r25, Y+1	; 0x01
  34:	2c 81       	ldd	r18, Y+4	; 0x04
  36:	3d 81       	ldd	r19, Y+5	; 0x05
  38:	82 0f       	add	r24, r18
  3a:	93 1f       	adc	r25, r19
  3c:	b7 01       	movw	r22, r14
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKcj>
  42:	1d 83       	std	Y+5, r17	; 0x05
  44:	0c 83       	std	Y+4, r16	; 0x04
  46:	81 e0       	ldi	r24, 0x01	; 1
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN6String6concatEPKcj+0x4a>
  4a:	80 e0       	ldi	r24, 0x00	; 0
  4c:	df 91       	pop	r29
  4e:	cf 91       	pop	r28
  50:	1f 91       	pop	r17
  52:	0f 91       	pop	r16
  54:	ff 90       	pop	r15
  56:	ef 90       	pop	r14
  58:	08 95       	ret
Disassembly of section .text._ZN6String6concatEm:

00000000 <_ZN6String6concatEm>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	ef 92       	push	r14
{
	free(buffer);
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
}
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	2b 97       	sbiw	r28, 0x0b	; 11
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
  20:	ba 01       	movw	r22, r20
  22:	8e 01       	movw	r16, r28
  24:	0f 5f       	subi	r16, 0xFF	; 255
  26:	1f 4f       	sbci	r17, 0xFF	; 255
  28:	a8 01       	movw	r20, r16
  2a:	2a e0       	ldi	r18, 0x0A	; 10
  2c:	30 e0       	ldi	r19, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEm>
  32:	f8 01       	movw	r30, r16
  34:	01 90       	ld	r0, Z+
  36:	00 20       	and	r0, r0
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6String6concatEm+0x3a>
  3a:	31 97       	sbiw	r30, 0x01	; 1
  3c:	e0 1b       	sub	r30, r16
  3e:	f1 0b       	sbc	r31, r17
  40:	c7 01       	movw	r24, r14
  42:	b8 01       	movw	r22, r16
  44:	af 01       	movw	r20, r30
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEm>
  4a:	2b 96       	adiw	r28, 0x0b	; 11
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret
Disassembly of section .text._ZN6String6concatEl:

00000000 <_ZN6String6concatEl>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	ef 92       	push	r14
{
	free(buffer);
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
}
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	2c 97       	sbiw	r28, 0x0c	; 12
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
  20:	ba 01       	movw	r22, r20
  22:	8e 01       	movw	r16, r28
  24:	0f 5f       	subi	r16, 0xFF	; 255
  26:	1f 4f       	sbci	r17, 0xFF	; 255
  28:	a8 01       	movw	r20, r16
  2a:	2a e0       	ldi	r18, 0x0A	; 10
  2c:	30 e0       	ldi	r19, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEl>
  32:	f8 01       	movw	r30, r16
  34:	01 90       	ld	r0, Z+
  36:	00 20       	and	r0, r0
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6String6concatEl+0x3a>
  3a:	31 97       	sbiw	r30, 0x01	; 1
  3c:	e0 1b       	sub	r30, r16
  3e:	f1 0b       	sbc	r31, r17
  40:	c7 01       	movw	r24, r14
  42:	b8 01       	movw	r22, r16
  44:	af 01       	movw	r20, r30
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEl>
  4a:	2c 96       	adiw	r28, 0x0c	; 12
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret
Disassembly of section .text._ZN6String6concatEj:

00000000 <_ZN6String6concatEj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	ef 92       	push	r14
{
	free(buffer);
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
}
   a:	cf 93       	push	r28
   c:	00 d0       	rcall	.+0      	; 0xe <_ZN6String6concatEj+0xe>
   e:	00 d0       	rcall	.+0      	; 0x10 <_ZN6String6concatEj+0x10>
  10:	00 d0       	rcall	.+0      	; 0x12 <_ZN6String6concatEj+0x12>
  12:	cd b7       	in	r28, 0x3d	; 61
  14:	de b7       	in	r29, 0x3e	; 62
  16:	7c 01       	movw	r14, r24
  18:	cb 01       	movw	r24, r22
  1a:	8e 01       	movw	r16, r28
  1c:	0f 5f       	subi	r16, 0xFF	; 255
  1e:	1f 4f       	sbci	r17, 0xFF	; 255
  20:	b8 01       	movw	r22, r16
  22:	4a e0       	ldi	r20, 0x0A	; 10
  24:	50 e0       	ldi	r21, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEj>
  2a:	f8 01       	movw	r30, r16
  2c:	01 90       	ld	r0, Z+
  2e:	00 20       	and	r0, r0
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN6String6concatEj+0x32>
  32:	31 97       	sbiw	r30, 0x01	; 1
  34:	e0 1b       	sub	r30, r16
  36:	f1 0b       	sbc	r31, r17
  38:	c7 01       	movw	r24, r14
  3a:	b8 01       	movw	r22, r16
  3c:	af 01       	movw	r20, r30
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEj>
  42:	26 96       	adiw	r28, 0x06	; 6
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	f8 94       	cli
  48:	de bf       	out	0x3e, r29	; 62
  4a:	0f be       	out	0x3f, r0	; 63
  4c:	cd bf       	out	0x3d, r28	; 61
  4e:	cf 91       	pop	r28
  50:	df 91       	pop	r29
  52:	1f 91       	pop	r17
  54:	0f 91       	pop	r16
  56:	ff 90       	pop	r15
  58:	ef 90       	pop	r14
  5a:	08 95       	ret
Disassembly of section .text._ZN6String6concatEi:

00000000 <_ZN6String6concatEi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	ef 92       	push	r14
{
	free(buffer);
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
}
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	27 97       	sbiw	r28, 0x07	; 7
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
  20:	8e 01       	movw	r16, r28
  22:	0f 5f       	subi	r16, 0xFF	; 255
  24:	1f 4f       	sbci	r17, 0xFF	; 255
  26:	b8 01       	movw	r22, r16
  28:	4a e0       	ldi	r20, 0x0A	; 10
  2a:	50 e0       	ldi	r21, 0x00	; 0
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEi>
  30:	f8 01       	movw	r30, r16
  32:	01 90       	ld	r0, Z+
  34:	00 20       	and	r0, r0
  36:	01 f4       	brne	.+0      	; 0x38 <_ZN6String6concatEi+0x38>
  38:	31 97       	sbiw	r30, 0x01	; 1
  3a:	e0 1b       	sub	r30, r16
  3c:	f1 0b       	sbc	r31, r17
  3e:	c7 01       	movw	r24, r14
  40:	b8 01       	movw	r22, r16
  42:	af 01       	movw	r20, r30
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEi>
  48:	27 96       	adiw	r28, 0x07	; 7
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	cf 91       	pop	r28
  56:	df 91       	pop	r29
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret
Disassembly of section .text._ZN6String6concatEh:

00000000 <_ZN6String6concatEh>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	ef 92       	push	r14
{
	free(buffer);
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
}
   a:	cf 93       	push	r28
   c:	00 d0       	rcall	.+0      	; 0xe <_ZN6String6concatEh+0xe>
   e:	00 d0       	rcall	.+0      	; 0x10 <_ZN6String6concatEh+0x10>
  10:	cd b7       	in	r28, 0x3d	; 61
  12:	de b7       	in	r29, 0x3e	; 62
  14:	7c 01       	movw	r14, r24
  16:	86 2f       	mov	r24, r22
  18:	90 e0       	ldi	r25, 0x00	; 0
  1a:	8e 01       	movw	r16, r28
  1c:	0f 5f       	subi	r16, 0xFF	; 255
  1e:	1f 4f       	sbci	r17, 0xFF	; 255
  20:	b8 01       	movw	r22, r16
  22:	4a e0       	ldi	r20, 0x0A	; 10
  24:	50 e0       	ldi	r21, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEh>
  2a:	f8 01       	movw	r30, r16
  2c:	01 90       	ld	r0, Z+
  2e:	00 20       	and	r0, r0
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN6String6concatEh+0x32>
  32:	31 97       	sbiw	r30, 0x01	; 1
  34:	e0 1b       	sub	r30, r16
  36:	f1 0b       	sbc	r31, r17
  38:	c7 01       	movw	r24, r14
  3a:	b8 01       	movw	r22, r16
  3c:	af 01       	movw	r20, r30
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEh>
  42:	0f 90       	pop	r0
  44:	0f 90       	pop	r0
  46:	0f 90       	pop	r0
  48:	0f 90       	pop	r0
  4a:	cf 91       	pop	r28
  4c:	df 91       	pop	r29
  4e:	1f 91       	pop	r17
  50:	0f 91       	pop	r16
  52:	ff 90       	pop	r15
  54:	ef 90       	pop	r14
  56:	08 95       	ret
Disassembly of section .text._ZN6String6concatEc:

00000000 <_ZN6String6concatEc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
{
	free(buffer);
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6String6concatEc+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
}
   a:	69 83       	std	Y+1, r22	; 0x01
   c:	1a 82       	std	Y+2, r1	; 0x02
   e:	be 01       	movw	r22, r28
  10:	6f 5f       	subi	r22, 0xFF	; 255
  12:	7f 4f       	sbci	r23, 0xFF	; 255
  14:	41 e0       	ldi	r20, 0x01	; 1
  16:	50 e0       	ldi	r21, 0x00	; 0
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEc>
  1c:	0f 90       	pop	r0
  1e:	0f 90       	pop	r0
  20:	cf 91       	pop	r28
  22:	df 91       	pop	r29
  24:	08 95       	ret
Disassembly of section .text._ZN6String6concatEPKc:

00000000 <_ZN6String6concatEPKc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	61 15       	cp	r22, r1
{
	free(buffer);
   2:	71 05       	cpc	r23, r1
   4:	01 f4       	brne	.+0      	; 0x6 <_ZN6String6concatEPKc+0x6>
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	08 95       	ret
}
   a:	db 01       	movw	r26, r22
   c:	0d 90       	ld	r0, X+
   e:	00 20       	and	r0, r0
  10:	01 f4       	brne	.+0      	; 0x12 <_ZN6String6concatEPKc+0x12>
  12:	11 97       	sbiw	r26, 0x01	; 1
  14:	a6 1b       	sub	r26, r22
  16:	b7 0b       	sbc	r27, r23
  18:	ad 01       	movw	r20, r26
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKc>
  1e:	08 95       	ret
Disassembly of section .text._ZN6String6concatERKS_:

00000000 <_ZN6String6concatERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	fb 01       	movw	r30, r22
{
	free(buffer);
   2:	60 81       	ld	r22, Z
   4:	71 81       	ldd	r23, Z+1	; 0x01
   6:	44 81       	ldd	r20, Z+4	; 0x04
   8:	55 81       	ldd	r21, Z+5	; 0x05
}
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatERKS_>
   e:	08 95       	ret
Disassembly of section .text._ZN6String10invalidateEv:

00000000 <_ZN6String10invalidateEv>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	cf 93       	push	r28
{
	free(buffer);
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	88 81       	ld	r24, Y
   8:	99 81       	ldd	r25, Y+1	; 0x01
}
   a:	00 97       	sbiw	r24, 0x00	; 0
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6String10invalidateEv+0xe>
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String10invalidateEv>
  12:	19 82       	std	Y+1, r1	; 0x01
  14:	18 82       	st	Y, r1
  16:	1d 82       	std	Y+5, r1	; 0x05
  18:	1c 82       	std	Y+4, r1	; 0x04
  1a:	1b 82       	std	Y+3, r1	; 0x03
  1c:	1a 82       	std	Y+2, r1	; 0x02
  1e:	df 91       	pop	r29
  20:	cf 91       	pop	r28
  22:	08 95       	ret
Disassembly of section .text._ZplRK15StringSumHelperm:

00000000 <_ZplRK15StringSumHelperm>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	0f 93       	push	r16
{
	free(buffer);
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperm>
}
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperm+0x10>
  10:	81 2f       	mov	r24, r17
  12:	90 2f       	mov	r25, r16
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperm>
  18:	81 2f       	mov	r24, r17
  1a:	90 2f       	mov	r25, r16
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	08 95       	ret
Disassembly of section .text._ZplRK15StringSumHelperl:

00000000 <_ZplRK15StringSumHelperl>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	0f 93       	push	r16
{
	free(buffer);
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperl>
}
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperl+0x10>
  10:	81 2f       	mov	r24, r17
  12:	90 2f       	mov	r25, r16
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperl>
  18:	81 2f       	mov	r24, r17
  1a:	90 2f       	mov	r25, r16
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	08 95       	ret
Disassembly of section .text._ZplRK15StringSumHelperj:

00000000 <_ZplRK15StringSumHelperj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	0f 93       	push	r16
{
	free(buffer);
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperj>
}
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperj+0x10>
  10:	81 2f       	mov	r24, r17
  12:	90 2f       	mov	r25, r16
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperj>
  18:	81 2f       	mov	r24, r17
  1a:	90 2f       	mov	r25, r16
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	08 95       	ret
Disassembly of section .text._ZplRK15StringSumHelperi:

00000000 <_ZplRK15StringSumHelperi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	0f 93       	push	r16
{
	free(buffer);
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperi>
}
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperi+0x10>
  10:	81 2f       	mov	r24, r17
  12:	90 2f       	mov	r25, r16
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperi>
  18:	81 2f       	mov	r24, r17
  1a:	90 2f       	mov	r25, r16
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	08 95       	ret
Disassembly of section .text._ZplRK15StringSumHelperh:

00000000 <_ZplRK15StringSumHelperh>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	0f 93       	push	r16
{
	free(buffer);
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperh>
}
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperh+0x10>
  10:	81 2f       	mov	r24, r17
  12:	90 2f       	mov	r25, r16
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperh>
  18:	81 2f       	mov	r24, r17
  1a:	90 2f       	mov	r25, r16
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	08 95       	ret
Disassembly of section .text._ZplRK15StringSumHelperc:

00000000 <_ZplRK15StringSumHelperc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	0f 93       	push	r16
{
	free(buffer);
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperc>
}
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperc+0x10>
  10:	81 2f       	mov	r24, r17
  12:	90 2f       	mov	r25, r16
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperc>
  18:	81 2f       	mov	r24, r17
  1a:	90 2f       	mov	r25, r16
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	08 95       	ret
Disassembly of section .text._ZplRK15StringSumHelperPKc:

00000000 <_ZplRK15StringSumHelperPKc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	0f 93       	push	r16
{
	free(buffer);
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
   8:	61 15       	cp	r22, r1
}
   a:	71 05       	cpc	r23, r1
   c:	01 f0       	breq	.+0      	; 0xe <_ZplRK15StringSumHelperPKc+0xe>
   e:	db 01       	movw	r26, r22
  10:	0d 90       	ld	r0, X+
  12:	00 20       	and	r0, r0
  14:	01 f4       	brne	.+0      	; 0x16 <_ZplRK15StringSumHelperPKc+0x16>
  16:	11 97       	sbiw	r26, 0x01	; 1
  18:	a6 1b       	sub	r26, r22
  1a:	b7 0b       	sbc	r27, r23
  1c:	ad 01       	movw	r20, r26
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperPKc>
  22:	88 23       	and	r24, r24
  24:	01 f4       	brne	.+0      	; 0x26 <_ZplRK15StringSumHelperPKc+0x26>
  26:	81 2f       	mov	r24, r17
  28:	90 2f       	mov	r25, r16
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperPKc>
  2e:	81 2f       	mov	r24, r17
  30:	90 2f       	mov	r25, r16
  32:	1f 91       	pop	r17
  34:	0f 91       	pop	r16
  36:	08 95       	ret
Disassembly of section .text._ZplRK15StringSumHelperRK6String:

00000000 <_ZplRK15StringSumHelperRK6String>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	0f 93       	push	r16
{
	free(buffer);
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
   8:	fb 01       	movw	r30, r22
}
   a:	60 81       	ld	r22, Z
   c:	71 81       	ldd	r23, Z+1	; 0x01
   e:	44 81       	ldd	r20, Z+4	; 0x04
  10:	55 81       	ldd	r21, Z+5	; 0x05
  12:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperRK6String>
  16:	88 23       	and	r24, r24
  18:	01 f4       	brne	.+0      	; 0x1a <_ZplRK15StringSumHelperRK6String+0x1a>
  1a:	81 2f       	mov	r24, r17
  1c:	90 2f       	mov	r25, r16
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperRK6String>
  22:	81 2f       	mov	r24, r17
  24:	90 2f       	mov	r25, r16
  26:	1f 91       	pop	r17
  28:	0f 91       	pop	r16
  2a:	08 95       	ret
Disassembly of section .text._ZN6String4copyEPKcj:

00000000 <_ZN6String4copyEPKcj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	ef 92       	push	r14
{
	free(buffer);
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
}
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	7b 01       	movw	r14, r22
  10:	8a 01       	movw	r16, r20
  12:	ba 01       	movw	r22, r20
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
  18:	88 23       	and	r24, r24
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN6String4copyEPKcj+0x1c>
  1c:	ce 01       	movw	r24, r28
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN6String4copyEPKcj+0x24>
  24:	1d 83       	std	Y+5, r17	; 0x05
  26:	0c 83       	std	Y+4, r16	; 0x04
  28:	88 81       	ld	r24, Y
  2a:	99 81       	ldd	r25, Y+1	; 0x01
  2c:	b7 01       	movw	r22, r14
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
  32:	ce 01       	movw	r24, r28
  34:	df 91       	pop	r29
  36:	cf 91       	pop	r28
  38:	1f 91       	pop	r17
  3a:	0f 91       	pop	r16
  3c:	ff 90       	pop	r15
  3e:	ef 90       	pop	r14
  40:	08 95       	ret
Disassembly of section .text._ZN6StringC1EPKc:

00000000 <_ZN6StringC1EPKc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	cf 93       	push	r28
{
	free(buffer);
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	19 82       	std	Y+1, r1	; 0x01
   8:	18 82       	st	Y, r1
}
   a:	1b 82       	std	Y+3, r1	; 0x03
   c:	1a 82       	std	Y+2, r1	; 0x02
   e:	1d 82       	std	Y+5, r1	; 0x05
  10:	1c 82       	std	Y+4, r1	; 0x04
  12:	1e 82       	std	Y+6, r1	; 0x06
  14:	61 15       	cp	r22, r1
  16:	71 05       	cpc	r23, r1
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN6StringC1EPKc+0x1a>
  1a:	db 01       	movw	r26, r22
  1c:	0d 90       	ld	r0, X+
  1e:	00 20       	and	r0, r0
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN6StringC1EPKc+0x22>
  22:	11 97       	sbiw	r26, 0x01	; 1
  24:	a6 1b       	sub	r26, r22
  26:	b7 0b       	sbc	r27, r23
  28:	ad 01       	movw	r20, r26
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
  2e:	df 91       	pop	r29
  30:	cf 91       	pop	r28
  32:	08 95       	ret
Disassembly of section .text._ZN6StringC2EPKc:

00000000 <_ZN6StringC2EPKc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	cf 93       	push	r28
{
	free(buffer);
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	19 82       	std	Y+1, r1	; 0x01
   8:	18 82       	st	Y, r1
}
   a:	1b 82       	std	Y+3, r1	; 0x03
   c:	1a 82       	std	Y+2, r1	; 0x02
   e:	1d 82       	std	Y+5, r1	; 0x05
  10:	1c 82       	std	Y+4, r1	; 0x04
  12:	1e 82       	std	Y+6, r1	; 0x06
  14:	61 15       	cp	r22, r1
  16:	71 05       	cpc	r23, r1
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN6StringC2EPKc+0x1a>
  1a:	db 01       	movw	r26, r22
  1c:	0d 90       	ld	r0, X+
  1e:	00 20       	and	r0, r0
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN6StringC2EPKc+0x22>
  22:	11 97       	sbiw	r26, 0x01	; 1
  24:	a6 1b       	sub	r26, r22
  26:	b7 0b       	sbc	r27, r23
  28:	ad 01       	movw	r20, r26
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2EPKc>
  2e:	df 91       	pop	r29
  30:	cf 91       	pop	r28
  32:	08 95       	ret
Disassembly of section .text._ZN6StringaSEPKc:

00000000 <_ZN6StringaSEPKc>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	0f 93       	push	r16
{
	free(buffer);
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
   8:	61 15       	cp	r22, r1
}
   a:	71 05       	cpc	r23, r1
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6StringaSEPKc+0xe>
   e:	db 01       	movw	r26, r22
  10:	0d 90       	ld	r0, X+
  12:	00 20       	and	r0, r0
  14:	01 f4       	brne	.+0      	; 0x16 <_ZN6StringaSEPKc+0x16>
  16:	11 97       	sbiw	r26, 0x01	; 1
  18:	a6 1b       	sub	r26, r22
  1a:	b7 0b       	sbc	r27, r23
  1c:	ad 01       	movw	r20, r26
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSEPKc>
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN6StringaSEPKc+0x24>
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSEPKc>
  28:	81 2f       	mov	r24, r17
  2a:	90 2f       	mov	r25, r16
  2c:	1f 91       	pop	r17
  2e:	0f 91       	pop	r16
  30:	08 95       	ret
Disassembly of section .text._ZN6StringC1Emh:

00000000 <_ZN6StringC1Emh>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	ef 92       	push	r14
{
	free(buffer);
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
}
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	a1 97       	sbiw	r28, 0x21	; 33
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	fc 01       	movw	r30, r24
  20:	11 82       	std	Z+1, r1	; 0x01
  22:	10 82       	st	Z, r1
  24:	13 82       	std	Z+3, r1	; 0x03
  26:	12 82       	std	Z+2, r1	; 0x02
  28:	15 82       	std	Z+5, r1	; 0x05
  2a:	14 82       	std	Z+4, r1	; 0x04
  2c:	16 82       	std	Z+6, r1	; 0x06
  2e:	cb 01       	movw	r24, r22
  30:	ba 01       	movw	r22, r20
  32:	7e 01       	movw	r14, r28
  34:	08 94       	sec
  36:	e1 1c       	adc	r14, r1
  38:	f1 1c       	adc	r15, r1
  3a:	a7 01       	movw	r20, r14
  3c:	30 e0       	ldi	r19, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Emh>
  42:	c8 01       	movw	r24, r16
  44:	b7 01       	movw	r22, r14
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Emh>
  4a:	a1 96       	adiw	r28, 0x21	; 33
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret
Disassembly of section .text._ZN6StringC2Emh:

00000000 <_ZN6StringC2Emh>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	ef 92       	push	r14
{
	free(buffer);
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
}
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	a1 97       	sbiw	r28, 0x21	; 33
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	fc 01       	movw	r30, r24
  20:	11 82       	std	Z+1, r1	; 0x01
  22:	10 82       	st	Z, r1
  24:	13 82       	std	Z+3, r1	; 0x03
  26:	12 82       	std	Z+2, r1	; 0x02
  28:	15 82       	std	Z+5, r1	; 0x05
  2a:	14 82       	std	Z+4, r1	; 0x04
  2c:	16 82       	std	Z+6, r1	; 0x06
  2e:	cb 01       	movw	r24, r22
  30:	ba 01       	movw	r22, r20
  32:	7e 01       	movw	r14, r28
  34:	08 94       	sec
  36:	e1 1c       	adc	r14, r1
  38:	f1 1c       	adc	r15, r1
  3a:	a7 01       	movw	r20, r14
  3c:	30 e0       	ldi	r19, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Emh>
  42:	c8 01       	movw	r24, r16
  44:	b7 01       	movw	r22, r14
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Emh>
  4a:	a1 96       	adiw	r28, 0x21	; 33
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret
Disassembly of section .text._ZN6StringC1Elh:

00000000 <_ZN6StringC1Elh>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	ef 92       	push	r14
{
	free(buffer);
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
}
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	a2 97       	sbiw	r28, 0x22	; 34
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	fc 01       	movw	r30, r24
  20:	11 82       	std	Z+1, r1	; 0x01
  22:	10 82       	st	Z, r1
  24:	13 82       	std	Z+3, r1	; 0x03
  26:	12 82       	std	Z+2, r1	; 0x02
  28:	15 82       	std	Z+5, r1	; 0x05
  2a:	14 82       	std	Z+4, r1	; 0x04
  2c:	16 82       	std	Z+6, r1	; 0x06
  2e:	cb 01       	movw	r24, r22
  30:	ba 01       	movw	r22, r20
  32:	7e 01       	movw	r14, r28
  34:	08 94       	sec
  36:	e1 1c       	adc	r14, r1
  38:	f1 1c       	adc	r15, r1
  3a:	a7 01       	movw	r20, r14
  3c:	30 e0       	ldi	r19, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Elh>
  42:	c8 01       	movw	r24, r16
  44:	b7 01       	movw	r22, r14
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Elh>
  4a:	a2 96       	adiw	r28, 0x22	; 34
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret
Disassembly of section .text._ZN6StringC2Elh:

00000000 <_ZN6StringC2Elh>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	ef 92       	push	r14
{
	free(buffer);
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
}
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	a2 97       	sbiw	r28, 0x22	; 34
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	fc 01       	movw	r30, r24
  20:	11 82       	std	Z+1, r1	; 0x01
  22:	10 82       	st	Z, r1
  24:	13 82       	std	Z+3, r1	; 0x03
  26:	12 82       	std	Z+2, r1	; 0x02
  28:	15 82       	std	Z+5, r1	; 0x05
  2a:	14 82       	std	Z+4, r1	; 0x04
  2c:	16 82       	std	Z+6, r1	; 0x06
  2e:	cb 01       	movw	r24, r22
  30:	ba 01       	movw	r22, r20
  32:	7e 01       	movw	r14, r28
  34:	08 94       	sec
  36:	e1 1c       	adc	r14, r1
  38:	f1 1c       	adc	r15, r1
  3a:	a7 01       	movw	r20, r14
  3c:	30 e0       	ldi	r19, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Elh>
  42:	c8 01       	movw	r24, r16
  44:	b7 01       	movw	r22, r14
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Elh>
  4a:	a2 96       	adiw	r28, 0x22	; 34
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret
Disassembly of section .text._ZN6StringC1Ejh:

00000000 <_ZN6StringC1Ejh>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	ef 92       	push	r14
{
	free(buffer);
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
}
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	61 97       	sbiw	r28, 0x11	; 17
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	cb 01       	movw	r24, r22
  20:	f8 01       	movw	r30, r16
  22:	11 82       	std	Z+1, r1	; 0x01
  24:	10 82       	st	Z, r1
  26:	13 82       	std	Z+3, r1	; 0x03
  28:	12 82       	std	Z+2, r1	; 0x02
  2a:	15 82       	std	Z+5, r1	; 0x05
  2c:	14 82       	std	Z+4, r1	; 0x04
  2e:	16 82       	std	Z+6, r1	; 0x06
  30:	7e 01       	movw	r14, r28
  32:	08 94       	sec
  34:	e1 1c       	adc	r14, r1
  36:	f1 1c       	adc	r15, r1
  38:	b7 01       	movw	r22, r14
  3a:	50 e0       	ldi	r21, 0x00	; 0
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ejh>
  40:	c8 01       	movw	r24, r16
  42:	b7 01       	movw	r22, r14
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ejh>
  48:	61 96       	adiw	r28, 0x11	; 17
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	cf 91       	pop	r28
  56:	df 91       	pop	r29
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret
Disassembly of section .text._ZN6StringC2Ejh:

00000000 <_ZN6StringC2Ejh>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	ef 92       	push	r14
{
	free(buffer);
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
}
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	61 97       	sbiw	r28, 0x11	; 17
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	cb 01       	movw	r24, r22
  20:	f8 01       	movw	r30, r16
  22:	11 82       	std	Z+1, r1	; 0x01
  24:	10 82       	st	Z, r1
  26:	13 82       	std	Z+3, r1	; 0x03
  28:	12 82       	std	Z+2, r1	; 0x02
  2a:	15 82       	std	Z+5, r1	; 0x05
  2c:	14 82       	std	Z+4, r1	; 0x04
  2e:	16 82       	std	Z+6, r1	; 0x06
  30:	7e 01       	movw	r14, r28
  32:	08 94       	sec
  34:	e1 1c       	adc	r14, r1
  36:	f1 1c       	adc	r15, r1
  38:	b7 01       	movw	r22, r14
  3a:	50 e0       	ldi	r21, 0x00	; 0
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ejh>
  40:	c8 01       	movw	r24, r16
  42:	b7 01       	movw	r22, r14
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ejh>
  48:	61 96       	adiw	r28, 0x11	; 17
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	cf 91       	pop	r28
  56:	df 91       	pop	r29
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret
Disassembly of section .text._ZN6StringC1Eih:

00000000 <_ZN6StringC1Eih>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	ef 92       	push	r14
{
	free(buffer);
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
}
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	62 97       	sbiw	r28, 0x12	; 18
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	cb 01       	movw	r24, r22
  20:	f8 01       	movw	r30, r16
  22:	11 82       	std	Z+1, r1	; 0x01
  24:	10 82       	st	Z, r1
  26:	13 82       	std	Z+3, r1	; 0x03
  28:	12 82       	std	Z+2, r1	; 0x02
  2a:	15 82       	std	Z+5, r1	; 0x05
  2c:	14 82       	std	Z+4, r1	; 0x04
  2e:	16 82       	std	Z+6, r1	; 0x06
  30:	7e 01       	movw	r14, r28
  32:	08 94       	sec
  34:	e1 1c       	adc	r14, r1
  36:	f1 1c       	adc	r15, r1
  38:	b7 01       	movw	r22, r14
  3a:	50 e0       	ldi	r21, 0x00	; 0
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Eih>
  40:	c8 01       	movw	r24, r16
  42:	b7 01       	movw	r22, r14
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Eih>
  48:	62 96       	adiw	r28, 0x12	; 18
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	cf 91       	pop	r28
  56:	df 91       	pop	r29
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret
Disassembly of section .text._ZN6StringC2Eih:

00000000 <_ZN6StringC2Eih>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	ef 92       	push	r14
{
	free(buffer);
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
}
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	62 97       	sbiw	r28, 0x12	; 18
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	cb 01       	movw	r24, r22
  20:	f8 01       	movw	r30, r16
  22:	11 82       	std	Z+1, r1	; 0x01
  24:	10 82       	st	Z, r1
  26:	13 82       	std	Z+3, r1	; 0x03
  28:	12 82       	std	Z+2, r1	; 0x02
  2a:	15 82       	std	Z+5, r1	; 0x05
  2c:	14 82       	std	Z+4, r1	; 0x04
  2e:	16 82       	std	Z+6, r1	; 0x06
  30:	7e 01       	movw	r14, r28
  32:	08 94       	sec
  34:	e1 1c       	adc	r14, r1
  36:	f1 1c       	adc	r15, r1
  38:	b7 01       	movw	r22, r14
  3a:	50 e0       	ldi	r21, 0x00	; 0
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Eih>
  40:	c8 01       	movw	r24, r16
  42:	b7 01       	movw	r22, r14
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Eih>
  48:	62 96       	adiw	r28, 0x12	; 18
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	cf 91       	pop	r28
  56:	df 91       	pop	r29
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret
Disassembly of section .text._ZN6StringC1Ehh:

00000000 <_ZN6StringC1Ehh>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	ef 92       	push	r14
{
	free(buffer);
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
}
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	29 97       	sbiw	r28, 0x09	; 9
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	86 2f       	mov	r24, r22
  20:	f8 01       	movw	r30, r16
  22:	11 82       	std	Z+1, r1	; 0x01
  24:	10 82       	st	Z, r1
  26:	13 82       	std	Z+3, r1	; 0x03
  28:	12 82       	std	Z+2, r1	; 0x02
  2a:	15 82       	std	Z+5, r1	; 0x05
  2c:	14 82       	std	Z+4, r1	; 0x04
  2e:	16 82       	std	Z+6, r1	; 0x06
  30:	90 e0       	ldi	r25, 0x00	; 0
  32:	7e 01       	movw	r14, r28
  34:	08 94       	sec
  36:	e1 1c       	adc	r14, r1
  38:	f1 1c       	adc	r15, r1
  3a:	b7 01       	movw	r22, r14
  3c:	50 e0       	ldi	r21, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ehh>
  42:	c8 01       	movw	r24, r16
  44:	b7 01       	movw	r22, r14
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ehh>
  4a:	29 96       	adiw	r28, 0x09	; 9
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret
Disassembly of section .text._ZN6StringC2Ehh:

00000000 <_ZN6StringC2Ehh>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	ef 92       	push	r14
{
	free(buffer);
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
}
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	29 97       	sbiw	r28, 0x09	; 9
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	86 2f       	mov	r24, r22
  20:	f8 01       	movw	r30, r16
  22:	11 82       	std	Z+1, r1	; 0x01
  24:	10 82       	st	Z, r1
  26:	13 82       	std	Z+3, r1	; 0x03
  28:	12 82       	std	Z+2, r1	; 0x02
  2a:	15 82       	std	Z+5, r1	; 0x05
  2c:	14 82       	std	Z+4, r1	; 0x04
  2e:	16 82       	std	Z+6, r1	; 0x06
  30:	90 e0       	ldi	r25, 0x00	; 0
  32:	7e 01       	movw	r14, r28
  34:	08 94       	sec
  36:	e1 1c       	adc	r14, r1
  38:	f1 1c       	adc	r15, r1
  3a:	b7 01       	movw	r22, r14
  3c:	50 e0       	ldi	r21, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ehh>
  42:	c8 01       	movw	r24, r16
  44:	b7 01       	movw	r22, r14
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ehh>
  4a:	29 96       	adiw	r28, 0x09	; 9
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret
Disassembly of section .text._ZN6StringC1Ec:

00000000 <_ZN6StringC1Ec>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
{
	free(buffer);
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6StringC1Ec+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
}
   a:	fc 01       	movw	r30, r24
   c:	11 82       	std	Z+1, r1	; 0x01
   e:	10 82       	st	Z, r1
  10:	13 82       	std	Z+3, r1	; 0x03
  12:	12 82       	std	Z+2, r1	; 0x02
  14:	15 82       	std	Z+5, r1	; 0x05
  16:	14 82       	std	Z+4, r1	; 0x04
  18:	16 82       	std	Z+6, r1	; 0x06
  1a:	69 83       	std	Y+1, r22	; 0x01
  1c:	1a 82       	std	Y+2, r1	; 0x02
  1e:	be 01       	movw	r22, r28
  20:	6f 5f       	subi	r22, 0xFF	; 255
  22:	7f 4f       	sbci	r23, 0xFF	; 255
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ec>
  28:	0f 90       	pop	r0
  2a:	0f 90       	pop	r0
  2c:	cf 91       	pop	r28
  2e:	df 91       	pop	r29
  30:	08 95       	ret
Disassembly of section .text._ZN6StringC2Ec:

00000000 <_ZN6StringC2Ec>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	df 93       	push	r29
{
	free(buffer);
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6StringC2Ec+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
}
   a:	fc 01       	movw	r30, r24
   c:	11 82       	std	Z+1, r1	; 0x01
   e:	10 82       	st	Z, r1
  10:	13 82       	std	Z+3, r1	; 0x03
  12:	12 82       	std	Z+2, r1	; 0x02
  14:	15 82       	std	Z+5, r1	; 0x05
  16:	14 82       	std	Z+4, r1	; 0x04
  18:	16 82       	std	Z+6, r1	; 0x06
  1a:	69 83       	std	Y+1, r22	; 0x01
  1c:	1a 82       	std	Y+2, r1	; 0x02
  1e:	be 01       	movw	r22, r28
  20:	6f 5f       	subi	r22, 0xFF	; 255
  22:	7f 4f       	sbci	r23, 0xFF	; 255
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ec>
  28:	0f 90       	pop	r0
  2a:	0f 90       	pop	r0
  2c:	cf 91       	pop	r28
  2e:	df 91       	pop	r29
  30:	08 95       	ret
Disassembly of section .text._ZNK6String9substringEjj:

00000000 <_ZNK6String9substringEjj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	bf 92       	push	r11
{
	free(buffer);
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
}
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	08 2f       	mov	r16, r24
  14:	b9 2e       	mov	r11, r25
  16:	6b 01       	movw	r12, r22
  18:	7a 01       	movw	r14, r20
  1a:	e9 01       	movw	r28, r18
  1c:	24 17       	cp	r18, r20
  1e:	35 07       	cpc	r19, r21
  20:	00 f4       	brcc	.+0      	; 0x22 <_ZNK6String9substringEjj+0x22>
  22:	ea 01       	movw	r28, r20
  24:	79 01       	movw	r14, r18
  26:	80 2f       	mov	r24, r16
  28:	9b 2d       	mov	r25, r11
  2a:	60 e0       	ldi	r22, 0x00	; 0
  2c:	70 e0       	ldi	r23, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEjj>
  32:	d6 01       	movw	r26, r12
  34:	14 96       	adiw	r26, 0x04	; 4
  36:	8d 91       	ld	r24, X+
  38:	9c 91       	ld	r25, X
  3a:	15 97       	sbiw	r26, 0x05	; 5
  3c:	8e 15       	cp	r24, r14
  3e:	9f 05       	cpc	r25, r15
  40:	00 f0       	brcs	.+0      	; 0x42 <_ZNK6String9substringEjj+0x42>
  42:	8c 17       	cp	r24, r28
  44:	9d 07       	cpc	r25, r29
  46:	00 f4       	brcc	.+0      	; 0x48 <_ZNK6String9substringEjj+0x48>
  48:	ec 01       	movw	r28, r24
  4a:	d6 01       	movw	r26, r12
  4c:	ed 91       	ld	r30, X+
  4e:	fc 91       	ld	r31, X
  50:	11 97       	sbiw	r26, 0x01	; 1
  52:	ec 0f       	add	r30, r28
  54:	fd 1f       	adc	r31, r29
  56:	10 81       	ld	r17, Z
  58:	10 82       	st	Z, r1
  5a:	6d 91       	ld	r22, X+
  5c:	7c 91       	ld	r23, X
  5e:	6e 0d       	add	r22, r14
  60:	7f 1d       	adc	r23, r15
  62:	80 2f       	mov	r24, r16
  64:	9b 2d       	mov	r25, r11
  66:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEjj>
  6a:	d6 01       	movw	r26, r12
  6c:	ed 91       	ld	r30, X+
  6e:	fc 91       	ld	r31, X
  70:	ec 0f       	add	r30, r28
  72:	fd 1f       	adc	r31, r29
  74:	10 83       	st	Z, r17
  76:	80 2f       	mov	r24, r16
  78:	9b 2d       	mov	r25, r11
  7a:	df 91       	pop	r29
  7c:	cf 91       	pop	r28
  7e:	1f 91       	pop	r17
  80:	0f 91       	pop	r16
  82:	ff 90       	pop	r15
  84:	ef 90       	pop	r14
  86:	df 90       	pop	r13
  88:	cf 90       	pop	r12
  8a:	bf 90       	pop	r11
  8c:	08 95       	ret
Disassembly of section .text._ZNK6String9substringEj:

00000000 <_ZNK6String9substringEj>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	0f 93       	push	r16
{
	free(buffer);
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	fb 01       	movw	r30, r22
   8:	24 81       	ldd	r18, Z+4	; 0x04
}
   a:	35 81       	ldd	r19, Z+5	; 0x05
   c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEj>
  10:	c8 01       	movw	r24, r16
  12:	1f 91       	pop	r17
  14:	0f 91       	pop	r16
  16:	08 95       	ret
Disassembly of section .text._ZN6StringaSERKS_:

00000000 <_ZN6StringaSERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	cf 93       	push	r28
{
	free(buffer);
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	fb 01       	movw	r30, r22
   8:	86 17       	cp	r24, r22
}
   a:	97 07       	cpc	r25, r23
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6StringaSERKS_+0xe>
   e:	60 81       	ld	r22, Z
  10:	71 81       	ldd	r23, Z+1	; 0x01
  12:	61 15       	cp	r22, r1
  14:	71 05       	cpc	r23, r1
  16:	01 f0       	breq	.+0      	; 0x18 <_ZN6StringaSERKS_+0x18>
  18:	44 81       	ldd	r20, Z+4	; 0x04
  1a:	55 81       	ldd	r21, Z+5	; 0x05
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSERKS_>
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN6StringaSERKS_+0x22>
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSERKS_>
  26:	ce 01       	movw	r24, r28
  28:	df 91       	pop	r29
  2a:	cf 91       	pop	r28
  2c:	08 95       	ret
Disassembly of section .text._ZN6StringC1ERKS_:

00000000 <_ZN6StringC1ERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	fc 01       	movw	r30, r24
{
	free(buffer);
   2:	11 82       	std	Z+1, r1	; 0x01
   4:	10 82       	st	Z, r1
   6:	13 82       	std	Z+3, r1	; 0x03
   8:	12 82       	std	Z+2, r1	; 0x02
}
   a:	15 82       	std	Z+5, r1	; 0x05
   c:	14 82       	std	Z+4, r1	; 0x04
   e:	16 82       	std	Z+6, r1	; 0x06
  10:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1ERKS_>
  14:	08 95       	ret
Disassembly of section .text._ZN6StringC2ERKS_:

00000000 <_ZN6StringC2ERKS_>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	fc 01       	movw	r30, r24
{
	free(buffer);
   2:	11 82       	std	Z+1, r1	; 0x01
   4:	10 82       	st	Z, r1
   6:	13 82       	std	Z+3, r1	; 0x03
   8:	12 82       	std	Z+2, r1	; 0x02
}
   a:	15 82       	std	Z+5, r1	; 0x05
   c:	14 82       	std	Z+4, r1	; 0x04
   e:	16 82       	std	Z+6, r1	; 0x06
  10:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2ERKS_>
  14:	08 95       	ret
Disassembly of section .text._ZN6StringD1Ev:

00000000 <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	fc 01       	movw	r30, r24
{
	free(buffer);
   2:	80 81       	ld	r24, Z
   4:	91 81       	ldd	r25, Z+1	; 0x01
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringD1Ev>
}
   a:	08 95       	ret
Disassembly of section .text._ZN6StringD2Ev:

00000000 <_ZN6StringD2Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	fc 01       	movw	r30, r24
{
	free(buffer);
   2:	80 81       	ld	r24, Z
   4:	91 81       	ldd	r25, Z+1	; 0x01
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringD2Ev>
}
   a:	08 95       	ret

main.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000570  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002c9f  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.main    0000001e  00000000  00000000  00003243  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
Disassembly of section .text.main:

00000000 <main>:
#include <Arduino.h>

int main(void)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
{
	init();
   4:	0e 94 00 00 	call	0	; 0x0 <main>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
   8:	0e 94 00 00 	call	0	; 0x0 <main>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
   c:	c0 e0       	ldi	r28, 0x00	; 0
   e:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
  10:	0e 94 00 00 	call	0	; 0x0 <main>
		if (serialEventRun) serialEventRun();
  14:	20 97       	sbiw	r28, 0x00	; 0
  16:	01 f0       	breq	.+0      	; 0x18 <main+0x18>
  18:	0e 94 00 00 	call	0	; 0x0 <main>
  1c:	00 c0       	rjmp	.+0      	; 0x1e <__zero_reg__+0x1d>

new.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000048c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000664  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.__cxa_guard_acquire 00000014  00000000  00000000  00000b24  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.__cxa_guard_release 00000008  00000000  00000000  00000b38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text.__cxa_guard_abort 00000002  00000000  00000000  00000b40  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text.__cxa_pure_virtual 00000002  00000000  00000000  00000b42  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text._ZdaPv  00000006  00000000  00000000  00000b44  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZdlPv  00000006  00000000  00000000  00000b4a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._Znaj   00000006  00000000  00000000  00000b50  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._Znwj   00000006  00000000  00000000  00000b56  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
Disassembly of section .text.__cxa_guard_acquire:

00000000 <__cxa_guard_acquire>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
   0:	fc 01       	movw	r30, r24
   2:	20 e0       	ldi	r18, 0x00	; 0
}
   4:	30 e0       	ldi	r19, 0x00	; 0
   6:	80 81       	ld	r24, Z
   8:	88 23       	and	r24, r24
   a:	01 f4       	brne	.+0      	; 0xc <__cxa_guard_acquire+0xc>
   c:	21 e0       	ldi	r18, 0x01	; 1
   e:	30 e0       	ldi	r19, 0x00	; 0
  10:	c9 01       	movw	r24, r18
  12:	08 95       	ret
Disassembly of section .text.__cxa_guard_release:

00000000 <__cxa_guard_release>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
   0:	fc 01       	movw	r30, r24
   2:	81 e0       	ldi	r24, 0x01	; 1
}
   4:	80 83       	st	Z, r24
   6:	08 95       	ret
Disassembly of section .text.__cxa_guard_abort:

00000000 <__cxa_guard_abort>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
   0:	08 95       	ret
Disassembly of section .text.__cxa_pure_virtual:

00000000 <__cxa_pure_virtual>:
   0:	08 95       	ret
Disassembly of section .text._ZdaPv:

00000000 <_ZdaPv>:
   0:	0e 94 00 00 	call	0	; 0x0 <_ZdaPv>
}
   4:	08 95       	ret
Disassembly of section .text._ZdlPv:

00000000 <_ZdlPv>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
   0:	0e 94 00 00 	call	0	; 0x0 <_ZdlPv>
}
   4:	08 95       	ret
Disassembly of section .text._Znaj:

00000000 <_Znaj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
   0:	0e 94 00 00 	call	0	; 0x0 <_Znaj>
}
   4:	08 95       	ret
Disassembly of section .text._Znwj:

00000000 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
   0:	0e 94 00 00 	call	0	; 0x0 <_Znwj>
}
   4:	08 95       	ret

wiring.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000005dc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000f57  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.init    00000008  00000000  00000000  00001567  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .bss.timer0_overflow_count 00000004  00000000  00000000  0000156f  2**0
                  ALLOC
  7 .bss.timer0_millis 00000004  00000000  00000000  0000156f  2**0
                  ALLOC
Disassembly of section .text.init:

00000000 <init>:
#endif
void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	78 94       	sei
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
   2:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
   6:	08 95       	ret

wiring_analog.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000804  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000fc7  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.analogReference 00000006  00000000  00000000  000017ff  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.analogRead 00000044  00000000  00000000  00001805  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.analogWrite 000000c0  00000000  00000000  00001849  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .data.analog_reference 00000001  00000000  00000000  00001909  2**0
                  CONTENTS, ALLOC, LOAD, DATA
Disassembly of section .text.analogReference:

00000000 <analogReference>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
   0:	80 93 00 00 	sts	0x0000, r24
   4:	08 95       	ret
Disassembly of section .text.analogRead:

00000000 <analogRead>:
   0:	98 2f       	mov	r25, r24
   2:	8e 30       	cpi	r24, 0x0E	; 14
   4:	00 f0       	brcs	.+0      	; 0x6 <analogRead+0x6>
   6:	9e 50       	subi	r25, 0x0E	; 14
   8:	97 70       	andi	r25, 0x07	; 7
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
   a:	80 91 00 00 	lds	r24, 0x0000
   e:	82 95       	swap	r24
	if (val == 0)
  10:	88 0f       	add	r24, r24
  12:	88 0f       	add	r24, r24
  14:	80 7c       	andi	r24, 0xC0	; 192
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
  16:	89 2b       	or	r24, r25
  18:	80 93 7c 00 	sts	0x007C, r24
  1c:	80 91 7a 00 	lds	r24, 0x007A
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
  20:	80 64       	ori	r24, 0x40	; 64
  22:	80 93 7a 00 	sts	0x007A, r24
  26:	80 91 7a 00 	lds	r24, 0x007A
  2a:	86 fd       	sbrc	r24, 6
  2c:	00 c0       	rjmp	.+0      	; 0x2e <analogRead+0x2e>
  2e:	20 91 78 00 	lds	r18, 0x0078
  32:	40 91 79 00 	lds	r20, 0x0079
  36:	94 2f       	mov	r25, r20
  38:	80 e0       	ldi	r24, 0x00	; 0
  3a:	30 e0       	ldi	r19, 0x00	; 0
  3c:	28 2b       	or	r18, r24
  3e:	39 2b       	or	r19, r25
  40:	c9 01       	movw	r24, r18
  42:	08 95       	ret
Disassembly of section .text.analogWrite:

00000000 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	18 2f       	mov	r17, r24
   8:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
   a:	61 e0       	ldi	r22, 0x01	; 1
   c:	0e 94 00 00 	call	0	; 0x0 <analogWrite>
	if (val == 0)
  10:	20 97       	sbiw	r28, 0x00	; 0
  12:	01 f4       	brne	.+0      	; 0x14 <analogWrite+0x14>
  14:	00 c0       	rjmp	.+0      	; 0x16 <analogWrite+0x16>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
  16:	cf 3f       	cpi	r28, 0xFF	; 255
  18:	d1 05       	cpc	r29, r1
  1a:	01 f4       	brne	.+0      	; 0x1c <analogWrite+0x1c>
  1c:	00 c0       	rjmp	.+0      	; 0x1e <analogWrite+0x1e>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
  1e:	e1 2f       	mov	r30, r17
  20:	f0 e0       	ldi	r31, 0x00	; 0
  22:	e0 50       	subi	r30, 0x00	; 0
  24:	f0 40       	sbci	r31, 0x00	; 0
  26:	84 91       	lpm	r24, Z+
  28:	83 30       	cpi	r24, 0x03	; 3
  2a:	01 f0       	breq	.+0      	; 0x2c <analogWrite+0x2c>
  2c:	84 30       	cpi	r24, 0x04	; 4
  2e:	00 f4       	brcc	.+0      	; 0x30 <analogWrite+0x30>
  30:	81 30       	cpi	r24, 0x01	; 1
  32:	01 f0       	breq	.+0      	; 0x34 <analogWrite+0x34>
  34:	82 30       	cpi	r24, 0x02	; 2
  36:	01 f4       	brne	.+0      	; 0x38 <analogWrite+0x38>
  38:	00 c0       	rjmp	.+0      	; 0x3a <analogWrite+0x3a>
  3a:	86 30       	cpi	r24, 0x06	; 6
  3c:	01 f0       	breq	.+0      	; 0x3e <analogWrite+0x3e>
  3e:	87 30       	cpi	r24, 0x07	; 7
  40:	01 f0       	breq	.+0      	; 0x42 <analogWrite+0x42>
  42:	84 30       	cpi	r24, 0x04	; 4
  44:	01 f4       	brne	.+0      	; 0x46 <analogWrite+0x46>
  46:	00 c0       	rjmp	.+0      	; 0x48 <analogWrite+0x48>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
  48:	84 b5       	in	r24, 0x24	; 36
  4a:	80 68       	ori	r24, 0x80	; 128
  4c:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
  4e:	c7 bd       	out	0x27, r28	; 39
  50:	00 c0       	rjmp	.+0      	; 0x52 <analogWrite+0x52>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
  52:	84 b5       	in	r24, 0x24	; 36
  54:	80 62       	ori	r24, 0x20	; 32
  56:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
  58:	c8 bd       	out	0x28, r28	; 40
  5a:	00 c0       	rjmp	.+0      	; 0x5c <analogWrite+0x5c>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
  5c:	80 91 80 00 	lds	r24, 0x0080
  60:	80 68       	ori	r24, 0x80	; 128
  62:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
  66:	d0 93 89 00 	sts	0x0089, r29
  6a:	c0 93 88 00 	sts	0x0088, r28
  6e:	00 c0       	rjmp	.+0      	; 0x70 <analogWrite+0x70>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
  70:	80 91 80 00 	lds	r24, 0x0080
  74:	80 62       	ori	r24, 0x20	; 32
  76:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
  7a:	d0 93 8b 00 	sts	0x008B, r29
  7e:	c0 93 8a 00 	sts	0x008A, r28
  82:	00 c0       	rjmp	.+0      	; 0x84 <analogWrite+0x84>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
  84:	80 91 b0 00 	lds	r24, 0x00B0
  88:	80 68       	ori	r24, 0x80	; 128
  8a:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
  8e:	c0 93 b3 00 	sts	0x00B3, r28
  92:	00 c0       	rjmp	.+0      	; 0x94 <analogWrite+0x94>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
  94:	80 91 b0 00 	lds	r24, 0x00B0
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
  9e:	c0 93 b4 00 	sts	0x00B4, r28
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <analogWrite+0xa4>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
  a4:	c0 38       	cpi	r28, 0x80	; 128
  a6:	d1 05       	cpc	r29, r1
  a8:	04 f4       	brge	.+0      	; 0xaa <analogWrite+0xaa>
					digitalWrite(pin, LOW);
  aa:	81 2f       	mov	r24, r17
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <analogWrite+0xb0>
				} else {
					digitalWrite(pin, HIGH);
  b0:	81 2f       	mov	r24, r17
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	0e 94 00 00 	call	0	; 0x0 <analogWrite>
				}
		}
	}
}
  b8:	df 91       	pop	r29
  ba:	cf 91       	pop	r28
  bc:	1f 91       	pop	r17
  be:	08 95       	ret

wiring_digital.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000b10  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000011b8  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.pinMode 0000007e  00000000  00000000  00001cfc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.digitalWrite 00000044  00000000  00000000  00001d7a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.digitalRead 000000a6  00000000  00000000  00001dbe  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .progmem.data 0000005a  00000000  00000000  00001e64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
Disassembly of section .text.pinMode:

00000000 <pinMode>:
	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	48 2f       	mov	r20, r24
   6:	50 e0       	ldi	r21, 0x00	; 0
   8:	ca 01       	movw	r24, r20
   a:	80 50       	subi	r24, 0x00	; 0
   c:	90 40       	sbci	r25, 0x00	; 0
	uint8_t bit = digitalPinToBitMask(pin);
   e:	fc 01       	movw	r30, r24
  10:	34 91       	lpm	r19, Z+
  12:	40 50       	subi	r20, 0x00	; 0
  14:	50 40       	sbci	r21, 0x00	; 0
  16:	fa 01       	movw	r30, r20
	uint8_t port = digitalPinToPort(pin);
  18:	84 91       	lpm	r24, Z+
  1a:	88 23       	and	r24, r24
  1c:	01 f0       	breq	.+0      	; 0x1e <pinMode+0x1e>
  1e:	90 e0       	ldi	r25, 0x00	; 0

	if (port == NOT_A_PIN) return LOW;
  20:	88 0f       	add	r24, r24
  22:	99 1f       	adc	r25, r25
  24:	fc 01       	movw	r30, r24
  26:	e0 50       	subi	r30, 0x00	; 0
  28:	f0 40       	sbci	r31, 0x00	; 0

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  2a:	a5 91       	lpm	r26, Z+
  2c:	b4 91       	lpm	r27, Z+
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
  2e:	fc 01       	movw	r30, r24
  30:	e0 50       	subi	r30, 0x00	; 0
  32:	f0 40       	sbci	r31, 0x00	; 0
  34:	c5 91       	lpm	r28, Z+
  36:	d4 91       	lpm	r29, Z+
  38:	66 23       	and	r22, r22
  3a:	01 f4       	brne	.+0      	; 0x3c <pinMode+0x3c>
  3c:	2f b7       	in	r18, 0x3f	; 63
  3e:	f8 94       	cli
  40:	8c 91       	ld	r24, X
  42:	93 2f       	mov	r25, r19
  44:	90 95       	com	r25
  46:	89 23       	and	r24, r25
  48:	8c 93       	st	X, r24
  4a:	88 81       	ld	r24, Y
  4c:	89 23       	and	r24, r25
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
  4e:	00 c0       	rjmp	.+0      	; 0x50 <pinMode+0x50>
  50:	62 30       	cpi	r22, 0x02	; 2
  52:	01 f4       	brne	.+0      	; 0x54 <pinMode+0x54>
  54:	2f b7       	in	r18, 0x3f	; 63
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
  56:	f8 94       	cli
  58:	8c 91       	ld	r24, X
  5a:	93 2f       	mov	r25, r19
  5c:	90 95       	com	r25
  5e:	89 23       	and	r24, r25
  60:	8c 93       	st	X, r24
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
  62:	88 81       	ld	r24, Y
  64:	83 2b       	or	r24, r19
  66:	88 83       	st	Y, r24
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
  68:	2f bf       	out	0x3f, r18	; 63
  6a:	00 c0       	rjmp	.+0      	; 0x6c <pinMode+0x6c>
  6c:	9f b7       	in	r25, 0x3f	; 63
  6e:	f8 94       	cli
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
  70:	8c 91       	ld	r24, X
  72:	83 2b       	or	r24, r19
  74:	8c 93       	st	X, r24
  76:	9f bf       	out	0x3f, r25	; 63
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
  78:	df 91       	pop	r29
  7a:	cf 91       	pop	r28
  7c:	08 95       	ret
Disassembly of section .text.digitalWrite:

00000000 <digitalWrite>:
	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
   0:	28 2f       	mov	r18, r24
   2:	30 e0       	ldi	r19, 0x00	; 0
   4:	c9 01       	movw	r24, r18
   6:	80 50       	subi	r24, 0x00	; 0
   8:	90 40       	sbci	r25, 0x00	; 0
   a:	fc 01       	movw	r30, r24
   c:	94 91       	lpm	r25, Z+
	uint8_t bit = digitalPinToBitMask(pin);
   e:	20 50       	subi	r18, 0x00	; 0
  10:	30 40       	sbci	r19, 0x00	; 0
  12:	f9 01       	movw	r30, r18
  14:	84 91       	lpm	r24, Z+
  16:	88 23       	and	r24, r24
	uint8_t port = digitalPinToPort(pin);
  18:	01 f0       	breq	.+0      	; 0x1a <digitalWrite+0x1a>
  1a:	e8 2f       	mov	r30, r24
  1c:	f0 e0       	ldi	r31, 0x00	; 0
  1e:	ee 0f       	add	r30, r30

	if (port == NOT_A_PIN) return LOW;
  20:	ff 1f       	adc	r31, r31
  22:	e0 50       	subi	r30, 0x00	; 0
  24:	f0 40       	sbci	r31, 0x00	; 0
  26:	a5 91       	lpm	r26, Z+
  28:	b4 91       	lpm	r27, Z+

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  2a:	2f b7       	in	r18, 0x3f	; 63
  2c:	f8 94       	cli
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
  2e:	66 23       	and	r22, r22
  30:	01 f4       	brne	.+0      	; 0x32 <digitalWrite+0x32>
  32:	8c 91       	ld	r24, X
  34:	90 95       	com	r25
  36:	89 23       	and	r24, r25
  38:	00 c0       	rjmp	.+0      	; 0x3a <digitalWrite+0x3a>
  3a:	8c 91       	ld	r24, X
  3c:	89 2b       	or	r24, r25
  3e:	8c 93       	st	X, r24
  40:	2f bf       	out	0x3f, r18	; 63
  42:	08 95       	ret
Disassembly of section .text.digitalRead:

00000000 <digitalRead>:
	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
   0:	68 2f       	mov	r22, r24
   2:	70 e0       	ldi	r23, 0x00	; 0
   4:	cb 01       	movw	r24, r22
   6:	80 50       	subi	r24, 0x00	; 0
   8:	90 40       	sbci	r25, 0x00	; 0
   a:	fc 01       	movw	r30, r24
   c:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
   e:	cb 01       	movw	r24, r22
  10:	80 50       	subi	r24, 0x00	; 0
  12:	90 40       	sbci	r25, 0x00	; 0
  14:	fc 01       	movw	r30, r24
  16:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
  18:	60 50       	subi	r22, 0x00	; 0
  1a:	70 40       	sbci	r23, 0x00	; 0
  1c:	fb 01       	movw	r30, r22
  1e:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
  20:	99 23       	and	r25, r25
  22:	01 f4       	brne	.+0      	; 0x24 <digitalRead+0x24>
  24:	20 e0       	ldi	r18, 0x00	; 0
  26:	30 e0       	ldi	r19, 0x00	; 0
  28:	00 c0       	rjmp	.+0      	; 0x2a <digitalRead+0x2a>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  2a:	22 23       	and	r18, r18
  2c:	01 f0       	breq	.+0      	; 0x2e <digitalRead+0x2e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
  2e:	23 30       	cpi	r18, 0x03	; 3
  30:	01 f0       	breq	.+0      	; 0x32 <digitalRead+0x32>
  32:	24 30       	cpi	r18, 0x04	; 4
  34:	00 f4       	brcc	.+0      	; 0x36 <digitalRead+0x36>
  36:	21 30       	cpi	r18, 0x01	; 1
  38:	01 f0       	breq	.+0      	; 0x3a <digitalRead+0x3a>
  3a:	22 30       	cpi	r18, 0x02	; 2
  3c:	01 f4       	brne	.+0      	; 0x3e <digitalRead+0x3e>
  3e:	00 c0       	rjmp	.+0      	; 0x40 <digitalRead+0x40>
  40:	26 30       	cpi	r18, 0x06	; 6
  42:	01 f0       	breq	.+0      	; 0x44 <digitalRead+0x44>
  44:	27 30       	cpi	r18, 0x07	; 7
  46:	01 f0       	breq	.+0      	; 0x48 <digitalRead+0x48>
  48:	24 30       	cpi	r18, 0x04	; 4
  4a:	01 f4       	brne	.+0      	; 0x4c <digitalRead+0x4c>
  4c:	00 c0       	rjmp	.+0      	; 0x4e <digitalRead+0x4e>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
  4e:	80 91 80 00 	lds	r24, 0x0080
  52:	8f 77       	andi	r24, 0x7F	; 127
  54:	00 c0       	rjmp	.+0      	; 0x56 <digitalRead+0x56>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
  56:	80 91 80 00 	lds	r24, 0x0080
  5a:	8f 7d       	andi	r24, 0xDF	; 223
  5c:	80 93 80 00 	sts	0x0080, r24
  60:	00 c0       	rjmp	.+0      	; 0x62 <digitalRead+0x62>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
  62:	84 b5       	in	r24, 0x24	; 36
  64:	8f 77       	andi	r24, 0x7F	; 127
  66:	00 c0       	rjmp	.+0      	; 0x68 <digitalRead+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
  68:	84 b5       	in	r24, 0x24	; 36
  6a:	8f 7d       	andi	r24, 0xDF	; 223
  6c:	84 bd       	out	0x24, r24	; 36
  6e:	00 c0       	rjmp	.+0      	; 0x70 <digitalRead+0x70>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
  70:	80 91 b0 00 	lds	r24, 0x00B0
  74:	8f 77       	andi	r24, 0x7F	; 127
  76:	00 c0       	rjmp	.+0      	; 0x78 <digitalRead+0x78>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
  78:	80 91 b0 00 	lds	r24, 0x00B0
  7c:	8f 7d       	andi	r24, 0xDF	; 223
  7e:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
  82:	89 2f       	mov	r24, r25
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	88 0f       	add	r24, r24
  88:	99 1f       	adc	r25, r25
  8a:	80 50       	subi	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	fc 01       	movw	r30, r24
  90:	a5 91       	lpm	r26, Z+
  92:	b4 91       	lpm	r27, Z+
  94:	8c 91       	ld	r24, X
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	84 23       	and	r24, r20
  9c:	01 f0       	breq	.+0      	; 0x9e <digitalRead+0x9e>
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
  a2:	c9 01       	movw	r24, r18
  a4:	08 95       	ret

wiring_pulse.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000774  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000fdf  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.pulseIn 00000140  00000000  00000000  00001787  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
Disassembly of section .text.pulseIn:

00000000 <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	cf 93       	push	r28
  16:	df 93       	push	r29
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
  18:	a8 2f       	mov	r26, r24
  1a:	b0 e0       	ldi	r27, 0x00	; 0
  1c:	cd 01       	movw	r24, r26
  1e:	80 50       	subi	r24, 0x00	; 0
  20:	90 40       	sbci	r25, 0x00	; 0
  22:	fc 01       	movw	r30, r24
  24:	84 90       	lpm	r8, Z+
	uint8_t port = digitalPinToPort(pin);
  26:	a0 50       	subi	r26, 0x00	; 0
  28:	b0 40       	sbci	r27, 0x00	; 0
  2a:	fd 01       	movw	r30, r26
  2c:	84 91       	lpm	r24, Z+
	uint8_t stateMask = (state ? bit : 0);
  2e:	66 23       	and	r22, r22
  30:	01 f4       	brne	.+0      	; 0x32 <pulseIn+0x32>
  32:	99 24       	eor	r9, r9
  34:	00 c0       	rjmp	.+0      	; 0x36 <pulseIn+0x36>
  36:	98 2c       	mov	r9, r8
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
  38:	59 01       	movw	r10, r18
  3a:	6a 01       	movw	r12, r20
  3c:	33 e0       	ldi	r19, 0x03	; 3
  3e:	aa 0c       	add	r10, r10
  40:	bb 1c       	adc	r11, r11
  42:	cc 1c       	adc	r12, r12
  44:	dd 1c       	adc	r13, r13
  46:	3a 95       	dec	r19
  48:	01 f4       	brne	.+0      	; 0x4a <pulseIn+0x4a>
  4a:	24 e0       	ldi	r18, 0x04	; 4
  4c:	d6 94       	lsr	r13
  4e:	c7 94       	ror	r12
  50:	b7 94       	ror	r11
  52:	a7 94       	ror	r10
  54:	2a 95       	dec	r18
  56:	01 f4       	brne	.+0      	; 0x58 <pulseIn+0x58>
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  58:	68 2f       	mov	r22, r24
  5a:	70 e0       	ldi	r23, 0x00	; 0
  5c:	66 0f       	add	r22, r22
  5e:	77 1f       	adc	r23, r23
  60:	60 50       	subi	r22, 0x00	; 0
  62:	70 40       	sbci	r23, 0x00	; 0
  64:	ee 24       	eor	r14, r14
  66:	ff 24       	eor	r15, r15
  68:	87 01       	movw	r16, r14
  6a:	fb 01       	movw	r30, r22
  6c:	a5 91       	lpm	r26, Z+
  6e:	b4 91       	lpm	r27, Z+
  70:	00 c0       	rjmp	.+0      	; 0x72 <pulseIn+0x72>
		if (numloops++ == maxloops)
  72:	ea 14       	cp	r14, r10
  74:	fb 04       	cpc	r15, r11
  76:	0c 05       	cpc	r16, r12
  78:	1d 05       	cpc	r17, r13
  7a:	01 f4       	brne	.+0      	; 0x7c <pulseIn+0x7c>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <pulseIn+0x7e>
  7e:	08 94       	sec
  80:	e1 1c       	adc	r14, r1
  82:	f1 1c       	adc	r15, r1
  84:	01 1d       	adc	r16, r1
  86:	11 1d       	adc	r17, r1
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  88:	8c 91       	ld	r24, X
  8a:	88 21       	and	r24, r8
  8c:	89 15       	cp	r24, r9
  8e:	01 f0       	breq	.+0      	; 0x90 <pulseIn+0x90>
  90:	00 c0       	rjmp	.+0      	; 0x92 <pulseIn+0x92>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
  92:	ea 14       	cp	r14, r10
  94:	fb 04       	cpc	r15, r11
  96:	0c 05       	cpc	r16, r12
  98:	1d 05       	cpc	r17, r13
  9a:	01 f4       	brne	.+0      	; 0x9c <pulseIn+0x9c>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <pulseIn+0x9e>
  9e:	08 94       	sec
  a0:	e1 1c       	adc	r14, r1
  a2:	f1 1c       	adc	r15, r1
  a4:	01 1d       	adc	r16, r1
  a6:	11 1d       	adc	r17, r1
  a8:	00 c0       	rjmp	.+0      	; 0xaa <pulseIn+0xaa>
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
  aa:	fb 01       	movw	r30, r22
  ac:	a5 91       	lpm	r26, Z+
  ae:	b4 91       	lpm	r27, Z+
  b0:	8c 91       	ld	r24, X
  b2:	88 21       	and	r24, r8
  b4:	89 15       	cp	r24, r9
  b6:	01 f4       	brne	.+0      	; 0xb8 <pulseIn+0xb8>
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	50 e0       	ldi	r21, 0x00	; 0
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
  c0:	fb 01       	movw	r30, r22
  c2:	c5 91       	lpm	r28, Z+
  c4:	d4 91       	lpm	r29, Z+
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <pulseIn+0xc8>
		if (numloops++ == maxloops)
  c8:	da 01       	movw	r26, r20
  ca:	c9 01       	movw	r24, r18
  cc:	8e 0d       	add	r24, r14
  ce:	9f 1d       	adc	r25, r15
  d0:	a0 1f       	adc	r26, r16
  d2:	b1 1f       	adc	r27, r17
  d4:	8a 15       	cp	r24, r10
  d6:	9b 05       	cpc	r25, r11
  d8:	ac 05       	cpc	r26, r12
  da:	bd 05       	cpc	r27, r13
  dc:	01 f0       	breq	.+0      	; 0xde <pulseIn+0xde>
			return 0;
		width++;
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	4f 4f       	sbci	r20, 0xFF	; 255
  e4:	5f 4f       	sbci	r21, 0xFF	; 255
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
  e6:	88 81       	ld	r24, Y
  e8:	88 21       	and	r24, r8
  ea:	89 15       	cp	r24, r9
  ec:	01 f0       	breq	.+0      	; 0xee <pulseIn+0xee>

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
  ee:	ca 01       	movw	r24, r20
  f0:	b9 01       	movw	r22, r18
  f2:	25 e1       	ldi	r18, 0x15	; 21
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
  fe:	9b 01       	movw	r18, r22
 100:	ac 01       	movw	r20, r24
 102:	20 5f       	subi	r18, 0xF0	; 240
 104:	3f 4f       	sbci	r19, 0xFF	; 255
 106:	4f 4f       	sbci	r20, 0xFF	; 255
 108:	5f 4f       	sbci	r21, 0xFF	; 255
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	56 95       	lsr	r21
 10e:	47 95       	ror	r20
 110:	37 95       	ror	r19
 112:	27 95       	ror	r18
 114:	8a 95       	dec	r24
 116:	01 f4       	brne	.+0      	; 0x118 <pulseIn+0x118>
 118:	00 c0       	rjmp	.+0      	; 0x11a <pulseIn+0x11a>
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	50 e0       	ldi	r21, 0x00	; 0
}
 122:	b9 01       	movw	r22, r18
 124:	ca 01       	movw	r24, r20
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	1f 91       	pop	r17
 12c:	0f 91       	pop	r16
 12e:	ff 90       	pop	r15
 130:	ef 90       	pop	r14
 132:	df 90       	pop	r13
 134:	cf 90       	pop	r12
 136:	bf 90       	pop	r11
 138:	af 90       	pop	r10
 13a:	9f 90       	pop	r9
 13c:	8f 90       	pop	r8
 13e:	08 95       	ret

wiring_shift.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000072c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000fb1  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.shiftOut 00000084  00000000  00000000  00001711  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.shiftIn 00000080  00000000  00000000  00001795  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
Disassembly of section .text.shiftOut:

00000000 <shiftOut>:
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	e8 2e       	mov	r14, r24
  14:	f6 2e       	mov	r15, r22
  16:	b4 2e       	mov	r11, r20
  18:	c7 e0       	ldi	r28, 0x07	; 7
  1a:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
  1c:	02 2f       	mov	r16, r18
  1e:	10 e0       	ldi	r17, 0x00	; 0
  20:	87 e0       	ldi	r24, 0x07	; 7
uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
  22:	c8 2e       	mov	r12, r24
  24:	d1 2c       	mov	r13, r1
  26:	bb 20       	and	r11, r11
  28:	01 f4       	brne	.+0      	; 0x2a <shiftOut+0x2a>
		if (bitOrder == LSBFIRST)
  2a:	b6 01       	movw	r22, r12
  2c:	6c 1b       	sub	r22, r28
			value |= digitalRead(dataPin) << i;
  2e:	7d 0b       	sbc	r23, r29
  30:	c8 01       	movw	r24, r16
  32:	00 c0       	rjmp	.+0      	; 0x34 <shiftOut+0x34>
  34:	95 95       	asr	r25
  36:	87 95       	ror	r24
  38:	6a 95       	dec	r22
  3a:	02 f4       	brpl	.+0      	; 0x3c <shiftOut+0x3c>
  3c:	bc 01       	movw	r22, r24
  3e:	00 c0       	rjmp	.+0      	; 0x40 <shiftOut+0x40>
  40:	b8 01       	movw	r22, r16
  42:	0c 2e       	mov	r0, r28
  44:	00 c0       	rjmp	.+0      	; 0x46 <shiftOut+0x46>
		else
			value |= digitalRead(dataPin) << (7 - i);
  46:	75 95       	asr	r23
  48:	67 95       	ror	r22
  4a:	0a 94       	dec	r0
  4c:	02 f4       	brpl	.+0      	; 0x4e <shiftOut+0x4e>
  4e:	61 70       	andi	r22, 0x01	; 1
  50:	8e 2d       	mov	r24, r14
  52:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
  56:	8f 2d       	mov	r24, r15
  58:	61 e0       	ldi	r22, 0x01	; 1
		digitalWrite(clockPin, LOW);
  5a:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
  5e:	8f 2d       	mov	r24, r15
  60:	60 e0       	ldi	r22, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <shiftOut>

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
  66:	21 97       	sbiw	r28, 0x01	; 1
  68:	9f ef       	ldi	r25, 0xFF	; 255
  6a:	cf 3f       	cpi	r28, 0xFF	; 255
		else
			value |= digitalRead(dataPin) << (7 - i);
		digitalWrite(clockPin, LOW);
	}
	return value;
}
  6c:	d9 07       	cpc	r29, r25
  6e:	01 f4       	brne	.+0      	; 0x70 <shiftOut+0x70>
  70:	df 91       	pop	r29
  72:	cf 91       	pop	r28
  74:	1f 91       	pop	r17
  76:	0f 91       	pop	r16
  78:	ff 90       	pop	r15
  7a:	ef 90       	pop	r14
  7c:	df 90       	pop	r13
  7e:	cf 90       	pop	r12
  80:	bf 90       	pop	r11
  82:	08 95       	ret
Disassembly of section .text.shiftIn:

00000000 <shiftIn>:
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	f8 2e       	mov	r15, r24
  12:	06 2f       	mov	r16, r22
  14:	e4 2e       	mov	r14, r20
  16:	10 e0       	ldi	r17, 0x00	; 0
  18:	c7 e0       	ldi	r28, 0x07	; 7
  1a:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
  1c:	97 e0       	ldi	r25, 0x07	; 7
  1e:	c9 2e       	mov	r12, r25
  20:	d1 2c       	mov	r13, r1
uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
  22:	80 2f       	mov	r24, r16
  24:	61 e0       	ldi	r22, 0x01	; 1
  26:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
		if (bitOrder == LSBFIRST)
  2a:	ee 20       	and	r14, r14
  2c:	01 f4       	brne	.+0      	; 0x2e <shiftIn+0x2e>
			value |= digitalRead(dataPin) << i;
  2e:	8f 2d       	mov	r24, r15
  30:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  34:	96 01       	movw	r18, r12
  36:	2c 1b       	sub	r18, r28
  38:	3d 0b       	sbc	r19, r29
  3a:	00 c0       	rjmp	.+0      	; 0x3c <shiftIn+0x3c>
  3c:	88 0f       	add	r24, r24
  3e:	99 1f       	adc	r25, r25
  40:	2a 95       	dec	r18
  42:	02 f4       	brpl	.+0      	; 0x44 <shiftIn+0x44>
  44:	00 c0       	rjmp	.+0      	; 0x46 <shiftIn+0x46>
		else
			value |= digitalRead(dataPin) << (7 - i);
  46:	8f 2d       	mov	r24, r15
  48:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  4c:	0c 2e       	mov	r0, r28
  4e:	00 c0       	rjmp	.+0      	; 0x50 <shiftIn+0x50>
  50:	88 0f       	add	r24, r24
  52:	99 1f       	adc	r25, r25
  54:	0a 94       	dec	r0
  56:	02 f4       	brpl	.+0      	; 0x58 <shiftIn+0x58>
  58:	18 2b       	or	r17, r24
		digitalWrite(clockPin, LOW);
  5a:	80 2f       	mov	r24, r16
  5c:	60 e0       	ldi	r22, 0x00	; 0
  5e:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  62:	21 97       	sbiw	r28, 0x01	; 1

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
  64:	8f ef       	ldi	r24, 0xFF	; 255
  66:	cf 3f       	cpi	r28, 0xFF	; 255
  68:	d8 07       	cpc	r29, r24
  6a:	01 f4       	brne	.+0      	; 0x6c <shiftIn+0x6c>
		else
			value |= digitalRead(dataPin) << (7 - i);
		digitalWrite(clockPin, LOW);
	}
	return value;
}
  6c:	81 2f       	mov	r24, r17
  6e:	df 91       	pop	r29
  70:	cf 91       	pop	r28
  72:	1f 91       	pop	r17
  74:	0f 91       	pop	r16
  76:	ff 90       	pop	r15
  78:	ef 90       	pop	r14
  7a:	df 90       	pop	r13
  7c:	cf 90       	pop	r12
  7e:	08 95       	ret
