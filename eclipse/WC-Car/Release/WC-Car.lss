
WC-Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000009  00800100  00800100  00000248  2**0
                  ALLOC
  2 .stab         00001950  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00003a51  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 30       	cpi	r26, 0x09	; 9
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  88:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:

//The setup function is called once at startup of the sketch
void setup()
{
// Add your initialization code here
}
  90:	08 95       	ret

00000092 <loop>:

// The loop function is called in an endless loop
void loop()
{
//Add your repeated code here
}
  92:	08 95       	ret

00000094 <main>:
#include <Arduino.h>

int main(void)
{
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
	init();
  98:	0e 94 ad 00 	call	0x15a	; 0x15a <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
  9c:	0e 94 48 00 	call	0x90	; 0x90 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
  a0:	c0 e0       	ldi	r28, 0x00	; 0
  a2:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
  a4:	0e 94 49 00 	call	0x92	; 0x92 <loop>
		if (serialEventRun) serialEventRun();
  a8:	20 97       	sbiw	r28, 0x00	; 0
  aa:	e1 f3       	breq	.-8      	; 0xa4 <main+0x10>
  ac:	0e 94 00 00 	call	0	; 0x0 <__vectors>
  b0:	f9 cf       	rjmp	.-14     	; 0xa4 <main+0x10>

000000b2 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	2f 93       	push	r18
  be:	3f 93       	push	r19
  c0:	4f 93       	push	r20
  c2:	5f 93       	push	r21
  c4:	6f 93       	push	r22
  c6:	7f 93       	push	r23
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	af 93       	push	r26
  ce:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  d0:	20 91 04 01 	lds	r18, 0x0104
  d4:	30 91 05 01 	lds	r19, 0x0105
  d8:	40 91 06 01 	lds	r20, 0x0106
  dc:	50 91 07 01 	lds	r21, 0x0107
	unsigned char f = timer0_fract;
  e0:	70 91 08 01 	lds	r23, 0x0108

	m += MILLIS_INC;
  e4:	da 01       	movw	r26, r20
  e6:	c9 01       	movw	r24, r18
  e8:	02 96       	adiw	r24, 0x02	; 2
  ea:	a1 1d       	adc	r26, r1
  ec:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
  ee:	67 2f       	mov	r22, r23
  f0:	6a 5f       	subi	r22, 0xFA	; 250
	if (f >= FRACT_MAX) {
  f2:	6d 37       	cpi	r22, 0x7D	; 125
  f4:	30 f0       	brcs	.+12     	; 0x102 <__vector_16+0x50>
		f -= FRACT_MAX;
  f6:	6d 57       	subi	r22, 0x7D	; 125
		m += 1;
  f8:	da 01       	movw	r26, r20
  fa:	c9 01       	movw	r24, r18
  fc:	03 96       	adiw	r24, 0x03	; 3
  fe:	a1 1d       	adc	r26, r1
 100:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 102:	60 93 08 01 	sts	0x0108, r22
	timer0_millis = m;
 106:	80 93 04 01 	sts	0x0104, r24
 10a:	90 93 05 01 	sts	0x0105, r25
 10e:	a0 93 06 01 	sts	0x0106, r26
 112:	b0 93 07 01 	sts	0x0107, r27
	timer0_overflow_count++;
 116:	80 91 00 01 	lds	r24, 0x0100
 11a:	90 91 01 01 	lds	r25, 0x0101
 11e:	a0 91 02 01 	lds	r26, 0x0102
 122:	b0 91 03 01 	lds	r27, 0x0103
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	a1 1d       	adc	r26, r1
 12a:	b1 1d       	adc	r27, r1
 12c:	80 93 00 01 	sts	0x0100, r24
 130:	90 93 01 01 	sts	0x0101, r25
 134:	a0 93 02 01 	sts	0x0102, r26
 138:	b0 93 03 01 	sts	0x0103, r27
}
 13c:	bf 91       	pop	r27
 13e:	af 91       	pop	r26
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	7f 91       	pop	r23
 146:	6f 91       	pop	r22
 148:	5f 91       	pop	r21
 14a:	4f 91       	pop	r20
 14c:	3f 91       	pop	r19
 14e:	2f 91       	pop	r18
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 15a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 15c:	84 b5       	in	r24, 0x24	; 36
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 162:	84 b5       	in	r24, 0x24	; 36
 164:	81 60       	ori	r24, 0x01	; 1
 166:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 168:	85 b5       	in	r24, 0x25	; 37
 16a:	82 60       	ori	r24, 0x02	; 2
 16c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 16e:	85 b5       	in	r24, 0x25	; 37
 170:	81 60       	ori	r24, 0x01	; 1
 172:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 174:	ee e6       	ldi	r30, 0x6E	; 110
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 17e:	e1 e8       	ldi	r30, 0x81	; 129
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 184:	80 81       	ld	r24, Z
 186:	82 60       	ori	r24, 0x02	; 2
 188:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 18a:	80 81       	ld	r24, Z
 18c:	81 60       	ori	r24, 0x01	; 1
 18e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 190:	e0 e8       	ldi	r30, 0x80	; 128
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	81 60       	ori	r24, 0x01	; 1
 198:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 19a:	e1 eb       	ldi	r30, 0xB1	; 177
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	84 60       	ori	r24, 0x04	; 4
 1a2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 1a4:	e0 eb       	ldi	r30, 0xB0	; 176
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	81 60       	ori	r24, 0x01	; 1
 1ac:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 1ae:	ea e7       	ldi	r30, 0x7A	; 122
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	84 60       	ori	r24, 0x04	; 4
 1b6:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 1b8:	80 81       	ld	r24, Z
 1ba:	82 60       	ori	r24, 0x02	; 2
 1bc:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 1be:	80 81       	ld	r24, Z
 1c0:	81 60       	ori	r24, 0x01	; 1
 1c2:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 1c4:	80 81       	ld	r24, Z
 1c6:	80 68       	ori	r24, 0x80	; 128
 1c8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 1ca:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 1ce:	08 95       	ret

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
